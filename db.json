{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/xups/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/xups/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/xups/source/img/jelon.jpg","path":"img/jelon.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/xups/source/img/scrolltoparrow.png","path":"img/scrolltoparrow.png","modified":1,"renderable":1},{"_id":"themes/xups/source/img/share.png","path":"img/share.png","modified":1,"renderable":1},{"_id":"themes/xups/source/img/url.png","path":"img/url.png","modified":1,"renderable":1},{"_id":"themes/xups/source/img/wechat_jelon.png","path":"img/wechat_jelon.png","modified":1,"renderable":1},{"_id":"themes/xups/source/img/wechat_mp.jpg","path":"img/wechat_mp.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/wechat_pay.png","path":"img/wechat_pay.png","modified":1,"renderable":1},{"_id":"themes/xups/source/js/comment.js","path":"js/comment.js","modified":1,"renderable":1},{"_id":"themes/xups/source/js/html5.js","path":"js/html5.js","modified":1,"renderable":1},{"_id":"themes/xups/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/xups/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/xups/source/img/no_found.png","path":"img/no_found.png","modified":1,"renderable":1},{"_id":"themes/xups/source/img/unsigned_avatar.jpg","path":"img/unsigned_avatar.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"themes/xups/source/img/lab/banner.jpg","path":"img/lab/banner.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/thumbnail/0.jpg","path":"img/thumbnail/0.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/thumbnail/1.jpg","path":"img/thumbnail/1.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/thumbnail/4.jpg","path":"img/thumbnail/4.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/thumbnail/5.jpg","path":"img/thumbnail/5.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/thumbnail/6.jpg","path":"img/thumbnail/6.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/thumbnail/7.jpg","path":"img/thumbnail/7.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/thumbnail/8.jpg","path":"img/thumbnail/8.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/thumbnail/9.jpg","path":"img/thumbnail/9.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/icomoon/icomoon.ttf","path":"css/fonts/icomoon/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/xups/source/img/thumbnail/2.jpg","path":"img/thumbnail/2.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/img/thumbnail/3.jpg","path":"img/thumbnail/3.jpg","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/homizio-nova/italic.otf","path":"css/fonts/homizio-nova/italic.otf","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/homizio-nova/italic.ttf","path":"css/fonts/homizio-nova/italic.ttf","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/homizio-nova/light.otf","path":"css/fonts/homizio-nova/light.otf","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/homizio-nova/light_italic.otf","path":"css/fonts/homizio-nova/light_italic.otf","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/homizio-nova/light_italic.ttf","path":"css/fonts/homizio-nova/light_italic.ttf","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/homizio-nova/regular.otf","path":"css/fonts/homizio-nova/regular.otf","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/icomoon/icomoon.eot","path":"css/fonts/icomoon/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/icomoon/icomoon.svg","path":"css/fonts/icomoon/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/icomoon/icomoon.woff","path":"css/fonts/icomoon/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/homizio-nova/light.ttf","path":"css/fonts/homizio-nova/light.ttf","modified":1,"renderable":1},{"_id":"themes/xups/source/css/fonts/homizio-nova/regular.ttf","path":"css/fonts/homizio-nova/regular.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/xups/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1552364568501},{"_id":"themes/xups/README.md","hash":"7bc48e43dad4fb62776b150bbaf37c7cb4a4c5e2","modified":1552364568501},{"_id":"themes/xups/_config.yml","hash":"5b8094029fefe0346a43913c1169f17345a41fe7","modified":1552364568504},{"_id":"source/about/index.md","hash":"a59c1648f54b7e152181f8d6c72adc44f5eda262","modified":1552368830800},{"_id":"source/_posts/01hello-world.md","hash":"8c4b8dbd3c90f60b7f70142e49b7bd6e46813080","modified":1552364568417},{"_id":"source/_posts/02hexo.md","hash":"8ed25ced0cd02c212ae188477d5f404822a0f69a","modified":1552364568417},{"_id":"source/_posts/03介绍主题的修改.md","hash":"0987d8f02eb4f091719121386b2f87c082e4ebc3","modified":1552364568438},{"_id":"source/_posts/04内容编写和图片引用.md","hash":"d4e8422c2f51a3955c0762612dd2bf603bff0821","modified":1552364568440},{"_id":"source/_posts/05主题内容的配置.md","hash":"f51a3b628cad6e8ca6d2f29b188a1348c577471e","modified":1552364568440},{"_id":"source/_posts/06php.md","hash":"dedcf0aa748cf8b14126d4f28a222992ad6c1495","modified":1552364568441},{"_id":"source/_posts/07lazyload.md","hash":"ddf58b981a7a2d19d2388007b18dfd7fd753e927","modified":1552364568443},{"_id":"source/_posts/08vue.md","hash":"a57d13728d1425fcc219600913bb269acbd14c18","modified":1552364568443},{"_id":"source/_posts/antd-design-pro中使用typescript.md","hash":"d3708e6c819172df403d9b70f951b683546dc6ca","modified":1552364568451},{"_id":"source/_posts/antd-design-pro的用法.md","hash":"de1612ddd2cd3fad41f5a677cf08041b84f4e6c9","modified":1552364568452},{"_id":"source/_posts/git和vscode安装文档.md","hash":"e29d519ed2236dfd4be9d34a5d5db29254abf734","modified":1552364568452},{"_id":"source/_posts/hexo博客保存源代码.md","hash":"c980930f6147ef7b64d0b476534c2fc1aa6b265b","modified":1552364568452},{"_id":"source/_posts/hexo博客同时部署到github和Coding.md","hash":"c789e32c8ca05baf71bec75180b631781e54759b","modified":1552364568454},{"_id":"source/_posts/node搭建服务器.md","hash":"6f1bae83893f5a19498c71e07eae41877ff4587b","modified":1552364568454},{"_id":"source/_posts/react高阶函数———一个页面中弹出框的打开和关闭.md","hash":"bbb9aec6c98d259ce6fe9c5d53f6eae5c2161bd4","modified":1552364568455},{"_id":"source/_posts/webpack.md","hash":"a1404f05565a7c6374ef2c760c2a72c6d1310ed9","modified":1552364568455},{"_id":"source/_posts/使用fetch实现文件下载.md","hash":"491878f4a907d19b1a11be9a79ff6ef6a1c35eac","modified":1552364568455},{"_id":"source/_posts/使用less定制bootstrap的过程.md","hash":"9e286488590bff8ad119c2038143d9e45c3cd7fa","modified":1552364568456},{"_id":"source/_posts/关于es6.md","hash":"62783df0d1e456528f770e7606f214a1252bc295","modified":1552364568459},{"_id":"source/_posts/关于redux.md","hash":"01ad2179c6ad80a69feb9fa150149f0959fc07fc","modified":1552364568460},{"_id":"source/_posts/前端学习及工具网址.md","hash":"74514e13ab28449f12f16a2c353ad8f681fb6e59","modified":1552364568460},{"_id":"source/_posts/基于mpvue-weui的小程序.md","hash":"6fc95f5ddbba166ffb4c11a8177c1080d560c026","modified":1552364568460},{"_id":"source/_posts/如何存储对象.md","hash":"a14527be2596e65e0c9b9586d01852211589cd1c","modified":1552364568461},{"_id":"source/_posts/微信小程序登录及注册.md","hash":"eb904ca35c160bb9b117f1b669328a6487cba6b0","modified":1552364568461},{"_id":"source/_posts/微信网页版图片上传预览的书写步骤.md","hash":"1ecfa2d88306fdcaf034e1bb5c75792dcb10ec7d","modified":1552364568463},{"_id":"source/_posts/面试题汇总.md","hash":"ba6eeb831c9dfcf976cf556aceaa794b434ea15c","modified":1552364568465},{"_id":"source/archives/index.md","hash":"0642637e679abf87318fc009d3714accb2214e08","modified":1552364568465},{"_id":"source/categories/index.md","hash":"6d5a0a8dc906b5a04abb62c7376f59a9fd409df3","modified":1552364568466},{"_id":"source/comment/index.md","hash":"8ebc21dec895c59375e511f921c8eef99cf192e7","modified":1552364568466},{"_id":"source/lab/index.md","hash":"6dd2530989a908fbce3cd3aa467c62865f478d85","modified":1552364568467},{"_id":"source/tags/index.md","hash":"a95f2bee8ea59534087d4fe6e05f35016e2d84dd","modified":1552364568467},{"_id":"themes/xups/__scaffolds/draft.md","hash":"eef222e6da6ad30e31ca264743f3e0c37db97ad0","modified":1552364568502},{"_id":"themes/xups/__scaffolds/page.md","hash":"892cedeb7b62a73e72a3b369daf2bc63dfee47dc","modified":1552364568502},{"_id":"themes/xups/__scaffolds/post.md","hash":"eef222e6da6ad30e31ca264743f3e0c37db97ad0","modified":1552364568502},{"_id":"themes/xups/layout/archive.ejs","hash":"7375cd5e27be00c1a34b97e25086f261ba4b24f4","modified":1552364568513},{"_id":"themes/xups/layout/category.ejs","hash":"1607af608586d69930e1e389e3fcf2a24b701fad","modified":1552364568513},{"_id":"themes/xups/layout/index.ejs","hash":"5844cc612c445e5276981cfd57a4072c5ea5fbde","modified":1552364568514},{"_id":"themes/xups/layout/layout.ejs","hash":"73f60bed976cc4e55eb2f4c1d3bec1e3975e86ba","modified":1552364568514},{"_id":"themes/xups/layout/page.ejs","hash":"66c8c314d4083fff38568f2900d98223c407d5ef","modified":1552364568514},{"_id":"themes/xups/layout/post.ejs","hash":"6690fe7adb736e9f3d9d7f65a6b964cdc3c21f20","modified":1552364568515},{"_id":"themes/xups/layout/tag.ejs","hash":"e5d99bff4994ec19ee7729cbb41b63546b17a6ff","modified":1552364568515},{"_id":"themes/xups/layout/tags.ejs","hash":"7a1c39c132a15b3aabd2092948741152b6232b05","modified":1552364568515},{"_id":"source/_posts/02hexo/1..jpg","hash":"002f096646a4b5c58163c865bda732aedbcef031","modified":1552364568418},{"_id":"source/_posts/02hexo/12.jpg","hash":"d95f7ed4cf17472d7ad3e51ae2ac772346745b59","modified":1552364568420},{"_id":"source/_posts/02hexo/5.jpg","hash":"99d8a6bb2d77c1183f1e24f72a786626fab45f1f","modified":1552364568420},{"_id":"source/_posts/02hexo/6.jpg","hash":"144d4b8f06937c3fc174c2f61d53a02e57891d6a","modified":1552364568421},{"_id":"source/_posts/02hexo/add.jpg","hash":"9ff05414c1ef5be1bf54cb3a3d6f74810eafd676","modified":1552364568422},{"_id":"source/_posts/02hexo/blank.jpg","hash":"a1c92d0a24d2ed09d58e262810d729ce64a373af","modified":1552364568423},{"_id":"source/_posts/02hexo/createg.jpg","hash":"71cf6f29f6723bd641752af0a49845add8ece987","modified":1552364568424},{"_id":"source/_posts/02hexo/deployment.jpg","hash":"bdbe2d255659055622fb9987264a7930c0c601f3","modified":1552364568424},{"_id":"source/_posts/02hexo/eval.jpg","hash":"be01483a5ae87d6521803a24097d5860029139e7","modified":1552364568427},{"_id":"source/_posts/02hexo/git.jpg","hash":"01ce334a1b5891377d26ea34f3c6349ce6ccac5d","modified":1552364568428},{"_id":"source/_posts/02hexo/hexo.jpg","hash":"211f5d5ff60764a95e7f0255e6fdd66c8a1ce9aa","modified":1552364568429},{"_id":"source/_posts/02hexo/hg.jpg","hash":"692ace8b88ebd271da52777f28b89ad35ab4f53b","modified":1552364568431},{"_id":"source/_posts/02hexo/hs.jpg","hash":"dab2b281c64e87882a8102052ddda6b702890992","modified":1552364568431},{"_id":"source/_posts/02hexo/in.jpg","hash":"050c45e586c6d5137e1a8e81c276ab68278ce477","modified":1552364568432},{"_id":"source/_posts/02hexo/key.jpg","hash":"11b77fc535556dc975ac02836688f8041a3d4165","modified":1552364568432},{"_id":"source/_posts/02hexo/login.jpg","hash":"95505fb9bcdca1720ddcccd7a2d0a64a0380e4ee","modified":1552364568433},{"_id":"source/_posts/02hexo/ls.jpg","hash":"9cfa3993ed0737f655c89a5e0ee4a55826f7fe33","modified":1552364568433},{"_id":"source/_posts/02hexo/newgithub.jpg","hash":"05173f371630be52c834381cd6fc199725691b63","modified":1552364568434},{"_id":"source/_posts/02hexo/node.jpg","hash":"976f400d03871be1bfc57784f2cf87100ef553cb","modified":1552364568434},{"_id":"source/_posts/02hexo/none.jpg","hash":"206a36415d74be8cdc184e4da312dda79c919d22","modified":1552364568434},{"_id":"source/_posts/02hexo/re.jpg","hash":"3fd279ccb06bf336052a750440845a645f9e5250","modified":1552364568435},{"_id":"source/_posts/02hexo/resuccess.jpg","hash":"8f1c7e383d09400effe9ab45b7b38cfced76947d","modified":1552364568435},{"_id":"source/_posts/02hexo/ssh.jpg","hash":"181fcbdf6e895d19786e4294423cddd2a27ea4bb","modified":1552364568436},{"_id":"source/_posts/02hexo/success.jpg","hash":"c322e8b3d9b4795562692d839606655dcc0113c2","modified":1552364568436},{"_id":"source/_posts/02hexo/theme.jpg","hash":"16b2402a7c21b162ab84911ff0720ec19486108a","modified":1552364568437},{"_id":"source/_posts/02hexo/themedes.jpg","hash":"e21b1d6fb65e5b07f462021b31853de024d26fe2","modified":1552364568438},{"_id":"source/_posts/02hexo/uname.jpg","hash":"b19d7ea25b3d5623576a4773ab47a3d75e7a60d2","modified":1552364568438},{"_id":"source/_posts/03介绍主题的修改/theme.jpg","hash":"16b2402a7c21b162ab84911ff0720ec19486108a","modified":1552364568439},{"_id":"source/_posts/05主题内容的配置/themedes.jpg","hash":"e21b1d6fb65e5b07f462021b31853de024d26fe2","modified":1552364568441},{"_id":"source/_posts/06php/1.jpg","hash":"927e65d4aee3c10abb7a1a89bcd6e5dc23e6528d","modified":1552364568442},{"_id":"source/_posts/06php/define.jpg","hash":"ed6e890362319cbf3738728d1bf5cd9acbcb8ab3","modified":1552364568442},{"_id":"source/_posts/06php/host.jpg","hash":"9581faae820921b8737ae0063dd24b2fe8a78645","modified":1552364568442},{"_id":"source/_posts/07lazyload/src.jpg","hash":"33b16749f2e8dccf4764d15c05966e527898c5be","modified":1552364568443},{"_id":"source/_posts/08vue/index.jpg","hash":"006adc78cafcdb05107f4efbf77d01e14e53a2f3","modified":1552364568444},{"_id":"source/_posts/08vue/util.jpg","hash":"a4a133583e1090ea51ab15320c86157e74a9f7d0","modified":1552364568445},{"_id":"source/_posts/08vue/vue-router-nav.jpg","hash":"f1076c3fc3c77be860cc4e5c19bfce6d9aae5602","modified":1552364568445},{"_id":"source/_posts/08vue/子与子子1.jpg","hash":"57ae8c4fa9d22f5b6b103a0a9813b12cfe5f514e","modified":1552364568446},{"_id":"source/_posts/08vue/子与子子2.jpg","hash":"b4a7a7175c996b465d621315973524b42bc1a057","modified":1552364568447},{"_id":"source/_posts/08vue/子与父子.jpg","hash":"a17b966daac60ed01dca34f653a2ca53ba31be49","modified":1552364568447},{"_id":"source/_posts/08vue/子与父父.jpg","hash":"bbb0ff258d7f7ae25c12a3f9badb99ee8991e532","modified":1552364568448},{"_id":"source/_posts/08vue/搭建.jpg","hash":"21135e83c2995fecf4f6984bb5135de2fcae1131","modified":1552364568449},{"_id":"source/_posts/08vue/父与子$parent.jpg","hash":"ae28ba574ed608cbef19c55596c617e4a47a6bc1","modified":1552364568450},{"_id":"source/_posts/08vue/父与子.jpg","hash":"1d1eb9816f180f827b89ba8f7c057ddd5cb73759","modified":1552364568450},{"_id":"source/_posts/08vue/父与子ref.jpg","hash":"d48609166393cbd1e1a964a94d94f3ca54919a84","modified":1552364568451},{"_id":"source/_posts/hexo博客保存源代码/branch.png","hash":"2e57b75723d2eb1754d5a9844b6b453cfc036757","modified":1552364568453},{"_id":"source/_posts/hexo博客保存源代码/git.png","hash":"2502b26ff21a2d506b85a21316e2d6ea3207c4a3","modified":1552364568454},{"_id":"source/_posts/使用less定制bootstrap的过程/1.jpg","hash":"4ea8d5a740a1f736e2d5901b6cbc88f05ffbe92f","modified":1552364568456},{"_id":"source/_posts/使用less定制bootstrap的过程/2.jpg","hash":"22c1f2f97d4f70743c0746fd7113c282d1e5909c","modified":1552364568457},{"_id":"source/_posts/使用less定制bootstrap的过程/4.jpg","hash":"610155bfeeb9e7ecc4e03583481059295b107676","modified":1552364568458},{"_id":"source/_posts/使用less定制bootstrap的过程/5.jpg","hash":"7ea6684b3216aa4b2ff849996cf6c9939e949abf","modified":1552364568458},{"_id":"source/_posts/使用less定制bootstrap的过程/6.jpg","hash":"9d3aff437ed613f2ade26bc5071e1bce0b3d84c1","modified":1552364568459},{"_id":"source/_posts/微信网页版图片上传预览的书写步骤/微信图片_20180905190554.png","hash":"c7ff3885c26170c7166769171b171f3a4dd90627","modified":1552364568464},{"_id":"themes/xups/__source/about/index.md","hash":"32707ad1a27069c7f30fdbd645da15d25910fb69","modified":1552364568503},{"_id":"themes/xups/__source/comment/index.md","hash":"8ebc21dec895c59375e511f921c8eef99cf192e7","modified":1552364568503},{"_id":"themes/xups/__source/lab/index.md","hash":"756591670a1f2a6819add9f344e59d312eeb4d40","modified":1552364568504},{"_id":"themes/xups/layout/_custom/about.ejs","hash":"0e4a7785f263ec748cee614349068c33229938a4","modified":1552364568505},{"_id":"themes/xups/layout/_custom/comment.ejs","hash":"dfe71439cacc9a4d5eff76f24f04a7dd044f0aaa","modified":1552364568505},{"_id":"themes/xups/layout/_custom/lab.ejs","hash":"f6f601ddf3e97ffaec9ce85db41b1fdfdf7c3fcc","modified":1552364568505},{"_id":"themes/xups/layout/_partial/after-footer.ejs","hash":"51e748ed5cdb4abce01a80501e702fbfedd5f147","modified":1552364568506},{"_id":"themes/xups/layout/_partial/article.ejs","hash":"5d692c560f7a6c2a423e816ac23482796ca5f5b9","modified":1552364568506},{"_id":"themes/xups/layout/_partial/baidu-analytics.ejs","hash":"9e9e8da02174f708aaefa4385b5b1d6fe45c807e","modified":1552364568506},{"_id":"themes/xups/layout/_partial/footer.ejs","hash":"b2364bf87ad145214c33dddb67ea942ec805db06","modified":1552364568507},{"_id":"themes/xups/layout/_partial/head.ejs","hash":"b74173aa97f1bb843bc3a2091a616f5dd4e723f2","modified":1552364568507},{"_id":"themes/xups/layout/_partial/header.ejs","hash":"a61f394b106db72949fb7b2b88d9c9fe590d519e","modified":1552364568507},{"_id":"themes/xups/layout/_partial/post-list.ejs","hash":"360f3c7627e55f7e26e363ef02ddc7c6bb46f2a2","modified":1552364568508},{"_id":"themes/xups/layout/_partial/sidebar.ejs","hash":"3eb609d0ad189c3b436c91d02afc09aee90182fa","modified":1552364568511},{"_id":"themes/xups/source/css/.DS_Store","hash":"7a2750dc6206c6f07303809521f5eb6654cfc3b3","modified":1545891313756},{"_id":"themes/xups/source/css/_extend.styl","hash":"4942d3ad93832e5b1ad559a1b66e89e145e982b9","modified":1552364568517},{"_id":"themes/xups/source/css/_markdown.styl","hash":"0fd8cff5a5bbf93507817758478cd22efd3cfc88","modified":1552364568518},{"_id":"themes/xups/source/css/_variables.styl","hash":"d0314bd375ba70110ae95a716b7f53a949545f69","modified":1552364568522},{"_id":"themes/xups/source/css/style.styl","hash":"ae25cdd604a9e4643caa04c704593fd4cc70dfd6","modified":1552364568530},{"_id":"themes/xups/source/img/.DS_Store","hash":"a1bdef3a79e0c0f0c4f92e81c00a875f6422dab5","modified":1545891313770},{"_id":"themes/xups/source/img/default.png","hash":"a0e8360a185c7516bc2dddb25241daee67b42972","modified":1552364568531},{"_id":"themes/xups/source/img/jelon.jpg","hash":"5a698f21552a8365ef44f7113665bff8121635cb","modified":1552364568531},{"_id":"themes/xups/source/img/loading.gif","hash":"92dcf9179379355f05cf2d1c8cceba930a2a674f","modified":1552364568533},{"_id":"themes/xups/source/img/scrolltoparrow.png","hash":"53bd140adb85b23d535d1e488550eda4624a58bd","modified":1552364568534},{"_id":"themes/xups/source/img/share.png","hash":"20a860aeb842a556d067deabb99f6bfc024c97d0","modified":1552364568534},{"_id":"themes/xups/source/img/url.png","hash":"be1f35666ed5bf03aa3f6db121bd03c407b158a7","modified":1552364568543},{"_id":"themes/xups/source/img/wechat_jelon.png","hash":"f1e1cab54bfb69e7816b1d5f355100ea8b272ce4","modified":1552364568543},{"_id":"themes/xups/source/img/wechat_mp.jpg","hash":"d58b7796093ca8cdd4034b2dd28021c147199099","modified":1552364568544},{"_id":"themes/xups/source/img/wechat_pay.png","hash":"3fb3bbd4b1fae4259578dce0ca838e0696283041","modified":1552364568545},{"_id":"themes/xups/source/js/comment.js","hash":"9eb05c474bb1c6c6bcc576632e8a72dc20541bc2","modified":1552364568545},{"_id":"themes/xups/source/js/html5.js","hash":"4fefd28dcad6c973c44719ce8b3a8b82fe670a59","modified":1552364568546},{"_id":"themes/xups/source/js/main.js","hash":"f60885888cecec2094c14332e0a009a707fe3779","modified":1552364568558},{"_id":"themes/xups/source/js/search.js","hash":"3b51e1a09c0fe967dc21899cc6d7570efe419118","modified":1552364568558},{"_id":"source/_posts/02hexo/10.jpg","hash":"4153afbb76d1d1244a0e6b7aff5be4cf8f4f0b11","modified":1552364568418},{"_id":"source/_posts/02hexo/11.jpg","hash":"24506fc0c9b8450b3ee20f7e22634a8549565a29","modified":1552364568420},{"_id":"source/_posts/02hexo/9.jpg","hash":"76b8925a6c79b5cb602552de81f78cd18f31f721","modified":1552364568422},{"_id":"source/_posts/02hexo/addkey.jpg","hash":"a9745b4ba3451740b1bce4c7012615397da85364","modified":1552364568423},{"_id":"source/_posts/02hexo/dkeys.jpg","hash":"3703ec04c77444a63fb0f445c8438069f0eb8ed0","modified":1552364568425},{"_id":"source/_posts/02hexo/github.jpg","hash":"73df49461e61ad04910a56ff87c70ce3f4904ae4","modified":1552364568429},{"_id":"source/_posts/使用less定制bootstrap的过程/3.jpg","hash":"944d438920cf638f3a46a0368b12e2738ab78567","modified":1552364568457},{"_id":"source/_posts/微信小程序登录及注册/微信小程序登录.png","hash":"a3879c4e3c917a1b36d08aeb88e3754c5fe68407","modified":1552364568462},{"_id":"themes/xups/source/img/no_found.png","hash":"aa383a9a73b3468b6a77ea3e3676b3f9d6e6ef0d","modified":1552364568533},{"_id":"themes/xups/source/img/unsigned_avatar.jpg","hash":"8343a845110fca8317440fcf61aae209eec57edf","modified":1552364568542},{"_id":"themes/xups/source/js/jquery.js","hash":"fb5edd7a663dc8dda7ec10815a7cd82a30fc98a7","modified":1552364568557},{"_id":"source/_posts/02hexo/error.jpg","hash":"5c00af5b75a910ca389eddf935fcfb6cfac3780b","modified":1552364568427},{"_id":"source/_posts/02hexo/hexos.jpg","hash":"64ecdccd1d811b968aa1629bbd29e8480fe44851","modified":1552364568430},{"_id":"source/_posts/微信网页版图片上传预览的书写步骤/微信图片_20180905190333.png","hash":"5310715c35e8efb65254e2124b3d5e02184cac91","modified":1552364568464},{"_id":"themes/xups/layout/_partial/post/category.ejs","hash":"2908913f083b0d95a5cd09a7996cacfe722a3118","modified":1552364568508},{"_id":"themes/xups/layout/_partial/post/comment.ejs","hash":"d3f2eceb848e750c7a677319cd9ff4904ab61c45","modified":1552364568509},{"_id":"themes/xups/layout/_partial/post/date.ejs","hash":"848f362936b3f21e067e2a0783efbdbdab338985","modified":1552364568509},{"_id":"themes/xups/layout/_partial/post/gallery.ejs","hash":"ed531d1970eedabd2a454d51ac92fffcc0697bec","modified":1552364568509},{"_id":"themes/xups/layout/_partial/post/nav.ejs","hash":"fa8cb2d5c593fa402e19e1089007812219596481","modified":1552364568510},{"_id":"themes/xups/layout/_partial/post/post-item.ejs","hash":"b5abd1ca0ab9657a5faaaf336f580e7c5c658fd8","modified":1552364568510},{"_id":"themes/xups/layout/_partial/post/share.ejs","hash":"c0f861fb0bd74aced347e0bccee5fa7ff37fa7b4","modified":1552364568510},{"_id":"themes/xups/layout/_partial/post/tag.ejs","hash":"38a0810b82e69ddd105211e7ff4ee9f2fb832ce9","modified":1552364568511},{"_id":"themes/xups/layout/_partial/post/title.ejs","hash":"4819520155fc4e389b09c80310af5c61fcd57c03","modified":1552364568511},{"_id":"themes/xups/layout/_partial/widget/categorys.ejs","hash":"29687d96d26fb41f0e78ef8fecc3be6da3d0da29","modified":1552364568512},{"_id":"themes/xups/layout/_partial/widget/friend_links.ejs","hash":"4ff96fbfb9d70b4636108c5deaaf041c6681ceeb","modified":1552364568512},{"_id":"themes/xups/layout/_partial/widget/tags.ejs","hash":"bc7b5e50b19e5a7f0f5c81d653407b26d8881c25","modified":1552364568512},{"_id":"themes/xups/layout/_partial/widget/weibo.ejs","hash":"5803954fea40637eabfa96bfb6d38328d3c33005","modified":1552364568513},{"_id":"themes/xups/source/css/_base/font.styl","hash":"52895afc3fd1e250d3359d9250f9f6a33e0c797a","modified":1552364568516},{"_id":"themes/xups/source/css/_base/global.styl","hash":"5ba865047a3438ab6c2347e7403c67a9f2085619","modified":1552364568516},{"_id":"themes/xups/source/css/_base/normalize.styl","hash":"3f6122f583b1590d51fe8181ccd310786c04a4c2","modified":1552364568516},{"_id":"themes/xups/source/css/_base/reset.styl","hash":"ee2a445efc1fbfad1fcdf3cd141e81323171bd25","modified":1552364568517},{"_id":"themes/xups/source/css/_partial/.DS_Store","hash":"16121b987e7a7a6c89f78f512e6e63eea583e25a","modified":1545891313758},{"_id":"themes/xups/source/css/_partial/article.styl","hash":"127dd055a12c250b13add12cd0615b707fe21fab","modified":1552364568518},{"_id":"themes/xups/source/css/_partial/comment.styl","hash":"999c90acf74f94cb930362e0cc869bbd45f8a005","modified":1552364568518},{"_id":"themes/xups/source/css/_partial/footer.styl","hash":"e4891d0642ab0816f29b8d42e014b9818def2a62","modified":1552364568519},{"_id":"themes/xups/source/css/_partial/header.styl","hash":"796da02640d3501e269a828e634dcbc89ef41a11","modified":1552364568519},{"_id":"themes/xups/source/css/_partial/highlight.styl","hash":"c1c9655afa9739a4987dc196fff5af50688ea445","modified":1552364568520},{"_id":"themes/xups/source/css/_partial/post.styl","hash":"163988e3cb92deab32674175cb25048ca2f96ae6","modified":1552364568520},{"_id":"themes/xups/source/css/_partial/responsive.styl","hash":"5f262fc7f37cab2c1a8868ef10ab652b6ddd0d5c","modified":1552364568520},{"_id":"themes/xups/source/css/_partial/searchform.styl","hash":"a5738fc78e5af2a3f44eec6deecc4de3fd179aed","modified":1552364568521},{"_id":"themes/xups/source/css/_partial/sidebar.styl","hash":"0e64e0a73a6befe0be43a9cb9458e7c690fe4883","modified":1552364568521},{"_id":"themes/xups/source/css/_partial/theme.styl","hash":"e1eb40c93a39f2212b042fcb4481be2e901240af","modified":1552364568521},{"_id":"themes/xups/source/css/fonts/.DS_Store","hash":"db2379b0a524b084530079a6a32ba976f2892009","modified":1545891313762},{"_id":"themes/xups/source/img/lab/banner.jpg","hash":"daa0b3c13831b17182c3d587920f035c80816ae3","modified":1552364568532},{"_id":"themes/xups/source/img/thumbnail/0.jpg","hash":"7285bbd93d25a0810df38b499fa2b9c201dd88f2","modified":1552364568535},{"_id":"themes/xups/source/img/thumbnail/1.jpg","hash":"d56409526e114f07de70b9f6be036ee8939626bb","modified":1552364568535},{"_id":"themes/xups/source/img/thumbnail/4.jpg","hash":"4ba83c3c4937b8068bcb9ed7002c186053482b86","modified":1552364568538},{"_id":"themes/xups/source/img/thumbnail/5.jpg","hash":"b30fe3c75c445789d83b3d0f2f7b8d456802d306","modified":1552364568539},{"_id":"themes/xups/source/img/thumbnail/6.jpg","hash":"767c9f7b42b7faf9966fcf87afc732045bf87167","modified":1552364568539},{"_id":"themes/xups/source/img/thumbnail/7.jpg","hash":"74a4ed49b8823f7e93cad8dc53ed2bcc07f33254","modified":1552364568540},{"_id":"themes/xups/source/img/thumbnail/8.jpg","hash":"ed356882b0a3015e7aec619bf22dd98e76a2dac8","modified":1552364568540},{"_id":"themes/xups/source/img/thumbnail/9.jpg","hash":"64aa3752db2dd53e3dbbc7a84967afd2cdedd43e","modified":1552364568541},{"_id":"themes/xups/source/css/fonts/icomoon/icomoon.ttf","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552364568529},{"_id":"themes/xups/source/img/thumbnail/2.jpg","hash":"edbd90ed95301d390a8aa8243cd4c08a4d862402","modified":1552364568536},{"_id":"themes/xups/source/img/thumbnail/3.jpg","hash":"7870fb47e46f645332174f356148bbc8163dfe13","modified":1552364568537},{"_id":"themes/xups/source/css/fonts/homizio-nova/.DS_Store","hash":"94c491df2256ef547252eed029a8bfb2961da5fe","modified":1545891313763},{"_id":"themes/xups/source/css/fonts/homizio-nova/italic.otf","hash":"5b50719da49c1ac26793384b1b68055f01dd4e85","modified":1552364568522},{"_id":"themes/xups/source/css/fonts/homizio-nova/italic.ttf","hash":"c62e2ba058f3dc49125dc514bcedde065ce64c5f","modified":1552364568523},{"_id":"themes/xups/source/css/fonts/homizio-nova/light.otf","hash":"4afcc511fe6937b8e8d79e649d70dfb4fff6b406","modified":1552364568524},{"_id":"themes/xups/source/css/fonts/homizio-nova/light_italic.otf","hash":"29c648cf7caa087f36b1e1e1c479eb63da35af73","modified":1552364568525},{"_id":"themes/xups/source/css/fonts/homizio-nova/light_italic.ttf","hash":"de9be5ed440fc380f2cbaa1683e94518d3d44e02","modified":1552364568526},{"_id":"themes/xups/source/css/fonts/homizio-nova/regular.otf","hash":"c6e47b88647ac2b729c05d220cc5be19787b7835","modified":1552364568527},{"_id":"themes/xups/source/css/fonts/icomoon/icomoon.eot","hash":"26de148529b318cb8159c70ef5adbe3667fb3e6d","modified":1552364568528},{"_id":"themes/xups/source/css/fonts/icomoon/icomoon.svg","hash":"2e3227e11e13917eecb676062ee953b37ea957c0","modified":1552364568529},{"_id":"themes/xups/source/css/fonts/icomoon/icomoon.woff","hash":"a5a4ffc5ecda60e59beac6b0f096b25b243a2acb","modified":1552364568530},{"_id":"themes/xups/source/css/fonts/homizio-nova/light.ttf","hash":"2ba5f36f461b540823978956af8c33b57b0b8ab1","modified":1552364568525},{"_id":"themes/xups/source/css/fonts/homizio-nova/regular.ttf","hash":"0ab6cf8e5883d5693ba56065e4973cd8b3e896bc","modified":1552364568528},{"_id":"themes/xups/xups.png","hash":"22f1fc32dea794370b4e791b885c2afb03c886c6","modified":1552364568567},{"_id":"public/content.json","hash":"602fe0a3459ef315059b87e4c121e3d5fb7fadf7","modified":1552368885338},{"_id":"public/search.xml","hash":"0dd6cc1f0fae4439fe1721af75cd9f3695d8cdb8","modified":1552368885338},{"_id":"public/about/index.html","hash":"b4e4226fe74c659b029c17ff7a9f7deff5fa4fff","modified":1552368886534},{"_id":"public/comment/index.html","hash":"9a183b521ff9b53fafb6d8ede651c15d587d86f6","modified":1552368886534},{"_id":"public/categories/index.html","hash":"f7b15a5c7c96df16188b20d40bd278e0e0cecb37","modified":1552368886605},{"_id":"public/lab/index.html","hash":"7c40df2d508aa6d0db82c9e9990d8b918c2773f7","modified":1552368886605},{"_id":"public/tags/index.html","hash":"bb7c2424ef937b725cae21bf71422a55ece875be","modified":1552368886606},{"_id":"public/2018/09/06/关于es6/index.html","hash":"e96554100628b1eb156b84b2dba30ff87f787451","modified":1552368886606},{"_id":"public/2018/03/04/使用less定制bootstrap的过程/index.html","hash":"d69377f9bd2a3b12d6dc5364163188e0f53eb32d","modified":1552368886606},{"_id":"public/archives/2017/index.html","hash":"57c099db1a582b0682ef4e53648d6ecc36921a86","modified":1552368886607},{"_id":"public/archives/2017/12/index.html","hash":"5d8a6d11bc9ba2105e075365b1be257004d6c3b1","modified":1552368886607},{"_id":"public/archives/2018/page/3/index.html","hash":"26f4db4ba7253188d622f17910f1167eaf8bfe70","modified":1552368886607},{"_id":"public/archives/2018/08/index.html","hash":"8e576b9a9476fceeefa31ad1b2ff3b12273def91","modified":1552368886607},{"_id":"public/archives/2018/12/index.html","hash":"b8d555c7b018a44e66f494903df5f7415c8f0971","modified":1552368886607},{"_id":"public/archives/2019/index.html","hash":"7cd6cdec9994b7993772660d6ac871048beff1b0","modified":1552368886607},{"_id":"public/archives/2019/01/index.html","hash":"ff94e9d4eee10215386d7c869d120914b2667074","modified":1552368886607},{"_id":"public/archives/2019/02/index.html","hash":"b77000d3d26e014e0c92a4647314ac8305bbfa89","modified":1552368886607},{"_id":"public/categories/后端/index.html","hash":"e946b4d0d9789f63ff828b1cb0131e0d2a6ece9d","modified":1552368886607},{"_id":"public/categories/前端框架/index.html","hash":"c71f0023ad969c5061790108ac2c5d7c9a893648","modified":1552368886607},{"_id":"public/categories/工具/index.html","hash":"eae9d1d98ffc5114489bb174911b9d8f0e4c451b","modified":1552368886607},{"_id":"public/categories/react/index.html","hash":"e0d2bb0a1cfeea920ac6b0286dbf581592a4ebda","modified":1552368886607},{"_id":"public/categories/打包工具/index.html","hash":"dfe708fdb0a01302c53a2ff54cd7aebd62699888","modified":1552368886607},{"_id":"public/categories/前端编译器/index.html","hash":"7dd95cc8385416ca4d451d731dd5ea5dc55be7f0","modified":1552368886607},{"_id":"public/categories/es6/index.html","hash":"0bf0448f233a634bc696cd6ddbaf8709987c2b5e","modified":1552368886607},{"_id":"public/categories/ui框架/index.html","hash":"bc1c7f44cddd83129a16768bfb66187638cb6604","modified":1552368886607},{"_id":"public/categories/微信网页版/index.html","hash":"97d53e2aaf3731f2a5fcdd80aac2da82711a932f","modified":1552368886607},{"_id":"public/categories/微信小程序/index.html","hash":"874525e69f82a3fba92c0d6549a12911a4674314","modified":1552368886608},{"_id":"public/tags/php/index.html","hash":"e712e39744ac32a9bc641317d46f9b37a61c5c31","modified":1552368886608},{"_id":"public/tags/javascipt/index.html","hash":"bff94a8304d6f2d1811045b826a3095732cf9a16","modified":1552368886608},{"_id":"public/tags/jquery/index.html","hash":"4cad6e5e12da0c069188c937f258410b369c083a","modified":1552368886608},{"_id":"public/tags/vue/index.html","hash":"dc578c04d43172730ffb82d7d474cb5ac4bf73f3","modified":1552368886608},{"_id":"public/tags/git/index.html","hash":"e8b7a67bef7137e51df2cdbec92499d8e04b7aa7","modified":1552368886608},{"_id":"public/tags/vscode/index.html","hash":"0c4efe0fe0f6d693b46de2cf718c74d0ac89e3dd","modified":1552368886608},{"_id":"public/tags/node/index.html","hash":"44fb3dcf98dea90264aba162b4e5022735449dcb","modified":1552368886608},{"_id":"public/tags/高阶组件HOC/index.html","hash":"58946ad10618111fe0757fe8705cb752333c1556","modified":1552368886608},{"_id":"public/tags/webpack/index.html","hash":"f1e3ebf3092ae3b30b344ee3898bb3052a20c3ad","modified":1552368886608},{"_id":"public/tags/fetch/index.html","hash":"e7d6946e73930f2ac0a5f568dbed9366f8b985b0","modified":1552368886608},{"_id":"public/tags/下载/index.html","hash":"693bbb208d3e6cb5e3f9db2aa90189937ff07565","modified":1552368886608},{"_id":"public/tags/css/index.html","hash":"714fe359141d0f555bd117ab0de45b566ebc4072","modified":1552368886608},{"_id":"public/tags/less/index.html","hash":"6776bc70ceb3e08b6accc8c902288e78f10cb94d","modified":1552368886608},{"_id":"public/tags/bootstrap/index.html","hash":"1cd453d57ade98212f0d72b4c1086f9f7fa909f8","modified":1552368886608},{"_id":"public/tags/redux/index.html","hash":"e38b456b93f96381b135081c5135bd28e59f1c38","modified":1552368886608},{"_id":"public/tags/redux-thunk/index.html","hash":"68665342823903e5b1e4604cd694780e9e1f764a","modified":1552368886609},{"_id":"public/archives/index.html","hash":"49b8a3c69d58e3556ec93fd475e1d7c0e7727b29","modified":1552368886609},{"_id":"public/2019/01/23/使用fetch实现文件下载/index.html","hash":"1b1376263c97fb5f9c32d2e0eec76e116fb5ad74","modified":1552368886609},{"_id":"public/2019/02/26/antd-design-pro中使用typescript/index.html","hash":"280766d4ed17e8d88a616bfeaa6b36691648c03d","modified":1552368886609},{"_id":"public/2019/01/21/微信小程序登录及注册/index.html","hash":"3fe3cd792d43f87dd78573869fcd651de5b6ec3b","modified":1552368886609},{"_id":"public/2018/12/27/react高阶函数———一个页面中弹出框的打开和关闭/index.html","hash":"bb340d1274b74c2fbe0f7e154e52e00a94d0e9e5","modified":1552368886609},{"_id":"public/2018/09/11/antd-design-pro的用法/index.html","hash":"fbfa7f8d09c20c17308d9caf39e3b8d132800be1","modified":1552368886609},{"_id":"public/2018/09/06/关于redux/index.html","hash":"4a49d18061c5a5c38ecf5a9b18411c22f982bf98","modified":1552368886609},{"_id":"public/2018/09/05/微信网页版图片上传预览的书写步骤/index.html","hash":"728bfddd60959a1c35b3635770867607a4663023","modified":1552368886609},{"_id":"public/2018/09/04/基于mpvue-weui的小程序/index.html","hash":"7dcc25ef569fe0aea8f5625965a313714cf826bd","modified":1552368886609},{"_id":"public/2018/09/03/hexo博客同时部署到github和Coding/index.html","hash":"1c89bc2ac312e120f8bbcd1513a1a9533ffd7756","modified":1552368886609},{"_id":"public/2018/09/03/前端学习及工具网址/index.html","hash":"c421e73ace1036e386a1a222639acb0e171a3777","modified":1552368886609},{"_id":"public/2018/09/03/webpack/index.html","hash":"37e1f3bb5cef3a6fb24305feec85002bdf7ed8fb","modified":1552368886610},{"_id":"public/2018/08/29/hexo博客保存源代码/index.html","hash":"73fc59a78360dee13c2ac8c2d1e5cf40cb28635e","modified":1552368886610},{"_id":"public/2018/03/22/node搭建服务器/index.html","hash":"4515352ff480a482c4bde1659fcc4c0926ddeca0","modified":1552368886610},{"_id":"public/2018/03/08/面试题汇总/index.html","hash":"5dadd3e723a2a893375cd535f269cdcb2de3261a","modified":1552368886610},{"_id":"public/2018/03/08/如何存储对象/index.html","hash":"d77d56127f83fd526dfd269e78e57c637a26b50b","modified":1552368886610},{"_id":"public/2018/03/04/08vue/index.html","hash":"70d68fb3f3b7bb4b4c2eaa87800b6c281493027f","modified":1552368886610},{"_id":"public/2018/03/01/07lazyload/index.html","hash":"eb70ca0bcba01aa62ad7c0c9ac4dbacd4760d0c0","modified":1552368886610},{"_id":"public/2018/02/27/06php/index.html","hash":"7e7a1498e7ce5c5d8bc4d1d4b1d4dd04949aae7b","modified":1552368886610},{"_id":"public/2018/02/23/05主题内容的配置/index.html","hash":"d3b51eaf5b2f80da47bafa1165e37c8437309a0f","modified":1552368886610},{"_id":"public/2018/02/23/04内容编写和图片引用/index.html","hash":"676e5267a0175422eda1980a1df57068b4105423","modified":1552368886610},{"_id":"public/2018/02/23/03介绍主题的修改/index.html","hash":"0c0a2f5b4086e54bf45a62ad839b876a579c6372","modified":1552368886610},{"_id":"public/2018/02/22/02hexo/index.html","hash":"2a9118a60f2863134f78c699bb2fee1f0fa69f81","modified":1552368886610},{"_id":"public/2018/02/11/git和vscode安装文档/index.html","hash":"96404e775b0c7b2f975abf63467f5665cc1c442c","modified":1552368886610},{"_id":"public/2017/12/22/01hello-world/index.html","hash":"0f1e3e63a71ed4764e1e2950d7eb1a6aeae3dba2","modified":1552368886610},{"_id":"public/archives/page/2/index.html","hash":"1d2cdda99fa75f61bd964dcc0f107041629dc06d","modified":1552368886611},{"_id":"public/archives/page/3/index.html","hash":"3f3a807649e1122fcac6e6709dc6e380bd66af63","modified":1552368886611},{"_id":"public/archives/2018/index.html","hash":"ad1e1d8127d77424391a4cad27b52816e81fd977","modified":1552368886611},{"_id":"public/archives/2018/page/2/index.html","hash":"0fdd59842aa7e55805f8023b2f321fbe5d16070c","modified":1552368886611},{"_id":"public/archives/2018/02/index.html","hash":"908e3b9662084d186a8d25e6ec6ee4844b31d079","modified":1552368886611},{"_id":"public/archives/2018/03/index.html","hash":"5903858751debb9234649d7ba5bd7ee185903643","modified":1552368886611},{"_id":"public/archives/2018/09/index.html","hash":"c90ab2384234b530e3c7e70d3742edc8fdebd1bd","modified":1552368886611},{"_id":"public/categories/博客开发/index.html","hash":"892130f63237c4a4a8f93a84ad99b18f73f14c46","modified":1552368886611},{"_id":"public/categories/前端/index.html","hash":"b810475749de3d5d621f3926a9c2401b59030e00","modified":1552368886611},{"_id":"public/index.html","hash":"66865df0120461b9da96d19a0c49d5bf52a74c06","modified":1552368886611},{"_id":"public/page/2/index.html","hash":"f6e9b40306bd7531d395ca4c982fcd108c8f1200","modified":1552368886611},{"_id":"public/page/3/index.html","hash":"8e866c5b4228705bbc4fe15e210fa45156e7a147","modified":1552368886611},{"_id":"public/tags/hexo/index.html","hash":"14dd2e3797abed1e7b21aeef04e9cb040c4e3d37","modified":1552368886611},{"_id":"public/tags/javascript/index.html","hash":"47546ac9f6ae42ed27734254926bb35a788da10e","modified":1552368886611},{"_id":"public/tags/react/index.html","hash":"e191657c6a88616301f24211da9e7c3d433adcef","modified":1552368886611},{"_id":"public/tags/网址/index.html","hash":"7fd05920bb1d370547aa908780893b7bea16a2ed","modified":1552368886633},{"_id":"public/tags/mpvue/index.html","hash":"6a836f432ef28c0bbe721a0f5189755d1c0b64d1","modified":1552368886633},{"_id":"public/tags/weui/index.html","hash":"cf58948d55971d70b9108ae3dcde1c4218468a9a","modified":1552368886633},{"_id":"public/tags/js/index.html","hash":"538aa448e8ee2028d327b72c3dabe53b55c605a0","modified":1552368886633},{"_id":"public/tags/antd-mobile/index.html","hash":"2eff2afb0616a459b69da39ae9b87714c4008803","modified":1552368886633},{"_id":"public/tags/微信JS-SDK/index.html","hash":"18d08ecf06e8f6a0285720ff0a1c5e5c094971c4","modified":1552368886633},{"_id":"public/tags/html/index.html","hash":"0b46c314b0a832550bf66c0047bf82cf34142022","modified":1552368886633},{"_id":"public/css/fonts/icomoon/icomoon.ttf","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552368886633},{"_id":"public/img/default.png","hash":"a0e8360a185c7516bc2dddb25241daee67b42972","modified":1552368886678},{"_id":"public/img/jelon.jpg","hash":"5a698f21552a8365ef44f7113665bff8121635cb","modified":1552368886678},{"_id":"public/img/loading.gif","hash":"92dcf9179379355f05cf2d1c8cceba930a2a674f","modified":1552368886678},{"_id":"public/img/scrolltoparrow.png","hash":"53bd140adb85b23d535d1e488550eda4624a58bd","modified":1552368886678},{"_id":"public/img/share.png","hash":"20a860aeb842a556d067deabb99f6bfc024c97d0","modified":1552368886679},{"_id":"public/img/url.png","hash":"be1f35666ed5bf03aa3f6db121bd03c407b158a7","modified":1552368886679},{"_id":"public/img/wechat_jelon.png","hash":"f1e1cab54bfb69e7816b1d5f355100ea8b272ce4","modified":1552368886679},{"_id":"public/img/wechat_mp.jpg","hash":"d58b7796093ca8cdd4034b2dd28021c147199099","modified":1552368886679},{"_id":"public/img/wechat_pay.png","hash":"3fb3bbd4b1fae4259578dce0ca838e0696283041","modified":1552368886679},{"_id":"public/img/lab/banner.jpg","hash":"daa0b3c13831b17182c3d587920f035c80816ae3","modified":1552368886679},{"_id":"public/img/thumbnail/0.jpg","hash":"7285bbd93d25a0810df38b499fa2b9c201dd88f2","modified":1552368886679},{"_id":"public/img/thumbnail/1.jpg","hash":"d56409526e114f07de70b9f6be036ee8939626bb","modified":1552368886679},{"_id":"public/img/thumbnail/4.jpg","hash":"4ba83c3c4937b8068bcb9ed7002c186053482b86","modified":1552368886679},{"_id":"public/img/thumbnail/5.jpg","hash":"b30fe3c75c445789d83b3d0f2f7b8d456802d306","modified":1552368886679},{"_id":"public/img/thumbnail/6.jpg","hash":"767c9f7b42b7faf9966fcf87afc732045bf87167","modified":1552368886679},{"_id":"public/img/thumbnail/7.jpg","hash":"74a4ed49b8823f7e93cad8dc53ed2bcc07f33254","modified":1552368886680},{"_id":"public/img/thumbnail/8.jpg","hash":"ed356882b0a3015e7aec619bf22dd98e76a2dac8","modified":1552368886680},{"_id":"public/img/thumbnail/9.jpg","hash":"64aa3752db2dd53e3dbbc7a84967afd2cdedd43e","modified":1552368886680},{"_id":"public/css/fonts/homizio-nova/italic.otf","hash":"5b50719da49c1ac26793384b1b68055f01dd4e85","modified":1552368886680},{"_id":"public/css/fonts/homizio-nova/italic.ttf","hash":"c62e2ba058f3dc49125dc514bcedde065ce64c5f","modified":1552368886680},{"_id":"public/css/fonts/homizio-nova/light.otf","hash":"4afcc511fe6937b8e8d79e649d70dfb4fff6b406","modified":1552368886680},{"_id":"public/css/fonts/homizio-nova/light_italic.otf","hash":"29c648cf7caa087f36b1e1e1c479eb63da35af73","modified":1552368886680},{"_id":"public/css/fonts/homizio-nova/light_italic.ttf","hash":"de9be5ed440fc380f2cbaa1683e94518d3d44e02","modified":1552368886680},{"_id":"public/css/fonts/homizio-nova/regular.otf","hash":"c6e47b88647ac2b729c05d220cc5be19787b7835","modified":1552368886680},{"_id":"public/css/fonts/icomoon/icomoon.eot","hash":"26de148529b318cb8159c70ef5adbe3667fb3e6d","modified":1552368886680},{"_id":"public/css/fonts/icomoon/icomoon.svg","hash":"2e3227e11e13917eecb676062ee953b37ea957c0","modified":1552368886680},{"_id":"public/css/fonts/icomoon/icomoon.woff","hash":"a5a4ffc5ecda60e59beac6b0f096b25b243a2acb","modified":1552368886680},{"_id":"public/2018/02/23/03介绍主题的修改/theme.jpg","hash":"16b2402a7c21b162ab84911ff0720ec19486108a","modified":1552368886680},{"_id":"public/2018/02/23/05主题内容的配置/themedes.jpg","hash":"e21b1d6fb65e5b07f462021b31853de024d26fe2","modified":1552368886680},{"_id":"public/2018/03/01/07lazyload/src.jpg","hash":"33b16749f2e8dccf4764d15c05966e527898c5be","modified":1552368886681},{"_id":"public/2018/08/29/hexo博客保存源代码/branch.png","hash":"2e57b75723d2eb1754d5a9844b6b453cfc036757","modified":1552368886681},{"_id":"public/2018/08/29/hexo博客保存源代码/git.png","hash":"2502b26ff21a2d506b85a21316e2d6ea3207c4a3","modified":1552368886681},{"_id":"public/2018/09/05/微信网页版图片上传预览的书写步骤/微信图片_20180905190554.png","hash":"c7ff3885c26170c7166769171b171f3a4dd90627","modified":1552368886681},{"_id":"public/2018/02/27/06php/1.jpg","hash":"927e65d4aee3c10abb7a1a89bcd6e5dc23e6528d","modified":1552368886681},{"_id":"public/2018/02/27/06php/define.jpg","hash":"ed6e890362319cbf3738728d1bf5cd9acbcb8ab3","modified":1552368886681},{"_id":"public/2018/02/27/06php/host.jpg","hash":"9581faae820921b8737ae0063dd24b2fe8a78645","modified":1552368886681},{"_id":"public/2018/03/04/使用less定制bootstrap的过程/1.jpg","hash":"4ea8d5a740a1f736e2d5901b6cbc88f05ffbe92f","modified":1552368886681},{"_id":"public/2018/03/04/使用less定制bootstrap的过程/2.jpg","hash":"22c1f2f97d4f70743c0746fd7113c282d1e5909c","modified":1552368886681},{"_id":"public/2018/03/04/使用less定制bootstrap的过程/4.jpg","hash":"610155bfeeb9e7ecc4e03583481059295b107676","modified":1552368886681},{"_id":"public/2018/03/04/使用less定制bootstrap的过程/5.jpg","hash":"7ea6684b3216aa4b2ff849996cf6c9939e949abf","modified":1552368886681},{"_id":"public/2018/03/04/使用less定制bootstrap的过程/6.jpg","hash":"9d3aff437ed613f2ade26bc5071e1bce0b3d84c1","modified":1552368886681},{"_id":"public/2018/03/04/08vue/index.jpg","hash":"006adc78cafcdb05107f4efbf77d01e14e53a2f3","modified":1552368886681},{"_id":"public/2018/03/04/08vue/util.jpg","hash":"a4a133583e1090ea51ab15320c86157e74a9f7d0","modified":1552368886681},{"_id":"public/2018/03/04/08vue/vue-router-nav.jpg","hash":"f1076c3fc3c77be860cc4e5c19bfce6d9aae5602","modified":1552368886681},{"_id":"public/2018/03/04/08vue/子与子子1.jpg","hash":"57ae8c4fa9d22f5b6b103a0a9813b12cfe5f514e","modified":1552368886681},{"_id":"public/2018/03/04/08vue/子与子子2.jpg","hash":"b4a7a7175c996b465d621315973524b42bc1a057","modified":1552368886682},{"_id":"public/2018/03/04/08vue/子与父子.jpg","hash":"a17b966daac60ed01dca34f653a2ca53ba31be49","modified":1552368886682},{"_id":"public/2018/03/04/08vue/子与父父.jpg","hash":"bbb0ff258d7f7ae25c12a3f9badb99ee8991e532","modified":1552368886682},{"_id":"public/2018/03/04/08vue/搭建.jpg","hash":"21135e83c2995fecf4f6984bb5135de2fcae1131","modified":1552368886682},{"_id":"public/2018/03/04/08vue/父与子$parent.jpg","hash":"ae28ba574ed608cbef19c55596c617e4a47a6bc1","modified":1552368886682},{"_id":"public/2018/03/04/08vue/父与子.jpg","hash":"1d1eb9816f180f827b89ba8f7c057ddd5cb73759","modified":1552368886682},{"_id":"public/2018/03/04/08vue/父与子ref.jpg","hash":"d48609166393cbd1e1a964a94d94f3ca54919a84","modified":1552368886682},{"_id":"public/2018/02/22/02hexo/1..jpg","hash":"002f096646a4b5c58163c865bda732aedbcef031","modified":1552368886682},{"_id":"public/2018/02/22/02hexo/12.jpg","hash":"d95f7ed4cf17472d7ad3e51ae2ac772346745b59","modified":1552368886682},{"_id":"public/2018/02/22/02hexo/6.jpg","hash":"144d4b8f06937c3fc174c2f61d53a02e57891d6a","modified":1552368886682},{"_id":"public/2018/02/22/02hexo/5.jpg","hash":"99d8a6bb2d77c1183f1e24f72a786626fab45f1f","modified":1552368886682},{"_id":"public/2018/02/22/02hexo/add.jpg","hash":"9ff05414c1ef5be1bf54cb3a3d6f74810eafd676","modified":1552368886682},{"_id":"public/2018/02/22/02hexo/blank.jpg","hash":"a1c92d0a24d2ed09d58e262810d729ce64a373af","modified":1552368886682},{"_id":"public/2018/02/22/02hexo/createg.jpg","hash":"71cf6f29f6723bd641752af0a49845add8ece987","modified":1552368886682},{"_id":"public/2018/02/22/02hexo/deployment.jpg","hash":"bdbe2d255659055622fb9987264a7930c0c601f3","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/eval.jpg","hash":"be01483a5ae87d6521803a24097d5860029139e7","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/git.jpg","hash":"01ce334a1b5891377d26ea34f3c6349ce6ccac5d","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/hexo.jpg","hash":"211f5d5ff60764a95e7f0255e6fdd66c8a1ce9aa","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/hg.jpg","hash":"692ace8b88ebd271da52777f28b89ad35ab4f53b","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/hs.jpg","hash":"dab2b281c64e87882a8102052ddda6b702890992","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/in.jpg","hash":"050c45e586c6d5137e1a8e81c276ab68278ce477","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/key.jpg","hash":"11b77fc535556dc975ac02836688f8041a3d4165","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/login.jpg","hash":"95505fb9bcdca1720ddcccd7a2d0a64a0380e4ee","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/ls.jpg","hash":"9cfa3993ed0737f655c89a5e0ee4a55826f7fe33","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/newgithub.jpg","hash":"05173f371630be52c834381cd6fc199725691b63","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/node.jpg","hash":"976f400d03871be1bfc57784f2cf87100ef553cb","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/none.jpg","hash":"206a36415d74be8cdc184e4da312dda79c919d22","modified":1552368886683},{"_id":"public/2018/02/22/02hexo/re.jpg","hash":"3fd279ccb06bf336052a750440845a645f9e5250","modified":1552368886684},{"_id":"public/2018/02/22/02hexo/resuccess.jpg","hash":"8f1c7e383d09400effe9ab45b7b38cfced76947d","modified":1552368886684},{"_id":"public/2018/02/22/02hexo/ssh.jpg","hash":"181fcbdf6e895d19786e4294423cddd2a27ea4bb","modified":1552368886684},{"_id":"public/2018/02/22/02hexo/success.jpg","hash":"c322e8b3d9b4795562692d839606655dcc0113c2","modified":1552368886684},{"_id":"public/2018/02/22/02hexo/theme.jpg","hash":"16b2402a7c21b162ab84911ff0720ec19486108a","modified":1552368886684},{"_id":"public/2018/02/22/02hexo/themedes.jpg","hash":"e21b1d6fb65e5b07f462021b31853de024d26fe2","modified":1552368886684},{"_id":"public/2018/02/22/02hexo/uname.jpg","hash":"b19d7ea25b3d5623576a4773ab47a3d75e7a60d2","modified":1552368886684},{"_id":"public/img/no_found.png","hash":"aa383a9a73b3468b6a77ea3e3676b3f9d6e6ef0d","modified":1552368887010},{"_id":"public/img/unsigned_avatar.jpg","hash":"8343a845110fca8317440fcf61aae209eec57edf","modified":1552368887012},{"_id":"public/img/thumbnail/2.jpg","hash":"edbd90ed95301d390a8aa8243cd4c08a4d862402","modified":1552368887012},{"_id":"public/img/thumbnail/3.jpg","hash":"7870fb47e46f645332174f356148bbc8163dfe13","modified":1552368887012},{"_id":"public/css/fonts/homizio-nova/light.ttf","hash":"2ba5f36f461b540823978956af8c33b57b0b8ab1","modified":1552368887012},{"_id":"public/css/fonts/homizio-nova/regular.ttf","hash":"0ab6cf8e5883d5693ba56065e4973cd8b3e896bc","modified":1552368887012},{"_id":"public/2019/01/21/微信小程序登录及注册/微信小程序登录.png","hash":"a3879c4e3c917a1b36d08aeb88e3754c5fe68407","modified":1552368887012},{"_id":"public/2018/03/04/使用less定制bootstrap的过程/3.jpg","hash":"944d438920cf638f3a46a0368b12e2738ab78567","modified":1552368887012},{"_id":"public/2018/02/22/02hexo/10.jpg","hash":"4153afbb76d1d1244a0e6b7aff5be4cf8f4f0b11","modified":1552368887012},{"_id":"public/2018/02/22/02hexo/11.jpg","hash":"24506fc0c9b8450b3ee20f7e22634a8549565a29","modified":1552368887013},{"_id":"public/2018/02/22/02hexo/9.jpg","hash":"76b8925a6c79b5cb602552de81f78cd18f31f721","modified":1552368887013},{"_id":"public/2018/02/22/02hexo/addkey.jpg","hash":"a9745b4ba3451740b1bce4c7012615397da85364","modified":1552368887013},{"_id":"public/2018/02/22/02hexo/dkeys.jpg","hash":"3703ec04c77444a63fb0f445c8438069f0eb8ed0","modified":1552368887013},{"_id":"public/2018/02/22/02hexo/github.jpg","hash":"73df49461e61ad04910a56ff87c70ce3f4904ae4","modified":1552368887013},{"_id":"public/js/html5.js","hash":"4fefd28dcad6c973c44719ce8b3a8b82fe670a59","modified":1552368887075},{"_id":"public/js/main.js","hash":"a7945c11b81be4f7a1bc832a6e06d0037c29ab62","modified":1552368887075},{"_id":"public/js/search.js","hash":"db9e152b9498759fb79854effea18504f73ab6db","modified":1552368887075},{"_id":"public/css/style.css","hash":"86f2133fd5a1a0e37a9ef62af959245018534b29","modified":1552368887075},{"_id":"public/js/comment.js","hash":"0725c48fa16717a2c00c9ef9c08c14d2dbcd0cd5","modified":1552368887075},{"_id":"public/js/jquery.js","hash":"05e1ad0cc600a057886deaf237ab6e3d4fcdb5ac","modified":1552368887075},{"_id":"public/2018/02/22/02hexo/error.jpg","hash":"5c00af5b75a910ca389eddf935fcfb6cfac3780b","modified":1552368887075},{"_id":"public/2018/02/22/02hexo/hexos.jpg","hash":"64ecdccd1d811b968aa1629bbd29e8480fe44851","modified":1552368887075},{"_id":"public/2018/09/05/微信网页版图片上传预览的书写步骤/微信图片_20180905190333.png","hash":"5310715c35e8efb65254e2124b3d5e02184cac91","modified":1552368887075}],"Category":[{"name":"博客开发","_id":"cjt5ccou90004g8rxdnrpl5a1"},{"name":"后端","_id":"cjt5ccovb000og8rxh2dg1eon"},{"name":"前端","_id":"cjt5ccove000vg8rxdqv3gcwl"},{"name":"前端框架","_id":"cjt5ccovk0017g8rx1lovzd49"},{"name":"工具","_id":"cjt5ccovr001kg8rxh21tw13p"},{"name":"react","_id":"cjt5ccovw001ug8rx3x7awa4s"},{"name":"打包工具","_id":"cjt5ccow00020g8rxogmhk1hv"},{"name":"前端编译器","_id":"cjt5ccow5002dg8rxtskyg4es"},{"name":"es6","_id":"cjt5ccow6002ig8rxfr2gipir"},{"name":"ui框架","_id":"cjt5ccow8002qg8rxwgf4dexj"},{"name":"微信小程序","_id":"cjt5ccow9002wg8rxbnn2uoje"},{"name":"微信网页版","_id":"cjt5ccowa0030g8rxie7q414j"}],"Data":[],"Page":[{"title":"关于我","date":"2018-08-29T07:44:35.000Z","layout":"about","_content":"\n我，今年23岁，一名在前端道路上不停前进的女孩子。大二出于兴趣自学前端，前端知识牢固，进阶框架深入了解，实际项目经验丰富。能做好常见的桌面和移动端应用，面向B端和C端都可。即使不会，也可以根据实际需要快速掌握新知识，现学现用。代码规范，期望能有更多的实践和挑战的机会。\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-08-29 15:44:35\nlayout: \"about\"\n---\n\n我，今年23岁，一名在前端道路上不停前进的女孩子。大二出于兴趣自学前端，前端知识牢固，进阶框架深入了解，实际项目经验丰富。能做好常见的桌面和移动端应用，面向B端和C端都可。即使不会，也可以根据实际需要快速掌握新知识，现学现用。代码规范，期望能有更多的实践和挑战的机会。\n\n","updated":"2019-03-12T05:33:50.800Z","path":"about/index.html","comments":1,"_id":"cjt5ccou00000g8rxlqnqm467","content":"<p>我，今年23岁，一名在前端道路上不停前进的女孩子。大二出于兴趣自学前端，前端知识牢固，进阶框架深入了解，实际项目经验丰富。能做好常见的桌面和移动端应用，面向B端和C端都可。即使不会，也可以根据实际需要快速掌握新知识，现学现用。代码规范，期望能有更多的实践和挑战的机会。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我，今年23岁，一名在前端道路上不停前进的女孩子。大二出于兴趣自学前端，前端知识牢固，进阶框架深入了解，实际项目经验丰富。能做好常见的桌面和移动端应用，面向B端和C端都可。即使不会，也可以根据实际需要快速掌握新知识，现学现用。代码规范，期望能有更多的实践和挑战的机会。</p>\n"},{"title":"archives","date":"2018-08-29T07:07:45.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2018-08-29 15:07:45\n---\n","updated":"2019-03-12T04:22:48.465Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cjt5ccou60002g8rx2k74q5br","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"留言","date":"2016-02-01T12:29:57.000Z","pageid":"comment","_content":"","source":"comment/index.md","raw":"---\ntitle: 留言\ndate: 2016-02-01 20:29:57\npageid: comment\n---\n","updated":"2019-03-12T04:22:48.466Z","path":"comment/index.html","comments":1,"layout":"page","_id":"cjt5ccowu003xg8rxo7vq49fm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","layout":"categories","date":"2018-08-29T07:08:12.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\nlayout: \"categories\"\ndate: 2018-08-29 15:08:12\n---\n","updated":"2019-03-12T04:22:48.466Z","path":"categories/index.html","comments":1,"_id":"cjt5ccoww003yg8rxba4kagbh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"实验室","date":"2016-02-01T12:29:57.000Z","pageid":"lab","projects":null,"_content":"","source":"lab/index.md","raw":"---\ntitle: 实验室\ndate: 2016-02-01 20:29:57\npageid: lab\n\nprojects:\n    # blog_demo:\n    #     title: Blog Demo\n    #     time: 2016-10-10\n    #     content: \n    #         1:\n    #             name: 基于 vue + vuex + bootstrap 的 blog demo\n    #             link: https://github.com/jangdelong/vue-blog-demo\n    # hexo_theme_xups:\n    #     title: hexo-theme-xups 博客主题\n    #     time: 2016-03-12\n    #     content:\n    #         1:\n    #             name: 基于 hexo 静态博客系统的 博客主题 xups\n    #             link: https://github.com/jangdelong/hexo-theme-xups\n    # typecho_theme_xups:\n    #     title: Typecho 博客主题\n    #     time: 2015-10-15\n    #     content: \n    #         1:        \n    #             name: 基于 php 博客系统 typecho 的主题 xups\n    #             link: https://github.com/jangdelong/typecho-theme-xups  \n---\n","updated":"2019-03-12T04:22:48.467Z","path":"lab/index.html","comments":1,"layout":"page","_id":"cjt5ccowx003zg8rx408idn2l","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-08-29T07:07:54.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-29 15:07:54\nlayout: \"tags\"\n---\n","updated":"2019-03-12T04:22:48.467Z","path":"tags/index.html","comments":1,"_id":"cjt5ccowz0040g8rx8twwnpy7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2017-12-22T05:32:49.000Z","_content":"<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). -->\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/01hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-12-22 13:32:49\ncategories:\n- 博客开发\ntags:\n- hexo\n---\n<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). -->\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"01hello-world","published":1,"updated":"2019-03-12T04:22:48.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccou20001g8rxect9yfip","content":"<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). -->\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). -->","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"基于hexo+github博客的搭建","date":"2018-02-22T05:32:49.000Z","_content":"介绍一下基于hexo+github博客的搭建（很基础）。\n\n<!-- more -->\n\n## 1.建立空文件夹\n任意地方建立空文件夹（自己找的到）来存放一些必要的子目录文件。\n比如（我自己的myblog）：\n{% asset_img blank.jpg %}\n\n## 2.安装node\n### 检测node是否已安装:\n打开myblog，按住shift+鼠标右键，输入以下命令\n```bash\n$ node -v\n```\n![](./node.jpg '安装node')\n若没有，请自行安装\n\n## 3.安装hexo\n### 安装hexo之前必须确保已安装node。之后执行以下代码\n①安装hexo\n```bash\n$ npm install -g hexo\n```\n正在安装中...\n![](./hexo.jpg '安装hexo')\n安装成功！！！\n![](./hexos.jpg '安装hexo成功')\n\n②初始化hexo，生成一些文件\n```bash\n$ hexo init\n```\n\n③安装所需要的组件\n```bash\n$ npm install\n```\n\n④生成静态页面，并部署到页面\n```bash\n$ hexo g\n$ hexo d\n```\n![](./hg.jpg '生成静态页面')\n\n⑤打开服务器\n```bash\n$ hexo s \n```\n![](./hs.jpg '打开服务器')\n\n⑥浏览器地址栏输入localhost:4000，可以看到本地博客。且在本地修改内容也可以。\n\n## 4.建立GitHub仓库\n首先申请GitHub账号，如何申请自己网上搜索。\n进入GitHub，\n![](./createg.jpg '建立')\n![](./newgithub.jpg '建立新仓库')\n\n## 5.将本地博客连入GitHub仓库\n①安装git\n在空白区域单击右键，若出现以下内容，说明电脑已安装git。\n若没有，请自己安装\n![](./git.jpg '安装git')\n\n②设置用户名和邮箱\n在myblog文件夹中点击右键，点击Git Base Here\n输入自己的用户名和邮箱\n```bash\n$ git config --global user.name \"xxx\" \n```\n```bash\n$ git config --global user.email \"xxxx@xx.com\" \n```\n```bash\n$ git init\n```\n![](./uname.jpg '设置用户名和邮箱')\n\n③检查是否有.ssh的文件夹\n```bash\n$ cd ~/.ssh \n```\n若以前没有.ssh文件夹，则显示：\n![](./none.jpg '没有.ssh')\n\n④生成密匙\n```bash\n$ ssh-keygen -t rsa -C \"xxxx@xx.com\"     \n```\n此处填写自己的邮箱\n连续三个回车\n可以看到创建了一个.ssh的文件夹（包含id_rsa和id_rsa.pub两个文件），并生成密匙。\n（两个文件存储路径默认在图中所示，不同电脑有所不同）\n![](./key.jpg '生成密匙')\n\n④再次检查.ssh文件夹\n```bash\n$ cd ~/.ssh \n```\n![](./ssh.jpg '进入.ssh')\n\n⑤进入ssh文件夹，输入ls，出现id_rsa id_rsa.pub，说明生成密匙成功。\n```bash\n$ ls \n```\n![](./ls.jpg '文件存在')\n\n⑥输入eval \"$(ssh-agent -s)\"，添加密钥到ssh-agent\n```bash\n$ eval \"$(ssh-agent -s)\" \n```\n![](./eval.jpg '添加密匙到ssh-agent')\n\n⑦再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent\n```bash\n$ ssh-add ~/.ssh/id_rsa \n```\n![](./add.jpg '添加生成的SSH key到ssh-agent')\n\n⑧登录GitHub，打开首页的右下角仓库。\n![](./in.jpg '登录')\n![](./addkey.jpg '添加密匙')\n![](./dkeys.jpg '设置密匙')\n\n⑨测试添加ssh是否成功。\n出现(yes/no)，输入yes。\n若看到 Hi 后面是你的用户名，说明成功了。\n```bash\n$ ssh -T git@github.com \n```\n![](./success.jpg '成功')\n\n\n\n## 6.配置Deployment，在myblog（最开始建立的文件夹）中，找到_config.yml文件，在末尾进行修改。\n![](./deployment.jpg '修改配置')\nrepo值是在仓库里的右下角\n![](./github.jpg '地址')\n\n## 7.安装扩展\n①打开myblog文件夹，单击右键+shift。点击“在此处执行命令窗口”\n\n②安装扩展（hexo部署）\n```bash\n$ npm install hexo-deployer-git --save \n```\n\n③生成静态页面，发布到GitHub\n```bash\n$ hexo g \n$ hexo d \n```\n④连接成功后会出现一个弹出框。\n输入自己的用户名/邮箱，密码即可\n![](./login.jpg '验证用户')\n成功了就访问地址 http://用户名.github.io，可以看见页面了\n\n若此处出错，则修改地址，运行以下代码：（在git bash中执行）\n![](./error.jpg '出错')\n```bash\n$ git remote add origin git@github.com:用户名/用户名.github.io.git \n```\n打开myblog下的_config.yml，修改repo\n![](./re.jpg '地址')\n\n```bash\n$ hexo g\n$ hexo d \n```\n![](./resuccess.jpg '修改地址后成功')\n访问地址 http://用户名.github.io\n","source":"_posts/02hexo.md","raw":"---\ntitle: 基于hexo+github博客的搭建\ndate: 2018-02-22 13:32:49\ncategories:\n- 博客开发\ntags:\n- hexo\n---\n介绍一下基于hexo+github博客的搭建（很基础）。\n\n<!-- more -->\n\n## 1.建立空文件夹\n任意地方建立空文件夹（自己找的到）来存放一些必要的子目录文件。\n比如（我自己的myblog）：\n{% asset_img blank.jpg %}\n\n## 2.安装node\n### 检测node是否已安装:\n打开myblog，按住shift+鼠标右键，输入以下命令\n```bash\n$ node -v\n```\n![](./node.jpg '安装node')\n若没有，请自行安装\n\n## 3.安装hexo\n### 安装hexo之前必须确保已安装node。之后执行以下代码\n①安装hexo\n```bash\n$ npm install -g hexo\n```\n正在安装中...\n![](./hexo.jpg '安装hexo')\n安装成功！！！\n![](./hexos.jpg '安装hexo成功')\n\n②初始化hexo，生成一些文件\n```bash\n$ hexo init\n```\n\n③安装所需要的组件\n```bash\n$ npm install\n```\n\n④生成静态页面，并部署到页面\n```bash\n$ hexo g\n$ hexo d\n```\n![](./hg.jpg '生成静态页面')\n\n⑤打开服务器\n```bash\n$ hexo s \n```\n![](./hs.jpg '打开服务器')\n\n⑥浏览器地址栏输入localhost:4000，可以看到本地博客。且在本地修改内容也可以。\n\n## 4.建立GitHub仓库\n首先申请GitHub账号，如何申请自己网上搜索。\n进入GitHub，\n![](./createg.jpg '建立')\n![](./newgithub.jpg '建立新仓库')\n\n## 5.将本地博客连入GitHub仓库\n①安装git\n在空白区域单击右键，若出现以下内容，说明电脑已安装git。\n若没有，请自己安装\n![](./git.jpg '安装git')\n\n②设置用户名和邮箱\n在myblog文件夹中点击右键，点击Git Base Here\n输入自己的用户名和邮箱\n```bash\n$ git config --global user.name \"xxx\" \n```\n```bash\n$ git config --global user.email \"xxxx@xx.com\" \n```\n```bash\n$ git init\n```\n![](./uname.jpg '设置用户名和邮箱')\n\n③检查是否有.ssh的文件夹\n```bash\n$ cd ~/.ssh \n```\n若以前没有.ssh文件夹，则显示：\n![](./none.jpg '没有.ssh')\n\n④生成密匙\n```bash\n$ ssh-keygen -t rsa -C \"xxxx@xx.com\"     \n```\n此处填写自己的邮箱\n连续三个回车\n可以看到创建了一个.ssh的文件夹（包含id_rsa和id_rsa.pub两个文件），并生成密匙。\n（两个文件存储路径默认在图中所示，不同电脑有所不同）\n![](./key.jpg '生成密匙')\n\n④再次检查.ssh文件夹\n```bash\n$ cd ~/.ssh \n```\n![](./ssh.jpg '进入.ssh')\n\n⑤进入ssh文件夹，输入ls，出现id_rsa id_rsa.pub，说明生成密匙成功。\n```bash\n$ ls \n```\n![](./ls.jpg '文件存在')\n\n⑥输入eval \"$(ssh-agent -s)\"，添加密钥到ssh-agent\n```bash\n$ eval \"$(ssh-agent -s)\" \n```\n![](./eval.jpg '添加密匙到ssh-agent')\n\n⑦再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent\n```bash\n$ ssh-add ~/.ssh/id_rsa \n```\n![](./add.jpg '添加生成的SSH key到ssh-agent')\n\n⑧登录GitHub，打开首页的右下角仓库。\n![](./in.jpg '登录')\n![](./addkey.jpg '添加密匙')\n![](./dkeys.jpg '设置密匙')\n\n⑨测试添加ssh是否成功。\n出现(yes/no)，输入yes。\n若看到 Hi 后面是你的用户名，说明成功了。\n```bash\n$ ssh -T git@github.com \n```\n![](./success.jpg '成功')\n\n\n\n## 6.配置Deployment，在myblog（最开始建立的文件夹）中，找到_config.yml文件，在末尾进行修改。\n![](./deployment.jpg '修改配置')\nrepo值是在仓库里的右下角\n![](./github.jpg '地址')\n\n## 7.安装扩展\n①打开myblog文件夹，单击右键+shift。点击“在此处执行命令窗口”\n\n②安装扩展（hexo部署）\n```bash\n$ npm install hexo-deployer-git --save \n```\n\n③生成静态页面，发布到GitHub\n```bash\n$ hexo g \n$ hexo d \n```\n④连接成功后会出现一个弹出框。\n输入自己的用户名/邮箱，密码即可\n![](./login.jpg '验证用户')\n成功了就访问地址 http://用户名.github.io，可以看见页面了\n\n若此处出错，则修改地址，运行以下代码：（在git bash中执行）\n![](./error.jpg '出错')\n```bash\n$ git remote add origin git@github.com:用户名/用户名.github.io.git \n```\n打开myblog下的_config.yml，修改repo\n![](./re.jpg '地址')\n\n```bash\n$ hexo g\n$ hexo d \n```\n![](./resuccess.jpg '修改地址后成功')\n访问地址 http://用户名.github.io\n","slug":"02hexo","published":1,"updated":"2019-03-12T04:22:48.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccou70003g8rxzwuixkuf","content":"<p>介绍一下基于hexo+github博客的搭建（很基础）。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-建立空文件夹\"><a href=\"#1-建立空文件夹\" class=\"headerlink\" title=\"1.建立空文件夹\"></a>1.建立空文件夹</h2><p>任意地方建立空文件夹（自己找的到）来存放一些必要的子目录文件。<br>比如（我自己的myblog）：<br><img src=\"/2018/02/22/02hexo/blank.jpg\"></p>\n<h2 id=\"2-安装node\"><a href=\"#2-安装node\" class=\"headerlink\" title=\"2.安装node\"></a>2.安装node</h2><h3 id=\"检测node是否已安装\"><a href=\"#检测node是否已安装\" class=\"headerlink\" title=\"检测node是否已安装:\"></a>检测node是否已安装:</h3><p>打开myblog，按住shift+鼠标右键，输入以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./node.jpg\" alt title=\"安装node\"><br>若没有，请自行安装</p>\n<h2 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h2><h3 id=\"安装hexo之前必须确保已安装node。之后执行以下代码\"><a href=\"#安装hexo之前必须确保已安装node。之后执行以下代码\" class=\"headerlink\" title=\"安装hexo之前必须确保已安装node。之后执行以下代码\"></a>安装hexo之前必须确保已安装node。之后执行以下代码</h3><p>①安装hexo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<p>正在安装中…<br><img src=\"./hexo.jpg\" alt title=\"安装hexo\"><br>安装成功！！！<br><img src=\"./hexos.jpg\" alt title=\"安装hexo成功\"></p>\n<p>②初始化hexo，生成一些文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure></p>\n<p>③安装所需要的组件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure></p>\n<p>④生成静态页面，并部署到页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./hg.jpg\" alt title=\"生成静态页面\"></p>\n<p>⑤打开服务器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./hs.jpg\" alt title=\"打开服务器\"></p>\n<p>⑥浏览器地址栏输入localhost:4000，可以看到本地博客。且在本地修改内容也可以。</p>\n<h2 id=\"4-建立GitHub仓库\"><a href=\"#4-建立GitHub仓库\" class=\"headerlink\" title=\"4.建立GitHub仓库\"></a>4.建立GitHub仓库</h2><p>首先申请GitHub账号，如何申请自己网上搜索。<br>进入GitHub，<br><img src=\"./createg.jpg\" alt title=\"建立\"><br><img src=\"./newgithub.jpg\" alt title=\"建立新仓库\"></p>\n<h2 id=\"5-将本地博客连入GitHub仓库\"><a href=\"#5-将本地博客连入GitHub仓库\" class=\"headerlink\" title=\"5.将本地博客连入GitHub仓库\"></a>5.将本地博客连入GitHub仓库</h2><p>①安装git<br>在空白区域单击右键，若出现以下内容，说明电脑已安装git。<br>若没有，请自己安装<br><img src=\"./git.jpg\" alt title=\"安装git\"></p>\n<p>②设置用户名和邮箱<br>在myblog文件夹中点击右键，点击Git Base Here<br>输入自己的用户名和邮箱<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"xxx\"</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.email <span class=\"string\">\"xxxx@xx.com\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n<p><img src=\"./uname.jpg\" alt title=\"设置用户名和邮箱\"></p>\n<p>③检查是否有.ssh的文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></p>\n<p>若以前没有.ssh文件夹，则显示：<br><img src=\"./none.jpg\" alt title=\"没有.ssh\"></p>\n<p>④生成密匙<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"xxxx@xx.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>此处填写自己的邮箱<br>连续三个回车<br>可以看到创建了一个.ssh的文件夹（包含id_rsa和id_rsa.pub两个文件），并生成密匙。<br>（两个文件存储路径默认在图中所示，不同电脑有所不同）<br><img src=\"./key.jpg\" alt title=\"生成密匙\"></p>\n<p>④再次检查.ssh文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./ssh.jpg\" alt title=\"进入.ssh\"></p>\n<p>⑤进入ssh文件夹，输入ls，出现id_rsa id_rsa.pub，说明生成密匙成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./ls.jpg\" alt title=\"文件存在\"></p>\n<p>⑥输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./eval.jpg\" alt title=\"添加密匙到ssh-agent\"></p>\n<p>⑦再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./add.jpg\" alt title=\"添加生成的SSH key到ssh-agent\"></p>\n<p>⑧登录GitHub，打开首页的右下角仓库。<br><img src=\"./in.jpg\" alt title=\"登录\"><br><img src=\"./addkey.jpg\" alt title=\"添加密匙\"><br><img src=\"./dkeys.jpg\" alt title=\"设置密匙\"></p>\n<p>⑨测试添加ssh是否成功。<br>出现(yes/no)，输入yes。<br>若看到 Hi 后面是你的用户名，说明成功了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./success.jpg\" alt title=\"成功\"></p>\n<h2 id=\"6-配置Deployment，在myblog（最开始建立的文件夹）中，找到-config-yml文件，在末尾进行修改。\"><a href=\"#6-配置Deployment，在myblog（最开始建立的文件夹）中，找到-config-yml文件，在末尾进行修改。\" class=\"headerlink\" title=\"6.配置Deployment，在myblog（最开始建立的文件夹）中，找到_config.yml文件，在末尾进行修改。\"></a>6.配置Deployment，在myblog（最开始建立的文件夹）中，找到_config.yml文件，在末尾进行修改。</h2><p><img src=\"./deployment.jpg\" alt title=\"修改配置\"><br>repo值是在仓库里的右下角<br><img src=\"./github.jpg\" alt title=\"地址\"></p>\n<h2 id=\"7-安装扩展\"><a href=\"#7-安装扩展\" class=\"headerlink\" title=\"7.安装扩展\"></a>7.安装扩展</h2><p>①打开myblog文件夹，单击右键+shift。点击“在此处执行命令窗口”</p>\n<p>②安装扩展（hexo部署）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>③生成静态页面，发布到GitHub<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g </span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>④连接成功后会出现一个弹出框。<br>输入自己的用户名/邮箱，密码即可<br><img src=\"./login.jpg\" alt title=\"验证用户\"><br>成功了就访问地址 http://用户名.github.io，可以看见页面了</p>\n<p>若此处出错，则修改地址，运行以下代码：（在git bash中执行）<br><img src=\"./error.jpg\" alt title=\"出错\"><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure></p>\n<p>打开myblog下的_config.yml，修改repo<br><img src=\"./re.jpg\" alt title=\"地址\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p><img src=\"./resuccess.jpg\" alt title=\"修改地址后成功\"><br>访问地址 http://用户名.github.io</p>\n","site":{"data":{}},"excerpt":"<p>介绍一下基于hexo+github博客的搭建（很基础）。</p>","more":"<h2 id=\"1-建立空文件夹\"><a href=\"#1-建立空文件夹\" class=\"headerlink\" title=\"1.建立空文件夹\"></a>1.建立空文件夹</h2><p>任意地方建立空文件夹（自己找的到）来存放一些必要的子目录文件。<br>比如（我自己的myblog）：<br><img src=\"/2018/02/22/02hexo/blank.jpg\"></p>\n<h2 id=\"2-安装node\"><a href=\"#2-安装node\" class=\"headerlink\" title=\"2.安装node\"></a>2.安装node</h2><h3 id=\"检测node是否已安装\"><a href=\"#检测node是否已安装\" class=\"headerlink\" title=\"检测node是否已安装:\"></a>检测node是否已安装:</h3><p>打开myblog，按住shift+鼠标右键，输入以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./node.jpg\" alt title=\"安装node\"><br>若没有，请自行安装</p>\n<h2 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h2><h3 id=\"安装hexo之前必须确保已安装node。之后执行以下代码\"><a href=\"#安装hexo之前必须确保已安装node。之后执行以下代码\" class=\"headerlink\" title=\"安装hexo之前必须确保已安装node。之后执行以下代码\"></a>安装hexo之前必须确保已安装node。之后执行以下代码</h3><p>①安装hexo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<p>正在安装中…<br><img src=\"./hexo.jpg\" alt title=\"安装hexo\"><br>安装成功！！！<br><img src=\"./hexos.jpg\" alt title=\"安装hexo成功\"></p>\n<p>②初始化hexo，生成一些文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure></p>\n<p>③安装所需要的组件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure></p>\n<p>④生成静态页面，并部署到页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./hg.jpg\" alt title=\"生成静态页面\"></p>\n<p>⑤打开服务器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./hs.jpg\" alt title=\"打开服务器\"></p>\n<p>⑥浏览器地址栏输入localhost:4000，可以看到本地博客。且在本地修改内容也可以。</p>\n<h2 id=\"4-建立GitHub仓库\"><a href=\"#4-建立GitHub仓库\" class=\"headerlink\" title=\"4.建立GitHub仓库\"></a>4.建立GitHub仓库</h2><p>首先申请GitHub账号，如何申请自己网上搜索。<br>进入GitHub，<br><img src=\"./createg.jpg\" alt title=\"建立\"><br><img src=\"./newgithub.jpg\" alt title=\"建立新仓库\"></p>\n<h2 id=\"5-将本地博客连入GitHub仓库\"><a href=\"#5-将本地博客连入GitHub仓库\" class=\"headerlink\" title=\"5.将本地博客连入GitHub仓库\"></a>5.将本地博客连入GitHub仓库</h2><p>①安装git<br>在空白区域单击右键，若出现以下内容，说明电脑已安装git。<br>若没有，请自己安装<br><img src=\"./git.jpg\" alt title=\"安装git\"></p>\n<p>②设置用户名和邮箱<br>在myblog文件夹中点击右键，点击Git Base Here<br>输入自己的用户名和邮箱<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"xxx\"</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.email <span class=\"string\">\"xxxx@xx.com\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n<p><img src=\"./uname.jpg\" alt title=\"设置用户名和邮箱\"></p>\n<p>③检查是否有.ssh的文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></p>\n<p>若以前没有.ssh文件夹，则显示：<br><img src=\"./none.jpg\" alt title=\"没有.ssh\"></p>\n<p>④生成密匙<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"xxxx@xx.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>此处填写自己的邮箱<br>连续三个回车<br>可以看到创建了一个.ssh的文件夹（包含id_rsa和id_rsa.pub两个文件），并生成密匙。<br>（两个文件存储路径默认在图中所示，不同电脑有所不同）<br><img src=\"./key.jpg\" alt title=\"生成密匙\"></p>\n<p>④再次检查.ssh文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./ssh.jpg\" alt title=\"进入.ssh\"></p>\n<p>⑤进入ssh文件夹，输入ls，出现id_rsa id_rsa.pub，说明生成密匙成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./ls.jpg\" alt title=\"文件存在\"></p>\n<p>⑥输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./eval.jpg\" alt title=\"添加密匙到ssh-agent\"></p>\n<p>⑦再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./add.jpg\" alt title=\"添加生成的SSH key到ssh-agent\"></p>\n<p>⑧登录GitHub，打开首页的右下角仓库。<br><img src=\"./in.jpg\" alt title=\"登录\"><br><img src=\"./addkey.jpg\" alt title=\"添加密匙\"><br><img src=\"./dkeys.jpg\" alt title=\"设置密匙\"></p>\n<p>⑨测试添加ssh是否成功。<br>出现(yes/no)，输入yes。<br>若看到 Hi 后面是你的用户名，说明成功了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./success.jpg\" alt title=\"成功\"></p>\n<h2 id=\"6-配置Deployment，在myblog（最开始建立的文件夹）中，找到-config-yml文件，在末尾进行修改。\"><a href=\"#6-配置Deployment，在myblog（最开始建立的文件夹）中，找到-config-yml文件，在末尾进行修改。\" class=\"headerlink\" title=\"6.配置Deployment，在myblog（最开始建立的文件夹）中，找到_config.yml文件，在末尾进行修改。\"></a>6.配置Deployment，在myblog（最开始建立的文件夹）中，找到_config.yml文件，在末尾进行修改。</h2><p><img src=\"./deployment.jpg\" alt title=\"修改配置\"><br>repo值是在仓库里的右下角<br><img src=\"./github.jpg\" alt title=\"地址\"></p>\n<h2 id=\"7-安装扩展\"><a href=\"#7-安装扩展\" class=\"headerlink\" title=\"7.安装扩展\"></a>7.安装扩展</h2><p>①打开myblog文件夹，单击右键+shift。点击“在此处执行命令窗口”</p>\n<p>②安装扩展（hexo部署）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>③生成静态页面，发布到GitHub<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g </span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>④连接成功后会出现一个弹出框。<br>输入自己的用户名/邮箱，密码即可<br><img src=\"./login.jpg\" alt title=\"验证用户\"><br>成功了就访问地址 http://用户名.github.io，可以看见页面了</p>\n<p>若此处出错，则修改地址，运行以下代码：（在git bash中执行）<br><img src=\"./error.jpg\" alt title=\"出错\"><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure></p>\n<p>打开myblog下的_config.yml，修改repo<br><img src=\"./re.jpg\" alt title=\"地址\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p><img src=\"./resuccess.jpg\" alt title=\"修改地址后成功\"><br>访问地址 http://用户名.github.io</p>"},{"title":"介绍主题的修改","date":"2018-02-23T02:12:03.000Z","_content":"介绍一下基于hexo+github博客主题的修改。\n\n<!-- more -->\n\n## 进入https://hexo.io/themes/\n找到自己喜欢的主题风格\n①点击图片，浏览效果\n 点击标题，进入GitHub，在仓库里有些可以看到具体过程，比如：http://blog.shanamaid.top/\n![](./theme.jpg '主题主页')\n②若仓库里没有具体介绍，可以大致依照以下步骤：\n(1)安装主题\n```bash\n$ git clone 主题地址 themes/主题名称\n```\n(2)配置主题：修改根目录下的`_config.yml`\n```\ntheme:主题名称\n```\n(3)更新后\n```bash\n$ cd themes/主题名称\n$ git pull origin master\n```\n(4)生成页面，并上传至GitHub\n从目录中回到根目录\n```bash\n$ cd ..\n$ cd ..\n```\n```bash\n$ hexo g\n$ hexo d\n```\n(5)配置文件：根目录\\themes\\主体名称\\_config.yml\n自定义代码高亮：根目录\\themes\\主体名称\\source\\css\\_partial\\highlight.styl下第17行\n自定义背景图片：根目录\\themes\\主体名称\\source\\plugin\\bganimation\\bg.css\n\n(6)使用GitHub的issue添加评论功能\n>主题中的`_.config.yml`：\n```yml\ncomment:\n  enable: true  #是否开启评论功能\n  owner: xuxut  #github 账户名\n  repo: blog_comments  #存储评论的仓库 注意：与博客用的不是同一个仓库\n  client_id: 631adc330b6c1dea6507  #oAuth的client_id\n  client_secret: 957d552e22d621653e22f155a00b0363058317fc #oAuth的client_secret\n```\n>关于github oAuth的配置：如果在本地调用GitHub的登录和评论，两个地址都设置为本地的地址https://localhost:4000\n\n\n\n\n","source":"_posts/03介绍主题的修改.md","raw":"---\ntitle: 介绍主题的修改\ndate: 2018-02-23 10:12:03\ncategories:\n- 博客开发\ntags:\n- hexo\n---\n介绍一下基于hexo+github博客主题的修改。\n\n<!-- more -->\n\n## 进入https://hexo.io/themes/\n找到自己喜欢的主题风格\n①点击图片，浏览效果\n 点击标题，进入GitHub，在仓库里有些可以看到具体过程，比如：http://blog.shanamaid.top/\n![](./theme.jpg '主题主页')\n②若仓库里没有具体介绍，可以大致依照以下步骤：\n(1)安装主题\n```bash\n$ git clone 主题地址 themes/主题名称\n```\n(2)配置主题：修改根目录下的`_config.yml`\n```\ntheme:主题名称\n```\n(3)更新后\n```bash\n$ cd themes/主题名称\n$ git pull origin master\n```\n(4)生成页面，并上传至GitHub\n从目录中回到根目录\n```bash\n$ cd ..\n$ cd ..\n```\n```bash\n$ hexo g\n$ hexo d\n```\n(5)配置文件：根目录\\themes\\主体名称\\_config.yml\n自定义代码高亮：根目录\\themes\\主体名称\\source\\css\\_partial\\highlight.styl下第17行\n自定义背景图片：根目录\\themes\\主体名称\\source\\plugin\\bganimation\\bg.css\n\n(6)使用GitHub的issue添加评论功能\n>主题中的`_.config.yml`：\n```yml\ncomment:\n  enable: true  #是否开启评论功能\n  owner: xuxut  #github 账户名\n  repo: blog_comments  #存储评论的仓库 注意：与博客用的不是同一个仓库\n  client_id: 631adc330b6c1dea6507  #oAuth的client_id\n  client_secret: 957d552e22d621653e22f155a00b0363058317fc #oAuth的client_secret\n```\n>关于github oAuth的配置：如果在本地调用GitHub的登录和评论，两个地址都设置为本地的地址https://localhost:4000\n\n\n\n\n","slug":"03介绍主题的修改","published":1,"updated":"2019-03-12T04:22:48.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccoub0006g8rxkixkscwr","content":"<p>介绍一下基于hexo+github博客主题的修改。</p>\n<a id=\"more\"></a>\n<h2 id=\"进入https-hexo-io-themes\"><a href=\"#进入https-hexo-io-themes\" class=\"headerlink\" title=\"进入https://hexo.io/themes/\"></a>进入<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></h2><p>找到自己喜欢的主题风格<br>①点击图片，浏览效果<br> 点击标题，进入GitHub，在仓库里有些可以看到具体过程，比如：<a href=\"http://blog.shanamaid.top/\" target=\"_blank\" rel=\"noopener\">http://blog.shanamaid.top/</a><br><img src=\"./theme.jpg\" alt title=\"主题主页\"><br>②若仓库里没有具体介绍，可以大致依照以下步骤：<br>(1)安装主题<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> 主题地址 themes/主题名称</span><br></pre></td></tr></table></figure></p>\n<p>(2)配置主题：修改根目录下的<code>_config.yml</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme:主题名称</span><br></pre></td></tr></table></figure></p>\n<p>(3)更新后<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/主题名称</span><br><span class=\"line\">$ git pull origin master</span><br></pre></td></tr></table></figure></p>\n<p>(4)生成页面，并上传至GitHub<br>从目录中回到根目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ..</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p>(5)配置文件：根目录\\themes\\主体名称_config.yml<br>自定义代码高亮：根目录\\themes\\主体名称\\source\\css_partial\\highlight.styl下第17行<br>自定义背景图片：根目录\\themes\\主体名称\\source\\plugin\\bganimation\\bg.css</p>\n<p>(6)使用GitHub的issue添加评论功能</p>\n<blockquote>\n<p>主题中的<code>_.config.yml</code>：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#是否开启评论功能</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">xuxut</span>  <span class=\"comment\">#github 账户名</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">blog_comments</span>  <span class=\"comment\">#存储评论的仓库 注意：与博客用的不是同一个仓库</span></span><br><span class=\"line\"><span class=\"attr\">  client_id:</span> <span class=\"number\">631</span><span class=\"string\">adc330b6c1dea6507</span>  <span class=\"comment\">#oAuth的client_id</span></span><br><span class=\"line\"><span class=\"attr\">  client_secret:</span> <span class=\"number\">957</span><span class=\"string\">d552e22d621653e22f155a00b0363058317fc</span> <span class=\"comment\">#oAuth的client_secret</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>关于github oAuth的配置：如果在本地调用GitHub的登录和评论，两个地址都设置为本地的地址<a href=\"https://localhost:4000\" target=\"_blank\" rel=\"noopener\">https://localhost:4000</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>介绍一下基于hexo+github博客主题的修改。</p>","more":"<h2 id=\"进入https-hexo-io-themes\"><a href=\"#进入https-hexo-io-themes\" class=\"headerlink\" title=\"进入https://hexo.io/themes/\"></a>进入<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></h2><p>找到自己喜欢的主题风格<br>①点击图片，浏览效果<br> 点击标题，进入GitHub，在仓库里有些可以看到具体过程，比如：<a href=\"http://blog.shanamaid.top/\" target=\"_blank\" rel=\"noopener\">http://blog.shanamaid.top/</a><br><img src=\"./theme.jpg\" alt title=\"主题主页\"><br>②若仓库里没有具体介绍，可以大致依照以下步骤：<br>(1)安装主题<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> 主题地址 themes/主题名称</span><br></pre></td></tr></table></figure></p>\n<p>(2)配置主题：修改根目录下的<code>_config.yml</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme:主题名称</span><br></pre></td></tr></table></figure></p>\n<p>(3)更新后<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/主题名称</span><br><span class=\"line\">$ git pull origin master</span><br></pre></td></tr></table></figure></p>\n<p>(4)生成页面，并上传至GitHub<br>从目录中回到根目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ..</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p>(5)配置文件：根目录\\themes\\主体名称_config.yml<br>自定义代码高亮：根目录\\themes\\主体名称\\source\\css_partial\\highlight.styl下第17行<br>自定义背景图片：根目录\\themes\\主体名称\\source\\plugin\\bganimation\\bg.css</p>\n<p>(6)使用GitHub的issue添加评论功能</p>\n<blockquote>\n<p>主题中的<code>_.config.yml</code>：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#是否开启评论功能</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">xuxut</span>  <span class=\"comment\">#github 账户名</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">blog_comments</span>  <span class=\"comment\">#存储评论的仓库 注意：与博客用的不是同一个仓库</span></span><br><span class=\"line\"><span class=\"attr\">  client_id:</span> <span class=\"number\">631</span><span class=\"string\">adc330b6c1dea6507</span>  <span class=\"comment\">#oAuth的client_id</span></span><br><span class=\"line\"><span class=\"attr\">  client_secret:</span> <span class=\"number\">957</span><span class=\"string\">d552e22d621653e22f155a00b0363058317fc</span> <span class=\"comment\">#oAuth的client_secret</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>关于github oAuth的配置：如果在本地调用GitHub的登录和评论，两个地址都设置为本地的地址<a href=\"https://localhost:4000\" target=\"_blank\" rel=\"noopener\">https://localhost:4000</a></p>\n</blockquote>"},{"title":"内容的编写和图片引用","date":"2018-02-23T04:32:49.000Z","_content":"介绍一下基于hexo+github博客内容的编写与图片引用出现的问题。\n\n<!-- more -->\n\n## 1.这里介绍一种非常方便的写法\n打开博客根目录，进入/source/_post/xxx.md，新建一个后缀名为md的文件，语法格式请参考“Markdown 语法整理大集合2017”\n地址为：https://www.jianshu.com/p/b03a8d7b1719\n\n## 2.关于图片引用的问题，请参考\nhttps://www.jianshu.com/p/cf0628478a4e\n修改根目录下的_config.yml配置文件post_asset_folder项为true。\n```\npost_asset_folder: true\n```\n新建文件，图片放在对应文件夹下，用 `![](./图片.jpg '图片描述')` `{% asset_img 图片.jpg 图片描述 %}`引用图片\n```\n $ hexo new 文件名\n```\n\n## 3.超链接\n>[链接名](链接地址)\n\n\n","source":"_posts/04内容编写和图片引用.md","raw":"---\ntitle: 内容的编写和图片引用\ndate: 2018-02-23 12:32:49\ncategories:\n- 博客开发\ntags:\n- hexo\n---\n介绍一下基于hexo+github博客内容的编写与图片引用出现的问题。\n\n<!-- more -->\n\n## 1.这里介绍一种非常方便的写法\n打开博客根目录，进入/source/_post/xxx.md，新建一个后缀名为md的文件，语法格式请参考“Markdown 语法整理大集合2017”\n地址为：https://www.jianshu.com/p/b03a8d7b1719\n\n## 2.关于图片引用的问题，请参考\nhttps://www.jianshu.com/p/cf0628478a4e\n修改根目录下的_config.yml配置文件post_asset_folder项为true。\n```\npost_asset_folder: true\n```\n新建文件，图片放在对应文件夹下，用 `![](./图片.jpg '图片描述')` `{% asset_img 图片.jpg 图片描述 %}`引用图片\n```\n $ hexo new 文件名\n```\n\n## 3.超链接\n>[链接名](链接地址)\n\n\n","slug":"04内容编写和图片引用","published":1,"updated":"2019-03-12T04:22:48.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccoud0007g8rx0h3ymyhe","content":"<p>介绍一下基于hexo+github博客内容的编写与图片引用出现的问题。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-这里介绍一种非常方便的写法\"><a href=\"#1-这里介绍一种非常方便的写法\" class=\"headerlink\" title=\"1.这里介绍一种非常方便的写法\"></a>1.这里介绍一种非常方便的写法</h2><p>打开博客根目录，进入/source/_post/xxx.md，新建一个后缀名为md的文件，语法格式请参考“Markdown 语法整理大集合2017”<br>地址为：<a href=\"https://www.jianshu.com/p/b03a8d7b1719\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b03a8d7b1719</a></p>\n<h2 id=\"2-关于图片引用的问题，请参考\"><a href=\"#2-关于图片引用的问题，请参考\" class=\"headerlink\" title=\"2.关于图片引用的问题，请参考\"></a>2.关于图片引用的问题，请参考</h2><p><a href=\"https://www.jianshu.com/p/cf0628478a4e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cf0628478a4e</a><br>修改根目录下的_config.yml配置文件post_asset_folder项为true。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure></p>\n<p>新建文件，图片放在对应文件夹下，用 <code>![](./图片.jpg &#39;图片描述&#39;)</code> <code></code>引用图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new 文件名</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-超链接\"><a href=\"#3-超链接\" class=\"headerlink\" title=\"3.超链接\"></a>3.超链接</h2><blockquote>\n<p><a href=\"链接地址\">链接名</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>介绍一下基于hexo+github博客内容的编写与图片引用出现的问题。</p>","more":"<h2 id=\"1-这里介绍一种非常方便的写法\"><a href=\"#1-这里介绍一种非常方便的写法\" class=\"headerlink\" title=\"1.这里介绍一种非常方便的写法\"></a>1.这里介绍一种非常方便的写法</h2><p>打开博客根目录，进入/source/_post/xxx.md，新建一个后缀名为md的文件，语法格式请参考“Markdown 语法整理大集合2017”<br>地址为：<a href=\"https://www.jianshu.com/p/b03a8d7b1719\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b03a8d7b1719</a></p>\n<h2 id=\"2-关于图片引用的问题，请参考\"><a href=\"#2-关于图片引用的问题，请参考\" class=\"headerlink\" title=\"2.关于图片引用的问题，请参考\"></a>2.关于图片引用的问题，请参考</h2><p><a href=\"https://www.jianshu.com/p/cf0628478a4e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cf0628478a4e</a><br>修改根目录下的_config.yml配置文件post_asset_folder项为true。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure></p>\n<p>新建文件，图片放在对应文件夹下，用 <code>![](./图片.jpg &#39;图片描述&#39;)</code> <code></code>引用图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new 文件名</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-超链接\"><a href=\"#3-超链接\" class=\"headerlink\" title=\"3.超链接\"></a>3.超链接</h2><blockquote>\n<p><a href=\"链接地址\">链接名</a></p>\n</blockquote>"},{"title":"关于主题内容的配置","date":"2018-02-23T08:54:43.000Z","_content":"## 一篇文章中的设置(.md)\n![](./themedes.jpg '每个帖子的设置')\n<!-- more -->\n\n### 1.标签和分类的书写\n标题下的分类与最下面的标签，在文件头部分别设置\n```\n---\ntitle: xxxxxx\ncategories:\n- web\ntags:\n- hexo\n---\n```\n### 2.按钮Read More\n在哪里设置按钮，就在哪里断开内容，下面写的内容就在链接里面\n```\n`<!-- more -->`\n```\n\n### 3.tags和catogories的配置\n先创建新页面\n```\n$ hexo new page tags\n$ hexo new page categories\n```\n在页面中写\n```\n---\ntitle: xxxxxx\nlayout: \"tags\"\n---\n\n---\ntitle: xxxxxx\nlayout: \"categories\"\n---\n```\n\n### 4.搜索\n安装插件\n```\n$ npm install hexo-generator-json-content \n```\n在根目录的配置中添加\n```\njsonContent:\n    meta: false\n    pages: false\n    posts:\n      title: true\n      date: true\n      path: true\n      text: false\n      raw: false\n      content: false\n      slug: false\n      updated: false\n      comments: false\n      link: false\n      permalink: false\n      excerpt: false\n      categories: false\n      tags: true\n```\n\n### 5.评论：使用GitHub的issue添加评论功能\n>主题中的`_.config.yml`：\n```yml\ncomment:\n  enable: true  #是否开启评论功能\n  owner: xuxut  #github 账户名\n  repo: blog_comments  #存储评论的仓库 注意：与博客用的不是同一个仓库\n  client_id: 631adc330b6c1dea6507  #oAuth的client_id\n  client_secret: 957d552e22d621653e22f155a00b0363058317fc #oAuth的client_secret\n```\n>关于github oAuth的配置：如果在本地调用GitHub的登录和评论，两个地址都设置为本地的地址http://localhost:4000/\n\n\n","source":"_posts/05主题内容的配置.md","raw":"---\ntitle: 关于主题内容的配置\ndate: 2018-02-23 16:54:43\ncategories:\n- 博客开发\ntags:\n- hexo\n---\n## 一篇文章中的设置(.md)\n![](./themedes.jpg '每个帖子的设置')\n<!-- more -->\n\n### 1.标签和分类的书写\n标题下的分类与最下面的标签，在文件头部分别设置\n```\n---\ntitle: xxxxxx\ncategories:\n- web\ntags:\n- hexo\n---\n```\n### 2.按钮Read More\n在哪里设置按钮，就在哪里断开内容，下面写的内容就在链接里面\n```\n`<!-- more -->`\n```\n\n### 3.tags和catogories的配置\n先创建新页面\n```\n$ hexo new page tags\n$ hexo new page categories\n```\n在页面中写\n```\n---\ntitle: xxxxxx\nlayout: \"tags\"\n---\n\n---\ntitle: xxxxxx\nlayout: \"categories\"\n---\n```\n\n### 4.搜索\n安装插件\n```\n$ npm install hexo-generator-json-content \n```\n在根目录的配置中添加\n```\njsonContent:\n    meta: false\n    pages: false\n    posts:\n      title: true\n      date: true\n      path: true\n      text: false\n      raw: false\n      content: false\n      slug: false\n      updated: false\n      comments: false\n      link: false\n      permalink: false\n      excerpt: false\n      categories: false\n      tags: true\n```\n\n### 5.评论：使用GitHub的issue添加评论功能\n>主题中的`_.config.yml`：\n```yml\ncomment:\n  enable: true  #是否开启评论功能\n  owner: xuxut  #github 账户名\n  repo: blog_comments  #存储评论的仓库 注意：与博客用的不是同一个仓库\n  client_id: 631adc330b6c1dea6507  #oAuth的client_id\n  client_secret: 957d552e22d621653e22f155a00b0363058317fc #oAuth的client_secret\n```\n>关于github oAuth的配置：如果在本地调用GitHub的登录和评论，两个地址都设置为本地的地址http://localhost:4000/\n\n\n","slug":"05主题内容的配置","published":1,"updated":"2019-03-12T04:22:48.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccoue0008g8rxf5vbkfao","content":"<h2 id=\"一篇文章中的设置-md\"><a href=\"#一篇文章中的设置-md\" class=\"headerlink\" title=\"一篇文章中的设置(.md)\"></a>一篇文章中的设置(.md)</h2><p><img src=\"./themedes.jpg\" alt title=\"每个帖子的设置\"><br><a id=\"more\"></a></p>\n<h3 id=\"1-标签和分类的书写\"><a href=\"#1-标签和分类的书写\" class=\"headerlink\" title=\"1.标签和分类的书写\"></a>1.标签和分类的书写</h3><p>标题下的分类与最下面的标签，在文件头部分别设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: xxxxxx</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- web</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-按钮Read-More\"><a href=\"#2-按钮Read-More\" class=\"headerlink\" title=\"2.按钮Read More\"></a>2.按钮Read More</h3><p>在哪里设置按钮，就在哪里断开内容，下面写的内容就在链接里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;!-- more --&gt;`</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-tags和catogories的配置\"><a href=\"#3-tags和catogories的配置\" class=\"headerlink\" title=\"3.tags和catogories的配置\"></a>3.tags和catogories的配置</h3><p>先创建新页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure></p>\n<p>在页面中写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: xxxxxx</span><br><span class=\"line\">layout: &quot;tags&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">title: xxxxxx</span><br><span class=\"line\">layout: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-搜索\"><a href=\"#4-搜索\" class=\"headerlink\" title=\"4.搜索\"></a>4.搜索</h3><p>安装插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-json-content</span><br></pre></td></tr></table></figure></p>\n<p>在根目录的配置中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsonContent:</span><br><span class=\"line\">    meta: false</span><br><span class=\"line\">    pages: false</span><br><span class=\"line\">    posts:</span><br><span class=\"line\">      title: true</span><br><span class=\"line\">      date: true</span><br><span class=\"line\">      path: true</span><br><span class=\"line\">      text: false</span><br><span class=\"line\">      raw: false</span><br><span class=\"line\">      content: false</span><br><span class=\"line\">      slug: false</span><br><span class=\"line\">      updated: false</span><br><span class=\"line\">      comments: false</span><br><span class=\"line\">      link: false</span><br><span class=\"line\">      permalink: false</span><br><span class=\"line\">      excerpt: false</span><br><span class=\"line\">      categories: false</span><br><span class=\"line\">      tags: true</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-评论：使用GitHub的issue添加评论功能\"><a href=\"#5-评论：使用GitHub的issue添加评论功能\" class=\"headerlink\" title=\"5.评论：使用GitHub的issue添加评论功能\"></a>5.评论：使用GitHub的issue添加评论功能</h3><blockquote>\n<p>主题中的<code>_.config.yml</code>：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#是否开启评论功能</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">xuxut</span>  <span class=\"comment\">#github 账户名</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">blog_comments</span>  <span class=\"comment\">#存储评论的仓库 注意：与博客用的不是同一个仓库</span></span><br><span class=\"line\"><span class=\"attr\">  client_id:</span> <span class=\"number\">631</span><span class=\"string\">adc330b6c1dea6507</span>  <span class=\"comment\">#oAuth的client_id</span></span><br><span class=\"line\"><span class=\"attr\">  client_secret:</span> <span class=\"number\">957</span><span class=\"string\">d552e22d621653e22f155a00b0363058317fc</span> <span class=\"comment\">#oAuth的client_secret</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>关于github oAuth的配置：如果在本地调用GitHub的登录和评论，两个地址都设置为本地的地址<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"一篇文章中的设置-md\"><a href=\"#一篇文章中的设置-md\" class=\"headerlink\" title=\"一篇文章中的设置(.md)\"></a>一篇文章中的设置(.md)</h2><p><img src=\"./themedes.jpg\" alt title=\"每个帖子的设置\"><br>","more":"</p>\n<h3 id=\"1-标签和分类的书写\"><a href=\"#1-标签和分类的书写\" class=\"headerlink\" title=\"1.标签和分类的书写\"></a>1.标签和分类的书写</h3><p>标题下的分类与最下面的标签，在文件头部分别设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: xxxxxx</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- web</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-按钮Read-More\"><a href=\"#2-按钮Read-More\" class=\"headerlink\" title=\"2.按钮Read More\"></a>2.按钮Read More</h3><p>在哪里设置按钮，就在哪里断开内容，下面写的内容就在链接里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;!-- more --&gt;`</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-tags和catogories的配置\"><a href=\"#3-tags和catogories的配置\" class=\"headerlink\" title=\"3.tags和catogories的配置\"></a>3.tags和catogories的配置</h3><p>先创建新页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure></p>\n<p>在页面中写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: xxxxxx</span><br><span class=\"line\">layout: &quot;tags&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">title: xxxxxx</span><br><span class=\"line\">layout: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-搜索\"><a href=\"#4-搜索\" class=\"headerlink\" title=\"4.搜索\"></a>4.搜索</h3><p>安装插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-json-content</span><br></pre></td></tr></table></figure></p>\n<p>在根目录的配置中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsonContent:</span><br><span class=\"line\">    meta: false</span><br><span class=\"line\">    pages: false</span><br><span class=\"line\">    posts:</span><br><span class=\"line\">      title: true</span><br><span class=\"line\">      date: true</span><br><span class=\"line\">      path: true</span><br><span class=\"line\">      text: false</span><br><span class=\"line\">      raw: false</span><br><span class=\"line\">      content: false</span><br><span class=\"line\">      slug: false</span><br><span class=\"line\">      updated: false</span><br><span class=\"line\">      comments: false</span><br><span class=\"line\">      link: false</span><br><span class=\"line\">      permalink: false</span><br><span class=\"line\">      excerpt: false</span><br><span class=\"line\">      categories: false</span><br><span class=\"line\">      tags: true</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-评论：使用GitHub的issue添加评论功能\"><a href=\"#5-评论：使用GitHub的issue添加评论功能\" class=\"headerlink\" title=\"5.评论：使用GitHub的issue添加评论功能\"></a>5.评论：使用GitHub的issue添加评论功能</h3><blockquote>\n<p>主题中的<code>_.config.yml</code>：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#是否开启评论功能</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">xuxut</span>  <span class=\"comment\">#github 账户名</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">blog_comments</span>  <span class=\"comment\">#存储评论的仓库 注意：与博客用的不是同一个仓库</span></span><br><span class=\"line\"><span class=\"attr\">  client_id:</span> <span class=\"number\">631</span><span class=\"string\">adc330b6c1dea6507</span>  <span class=\"comment\">#oAuth的client_id</span></span><br><span class=\"line\"><span class=\"attr\">  client_secret:</span> <span class=\"number\">957</span><span class=\"string\">d552e22d621653e22f155a00b0363058317fc</span> <span class=\"comment\">#oAuth的client_secret</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>关于github oAuth的配置：如果在本地调用GitHub的登录和评论，两个地址都设置为本地的地址<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a></p>\n</blockquote>"},{"title":"阿里云上传数据库与后台书写","date":"2018-02-27T11:23:31.000Z","_content":"有些同学可能在本地服务器测试从后台请求回来的数据是正确的，但是上传到阿里云后就不可以了，原因在本文中已经帮同学们列举出来了。\n\n<!-- more -->\n>需要大家知道的一点是，当我们在PHP中使用mysqli_fetch_all($result,MYSQLI_ASSOC)，并且将这段代码放到线上环境时，那么就会发现没有请求回来的结果，所以，此函数是无法使用的。\n>通过搜索后知道，连接MySQL存在两套连接驱动（libmysql（老）和mysqlind（新））。阿里云只认libmysql。mysqlind是后来出现的。\n\n>mysqlnd(MySQL Native Driver)是老版本中php的mysql连接库libmysqlclient（ MySQL Client Library）的一个新的替代。mysqlnd从PHP 5.3.0开始就内置在官方发布的php源码包中。\n>从 http://www.runoob.com/php/func-mysqli-fetch-all.html 中可以知道，mysqli_fetch_all()函数只在带有 MySQL Native Driver 时可用。\n![](./define.jpg \"定义和用法\")\n\n>这是我的主机php使用的版本，由于是5.2.0，所以连接驱动是libmysql\n![](./host.jpg \"php版本\")\n\n## 需要注意两点：\n### 1.需要在php中使用mysqli_fetch_array()代替mysqli_fetch_all()，用法如下：\n![](./1.jpg \"php代码\")\n\n### 2.不可以使用 $arr=[] 来直接定义数组，需要使用 $arr = array() 定义数组。\n\n>关于mysqlind的更多新特性见 http://www.360doc.com/content/14/0811/17/17265359_401083295.shtml\n\n\n","source":"_posts/06php.md","raw":"---\ntitle: 阿里云上传数据库与后台书写\ndate: 2018-02-27 19:23:31\ntags:\n- php\ncategories:\n- 后端\n---\n有些同学可能在本地服务器测试从后台请求回来的数据是正确的，但是上传到阿里云后就不可以了，原因在本文中已经帮同学们列举出来了。\n\n<!-- more -->\n>需要大家知道的一点是，当我们在PHP中使用mysqli_fetch_all($result,MYSQLI_ASSOC)，并且将这段代码放到线上环境时，那么就会发现没有请求回来的结果，所以，此函数是无法使用的。\n>通过搜索后知道，连接MySQL存在两套连接驱动（libmysql（老）和mysqlind（新））。阿里云只认libmysql。mysqlind是后来出现的。\n\n>mysqlnd(MySQL Native Driver)是老版本中php的mysql连接库libmysqlclient（ MySQL Client Library）的一个新的替代。mysqlnd从PHP 5.3.0开始就内置在官方发布的php源码包中。\n>从 http://www.runoob.com/php/func-mysqli-fetch-all.html 中可以知道，mysqli_fetch_all()函数只在带有 MySQL Native Driver 时可用。\n![](./define.jpg \"定义和用法\")\n\n>这是我的主机php使用的版本，由于是5.2.0，所以连接驱动是libmysql\n![](./host.jpg \"php版本\")\n\n## 需要注意两点：\n### 1.需要在php中使用mysqli_fetch_array()代替mysqli_fetch_all()，用法如下：\n![](./1.jpg \"php代码\")\n\n### 2.不可以使用 $arr=[] 来直接定义数组，需要使用 $arr = array() 定义数组。\n\n>关于mysqlind的更多新特性见 http://www.360doc.com/content/14/0811/17/17265359_401083295.shtml\n\n\n","slug":"06php","published":1,"updated":"2019-03-12T04:22:48.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccouj000cg8rxdgllvom9","content":"<p>有些同学可能在本地服务器测试从后台请求回来的数据是正确的，但是上传到阿里云后就不可以了，原因在本文中已经帮同学们列举出来了。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>需要大家知道的一点是，当我们在PHP中使用mysqli_fetch_all($result,MYSQLI_ASSOC)，并且将这段代码放到线上环境时，那么就会发现没有请求回来的结果，所以，此函数是无法使用的。<br>通过搜索后知道，连接MySQL存在两套连接驱动（libmysql（老）和mysqlind（新））。阿里云只认libmysql。mysqlind是后来出现的。</p>\n</blockquote>\n<blockquote>\n<p>mysqlnd(MySQL Native Driver)是老版本中php的mysql连接库libmysqlclient（ MySQL Client Library）的一个新的替代。mysqlnd从PHP 5.3.0开始就内置在官方发布的php源码包中。<br>从 <a href=\"http://www.runoob.com/php/func-mysqli-fetch-all.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/php/func-mysqli-fetch-all.html</a> 中可以知道，mysqli_fetch_all()函数只在带有 MySQL Native Driver 时可用。<br><img src=\"./define.jpg\" alt title=\"定义和用法\"></p>\n</blockquote>\n<blockquote>\n<p>这是我的主机php使用的版本，由于是5.2.0，所以连接驱动是libmysql<br><img src=\"./host.jpg\" alt title=\"php版本\"></p>\n</blockquote>\n<h2 id=\"需要注意两点：\"><a href=\"#需要注意两点：\" class=\"headerlink\" title=\"需要注意两点：\"></a>需要注意两点：</h2><h3 id=\"1-需要在php中使用mysqli-fetch-array-代替mysqli-fetch-all-，用法如下：\"><a href=\"#1-需要在php中使用mysqli-fetch-array-代替mysqli-fetch-all-，用法如下：\" class=\"headerlink\" title=\"1.需要在php中使用mysqli_fetch_array()代替mysqli_fetch_all()，用法如下：\"></a>1.需要在php中使用mysqli_fetch_array()代替mysqli_fetch_all()，用法如下：</h3><p><img src=\"./1.jpg\" alt title=\"php代码\"></p>\n<h3 id=\"2-不可以使用-arr-来直接定义数组，需要使用-arr-array-定义数组。\"><a href=\"#2-不可以使用-arr-来直接定义数组，需要使用-arr-array-定义数组。\" class=\"headerlink\" title=\"2.不可以使用 $arr=[] 来直接定义数组，需要使用 $arr = array() 定义数组。\"></a>2.不可以使用 $arr=[] 来直接定义数组，需要使用 $arr = array() 定义数组。</h3><blockquote>\n<p>关于mysqlind的更多新特性见 <a href=\"http://www.360doc.com/content/14/0811/17/17265359_401083295.shtml\" target=\"_blank\" rel=\"noopener\">http://www.360doc.com/content/14/0811/17/17265359_401083295.shtml</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>有些同学可能在本地服务器测试从后台请求回来的数据是正确的，但是上传到阿里云后就不可以了，原因在本文中已经帮同学们列举出来了。</p>","more":"<blockquote>\n<p>需要大家知道的一点是，当我们在PHP中使用mysqli_fetch_all($result,MYSQLI_ASSOC)，并且将这段代码放到线上环境时，那么就会发现没有请求回来的结果，所以，此函数是无法使用的。<br>通过搜索后知道，连接MySQL存在两套连接驱动（libmysql（老）和mysqlind（新））。阿里云只认libmysql。mysqlind是后来出现的。</p>\n</blockquote>\n<blockquote>\n<p>mysqlnd(MySQL Native Driver)是老版本中php的mysql连接库libmysqlclient（ MySQL Client Library）的一个新的替代。mysqlnd从PHP 5.3.0开始就内置在官方发布的php源码包中。<br>从 <a href=\"http://www.runoob.com/php/func-mysqli-fetch-all.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/php/func-mysqli-fetch-all.html</a> 中可以知道，mysqli_fetch_all()函数只在带有 MySQL Native Driver 时可用。<br><img src=\"./define.jpg\" alt title=\"定义和用法\"></p>\n</blockquote>\n<blockquote>\n<p>这是我的主机php使用的版本，由于是5.2.0，所以连接驱动是libmysql<br><img src=\"./host.jpg\" alt title=\"php版本\"></p>\n</blockquote>\n<h2 id=\"需要注意两点：\"><a href=\"#需要注意两点：\" class=\"headerlink\" title=\"需要注意两点：\"></a>需要注意两点：</h2><h3 id=\"1-需要在php中使用mysqli-fetch-array-代替mysqli-fetch-all-，用法如下：\"><a href=\"#1-需要在php中使用mysqli-fetch-array-代替mysqli-fetch-all-，用法如下：\" class=\"headerlink\" title=\"1.需要在php中使用mysqli_fetch_array()代替mysqli_fetch_all()，用法如下：\"></a>1.需要在php中使用mysqli_fetch_array()代替mysqli_fetch_all()，用法如下：</h3><p><img src=\"./1.jpg\" alt title=\"php代码\"></p>\n<h3 id=\"2-不可以使用-arr-来直接定义数组，需要使用-arr-array-定义数组。\"><a href=\"#2-不可以使用-arr-来直接定义数组，需要使用-arr-array-定义数组。\" class=\"headerlink\" title=\"2.不可以使用 $arr=[] 来直接定义数组，需要使用 $arr = array() 定义数组。\"></a>2.不可以使用 $arr=[] 来直接定义数组，需要使用 $arr = array() 定义数组。</h3><blockquote>\n<p>关于mysqlind的更多新特性见 <a href=\"http://www.360doc.com/content/14/0811/17/17265359_401083295.shtml\" target=\"_blank\" rel=\"noopener\">http://www.360doc.com/content/14/0811/17/17265359_401083295.shtml</a></p>\n</blockquote>"},{"title":"懒加载与预加载","date":"2018-03-01T08:32:49.000Z","_content":"\n懒加载和预加载是开发中常用的设计模式，实现方式也有很多，在项目中我使用了懒加载，在这里简单记录一下。\n\n<!-- more -->\n# 1.懒加载\n### 1.1什么是懒加载？\n>懒加载通俗的讲就是延迟加载。图片懒加载就是当页面滚动到可视区域时，图片才显示出来。\n\n### 1.2.懒加载的原理。\n>页面中的img，如果没有src属性，浏览器就不会去下载图片。把页面中所有的图片路径都设置为空（或者用一个小的图片代替（1px*1px）），当滚动到可视区域的时候才设置图片正确的路径。图片真正的路径用自定义属性保存，比如data-src.\n\n### 1.3.为什么要使用懒加载，懒加载的优点？\n>比如商城网站，有很多内容和图片，数量多而且比较大，如果页面一次性加载的话，有时候会等很久。\n>优点：页面加载速度快、可以减轻服务器的压力、节约了流量,用户体验好。目的是作为服务器前端的优化，减少请求数或延迟请求数。\n\n### 1.4.懒加载的实现步骤\n>（1）将img的src=\"\"\n>（2）为img添加data-src=\"图片真正路径\"\n>（3）当触发某些条件时，自动改变该区域的图片的src属性为真实的地址 \n![](./src.jpg \"设置图片路径\")\n```\nimg = $('img');\n// 页面刷新时首先调用一次加载函数\nlazyload();\n// 注册滚动监听函数\n$(window).scroll(lazyload);\n//懒加载函数\nfunction lazyload(){\n   for(var i=0;i<img.length;i++){\n        //当前图片相对于页面顶部的距离  <= 可视区域 + 滚动条距离距离顶部的距离 -400。\n        if(img.eq(i).offset().top < parseInt($(window).height()) + parseInt($(window).scrollTop())-400) {\n        // 如果每个img的src为空的话，给每个img的src赋值为data-src的值\n           if(img.eq(i).attr(\"src\") == \"\") {\n               var src = img.eq(i).attr(\"data-src\");\n               img.eq(i).attr(\"src\", src);\n               n = i + 1;\n            }\n        }\n    }\n}\n```\n### 1.5懒加载的实现方式\n>1.定时器延迟加载\n>2.符合某些条件才加载\n>3.可视区加载，距用户看到某个图片一定距离时开始加载，保证用户下拉时可以看到图片，监控滚动条来实现。\n\n# 2.预加载\n### 2.1什么是预加载？\n>提前加载图片，当用户需要查看时可直接从本地缓存中渲染。\n\n### 2.2为什么要使用预加载，预加载的优点？\n>图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。\n>优点：牺牲服务器前端性能，换取更好的用户体验，这样可以使用户的操作得到最快的反映。\n\n### 2.3预加载的实现方式\n>new Image();\n>http://web.jobbole.com/86785/\n\n\n\n","source":"_posts/07lazyload.md","raw":"---\ntitle: 懒加载与预加载\ndate: 2018-03-01 16:32:49\ntags: \n- html \n- javascipt\n- jquery\ncategories:\n- 前端 \n---\n\n懒加载和预加载是开发中常用的设计模式，实现方式也有很多，在项目中我使用了懒加载，在这里简单记录一下。\n\n<!-- more -->\n# 1.懒加载\n### 1.1什么是懒加载？\n>懒加载通俗的讲就是延迟加载。图片懒加载就是当页面滚动到可视区域时，图片才显示出来。\n\n### 1.2.懒加载的原理。\n>页面中的img，如果没有src属性，浏览器就不会去下载图片。把页面中所有的图片路径都设置为空（或者用一个小的图片代替（1px*1px）），当滚动到可视区域的时候才设置图片正确的路径。图片真正的路径用自定义属性保存，比如data-src.\n\n### 1.3.为什么要使用懒加载，懒加载的优点？\n>比如商城网站，有很多内容和图片，数量多而且比较大，如果页面一次性加载的话，有时候会等很久。\n>优点：页面加载速度快、可以减轻服务器的压力、节约了流量,用户体验好。目的是作为服务器前端的优化，减少请求数或延迟请求数。\n\n### 1.4.懒加载的实现步骤\n>（1）将img的src=\"\"\n>（2）为img添加data-src=\"图片真正路径\"\n>（3）当触发某些条件时，自动改变该区域的图片的src属性为真实的地址 \n![](./src.jpg \"设置图片路径\")\n```\nimg = $('img');\n// 页面刷新时首先调用一次加载函数\nlazyload();\n// 注册滚动监听函数\n$(window).scroll(lazyload);\n//懒加载函数\nfunction lazyload(){\n   for(var i=0;i<img.length;i++){\n        //当前图片相对于页面顶部的距离  <= 可视区域 + 滚动条距离距离顶部的距离 -400。\n        if(img.eq(i).offset().top < parseInt($(window).height()) + parseInt($(window).scrollTop())-400) {\n        // 如果每个img的src为空的话，给每个img的src赋值为data-src的值\n           if(img.eq(i).attr(\"src\") == \"\") {\n               var src = img.eq(i).attr(\"data-src\");\n               img.eq(i).attr(\"src\", src);\n               n = i + 1;\n            }\n        }\n    }\n}\n```\n### 1.5懒加载的实现方式\n>1.定时器延迟加载\n>2.符合某些条件才加载\n>3.可视区加载，距用户看到某个图片一定距离时开始加载，保证用户下拉时可以看到图片，监控滚动条来实现。\n\n# 2.预加载\n### 2.1什么是预加载？\n>提前加载图片，当用户需要查看时可直接从本地缓存中渲染。\n\n### 2.2为什么要使用预加载，预加载的优点？\n>图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。\n>优点：牺牲服务器前端性能，换取更好的用户体验，这样可以使用户的操作得到最快的反映。\n\n### 2.3预加载的实现方式\n>new Image();\n>http://web.jobbole.com/86785/\n\n\n\n","slug":"07lazyload","published":1,"updated":"2019-03-12T04:22:48.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccoup000eg8rxrf9fa5zh","content":"<p>懒加载和预加载是开发中常用的设计模式，实现方式也有很多，在项目中我使用了懒加载，在这里简单记录一下。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-懒加载\"><a href=\"#1-懒加载\" class=\"headerlink\" title=\"1.懒加载\"></a>1.懒加载</h1><h3 id=\"1-1什么是懒加载？\"><a href=\"#1-1什么是懒加载？\" class=\"headerlink\" title=\"1.1什么是懒加载？\"></a>1.1什么是懒加载？</h3><blockquote>\n<p>懒加载通俗的讲就是延迟加载。图片懒加载就是当页面滚动到可视区域时，图片才显示出来。</p>\n</blockquote>\n<h3 id=\"1-2-懒加载的原理。\"><a href=\"#1-2-懒加载的原理。\" class=\"headerlink\" title=\"1.2.懒加载的原理。\"></a>1.2.懒加载的原理。</h3><blockquote>\n<p>页面中的img，如果没有src属性，浏览器就不会去下载图片。把页面中所有的图片路径都设置为空（或者用一个小的图片代替（1px*1px）），当滚动到可视区域的时候才设置图片正确的路径。图片真正的路径用自定义属性保存，比如data-src.</p>\n</blockquote>\n<h3 id=\"1-3-为什么要使用懒加载，懒加载的优点？\"><a href=\"#1-3-为什么要使用懒加载，懒加载的优点？\" class=\"headerlink\" title=\"1.3.为什么要使用懒加载，懒加载的优点？\"></a>1.3.为什么要使用懒加载，懒加载的优点？</h3><blockquote>\n<p>比如商城网站，有很多内容和图片，数量多而且比较大，如果页面一次性加载的话，有时候会等很久。<br>优点：页面加载速度快、可以减轻服务器的压力、节约了流量,用户体验好。目的是作为服务器前端的优化，减少请求数或延迟请求数。</p>\n</blockquote>\n<h3 id=\"1-4-懒加载的实现步骤\"><a href=\"#1-4-懒加载的实现步骤\" class=\"headerlink\" title=\"1.4.懒加载的实现步骤\"></a>1.4.懒加载的实现步骤</h3><blockquote>\n<p>（1）将img的src=””<br>（2）为img添加data-src=”图片真正路径”<br>（3）当触发某些条件时，自动改变该区域的图片的src属性为真实的地址<br><img src=\"./src.jpg\" alt title=\"设置图片路径\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = $(&apos;img&apos;);</span><br><span class=\"line\">// 页面刷新时首先调用一次加载函数</span><br><span class=\"line\">lazyload();</span><br><span class=\"line\">// 注册滚动监听函数</span><br><span class=\"line\">$(window).scroll(lazyload);</span><br><span class=\"line\">//懒加载函数</span><br><span class=\"line\">function lazyload()&#123;</span><br><span class=\"line\">   for(var i=0;i&lt;img.length;i++)&#123;</span><br><span class=\"line\">        //当前图片相对于页面顶部的距离  &lt;= 可视区域 + 滚动条距离距离顶部的距离 -400。</span><br><span class=\"line\">        if(img.eq(i).offset().top &lt; parseInt($(window).height()) + parseInt($(window).scrollTop())-400) &#123;</span><br><span class=\"line\">        // 如果每个img的src为空的话，给每个img的src赋值为data-src的值</span><br><span class=\"line\">           if(img.eq(i).attr(&quot;src&quot;) == &quot;&quot;) &#123;</span><br><span class=\"line\">               var src = img.eq(i).attr(&quot;data-src&quot;);</span><br><span class=\"line\">               img.eq(i).attr(&quot;src&quot;, src);</span><br><span class=\"line\">               n = i + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"1-5懒加载的实现方式\"><a href=\"#1-5懒加载的实现方式\" class=\"headerlink\" title=\"1.5懒加载的实现方式\"></a>1.5懒加载的实现方式</h3><blockquote>\n<p>1.定时器延迟加载<br>2.符合某些条件才加载<br>3.可视区加载，距用户看到某个图片一定距离时开始加载，保证用户下拉时可以看到图片，监控滚动条来实现。</p>\n</blockquote>\n<h1 id=\"2-预加载\"><a href=\"#2-预加载\" class=\"headerlink\" title=\"2.预加载\"></a>2.预加载</h1><h3 id=\"2-1什么是预加载？\"><a href=\"#2-1什么是预加载？\" class=\"headerlink\" title=\"2.1什么是预加载？\"></a>2.1什么是预加载？</h3><blockquote>\n<p>提前加载图片，当用户需要查看时可直接从本地缓存中渲染。</p>\n</blockquote>\n<h3 id=\"2-2为什么要使用预加载，预加载的优点？\"><a href=\"#2-2为什么要使用预加载，预加载的优点？\" class=\"headerlink\" title=\"2.2为什么要使用预加载，预加载的优点？\"></a>2.2为什么要使用预加载，预加载的优点？</h3><blockquote>\n<p>图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。<br>优点：牺牲服务器前端性能，换取更好的用户体验，这样可以使用户的操作得到最快的反映。</p>\n</blockquote>\n<h3 id=\"2-3预加载的实现方式\"><a href=\"#2-3预加载的实现方式\" class=\"headerlink\" title=\"2.3预加载的实现方式\"></a>2.3预加载的实现方式</h3><blockquote>\n<p>new Image();<br><a href=\"http://web.jobbole.com/86785/\" target=\"_blank\" rel=\"noopener\">http://web.jobbole.com/86785/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>懒加载和预加载是开发中常用的设计模式，实现方式也有很多，在项目中我使用了懒加载，在这里简单记录一下。</p>","more":"<h1 id=\"1-懒加载\"><a href=\"#1-懒加载\" class=\"headerlink\" title=\"1.懒加载\"></a>1.懒加载</h1><h3 id=\"1-1什么是懒加载？\"><a href=\"#1-1什么是懒加载？\" class=\"headerlink\" title=\"1.1什么是懒加载？\"></a>1.1什么是懒加载？</h3><blockquote>\n<p>懒加载通俗的讲就是延迟加载。图片懒加载就是当页面滚动到可视区域时，图片才显示出来。</p>\n</blockquote>\n<h3 id=\"1-2-懒加载的原理。\"><a href=\"#1-2-懒加载的原理。\" class=\"headerlink\" title=\"1.2.懒加载的原理。\"></a>1.2.懒加载的原理。</h3><blockquote>\n<p>页面中的img，如果没有src属性，浏览器就不会去下载图片。把页面中所有的图片路径都设置为空（或者用一个小的图片代替（1px*1px）），当滚动到可视区域的时候才设置图片正确的路径。图片真正的路径用自定义属性保存，比如data-src.</p>\n</blockquote>\n<h3 id=\"1-3-为什么要使用懒加载，懒加载的优点？\"><a href=\"#1-3-为什么要使用懒加载，懒加载的优点？\" class=\"headerlink\" title=\"1.3.为什么要使用懒加载，懒加载的优点？\"></a>1.3.为什么要使用懒加载，懒加载的优点？</h3><blockquote>\n<p>比如商城网站，有很多内容和图片，数量多而且比较大，如果页面一次性加载的话，有时候会等很久。<br>优点：页面加载速度快、可以减轻服务器的压力、节约了流量,用户体验好。目的是作为服务器前端的优化，减少请求数或延迟请求数。</p>\n</blockquote>\n<h3 id=\"1-4-懒加载的实现步骤\"><a href=\"#1-4-懒加载的实现步骤\" class=\"headerlink\" title=\"1.4.懒加载的实现步骤\"></a>1.4.懒加载的实现步骤</h3><blockquote>\n<p>（1）将img的src=””<br>（2）为img添加data-src=”图片真正路径”<br>（3）当触发某些条件时，自动改变该区域的图片的src属性为真实的地址<br><img src=\"./src.jpg\" alt title=\"设置图片路径\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = $(&apos;img&apos;);</span><br><span class=\"line\">// 页面刷新时首先调用一次加载函数</span><br><span class=\"line\">lazyload();</span><br><span class=\"line\">// 注册滚动监听函数</span><br><span class=\"line\">$(window).scroll(lazyload);</span><br><span class=\"line\">//懒加载函数</span><br><span class=\"line\">function lazyload()&#123;</span><br><span class=\"line\">   for(var i=0;i&lt;img.length;i++)&#123;</span><br><span class=\"line\">        //当前图片相对于页面顶部的距离  &lt;= 可视区域 + 滚动条距离距离顶部的距离 -400。</span><br><span class=\"line\">        if(img.eq(i).offset().top &lt; parseInt($(window).height()) + parseInt($(window).scrollTop())-400) &#123;</span><br><span class=\"line\">        // 如果每个img的src为空的话，给每个img的src赋值为data-src的值</span><br><span class=\"line\">           if(img.eq(i).attr(&quot;src&quot;) == &quot;&quot;) &#123;</span><br><span class=\"line\">               var src = img.eq(i).attr(&quot;data-src&quot;);</span><br><span class=\"line\">               img.eq(i).attr(&quot;src&quot;, src);</span><br><span class=\"line\">               n = i + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"1-5懒加载的实现方式\"><a href=\"#1-5懒加载的实现方式\" class=\"headerlink\" title=\"1.5懒加载的实现方式\"></a>1.5懒加载的实现方式</h3><blockquote>\n<p>1.定时器延迟加载<br>2.符合某些条件才加载<br>3.可视区加载，距用户看到某个图片一定距离时开始加载，保证用户下拉时可以看到图片，监控滚动条来实现。</p>\n</blockquote>\n<h1 id=\"2-预加载\"><a href=\"#2-预加载\" class=\"headerlink\" title=\"2.预加载\"></a>2.预加载</h1><h3 id=\"2-1什么是预加载？\"><a href=\"#2-1什么是预加载？\" class=\"headerlink\" title=\"2.1什么是预加载？\"></a>2.1什么是预加载？</h3><blockquote>\n<p>提前加载图片，当用户需要查看时可直接从本地缓存中渲染。</p>\n</blockquote>\n<h3 id=\"2-2为什么要使用预加载，预加载的优点？\"><a href=\"#2-2为什么要使用预加载，预加载的优点？\" class=\"headerlink\" title=\"2.2为什么要使用预加载，预加载的优点？\"></a>2.2为什么要使用预加载，预加载的优点？</h3><blockquote>\n<p>图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。<br>优点：牺牲服务器前端性能，换取更好的用户体验，这样可以使用户的操作得到最快的反映。</p>\n</blockquote>\n<h3 id=\"2-3预加载的实现方式\"><a href=\"#2-3预加载的实现方式\" class=\"headerlink\" title=\"2.3预加载的实现方式\"></a>2.3预加载的实现方式</h3><blockquote>\n<p>new Image();<br><a href=\"http://web.jobbole.com/86785/\" target=\"_blank\" rel=\"noopener\">http://web.jobbole.com/86785/</a></p>\n</blockquote>"},{"title":"vue重构项目遇到的问题以及vue项目打包","date":"2018-03-04T05:32:49.000Z","_content":"\n 本文描述的是在用vue重构项目时所遇到的一些问题。在此记录一下。\n<!-- more -->\n## 1.如果图片的路径是变量，需要用require(\"路径变量\")\n## 2.子组件之间的通信\n### (1)在全局定义window.bus。\n>通知：bus.$emit(\"事件名称\",数据)\n>接收：bus.$on(\"事件名称\",function(msg){})\n### (2)或者使用本地存储技术\n>localStorage/sessionStorage.setItem(\"名称\",数据)\n>localStorage/sessionStorage.getItem(\"名称\")\n>localStorage/sessionStorage.removeItem(\"名称\")\n## 3.怎样刷新页面，局部刷新？？\n<h3>this.$router.push(\"/路径\")不支持刷新</h3>\n>window.location.reload()是刷新整个页面，我想只刷新某部分的router-view\n>this.$router.go(0);刷新整个页面\n## 4.关于通信问题。\n(1)父与子：\n① props\n![](./父与子.jpg)\t\n② $refs\n![](./父与子ref.jpg) \n③ $parent\n![](./父与子$parent.jpg)\n(2)子与父：\n子：$emit.事件\n ![](./子与父子.jpg)\n父：标签中 @事件=\"\"\n ![](./子与父父.jpg)\n\n(3)子与子bus\n子1（传递$emit）:\n ![](./子与子子1.jpg)\n子2（绑定$on）：\n ![](./子与子子2.jpg)\n\n# vue环境搭建\n![](./搭建.jpg)\n\n# vue项目打包\n1.config/index.js\n![](./index.jpg)\n2.build/utils.js\n![](./util.jpg)\n3.根目录下运行npm run build\n4.完成后文件保存在根目录下的dist，需要打开服务器，才能打开index.html\n\n# vue-router的导航钩子\n1.全局导航钩子（前置守卫、后置钩子）\n（1）全局前置守卫\n```\nconst router = new VueRouter({...})\nrouter.beforeEach((to,from,next)=>{\n\t//do something\n})\n\nto:Route，代表要进入的目标，它是一个路由对象\nfrom:Route，代表当前正要离开的路由，同样也是一个路由对象\nnext:Function，这是一个必须需要调用的方法，而具体的执行效果则依赖next方法调用的参数\n```\n![](./vue-router-nav.jpg)\n（2）全局后置钩子:不同于前置守卫，后置钩子没有next函数，也不会改变导航本身。\n```\nrouter.afterEach((to,from)=>{\n\t//do something\n})\n```\n2.路由独享的钩子：在路由配置上直接定义的：\n```\ncont router = new VueRouter({\n     routes:[\n\t{\n\t\tpath:'/file',\n\t\tcomponent:File,\n\t\tbeforeEnter:((to,from,next)=>{\n\t\t\t//do something\n\t\t})\n\t}\n     ]\n})\n```\n3.组件内的导航钩子\n4.父组件向子组件传递props（异步请求回来的数据）时，在子组件的生命周期挂载后，数据为undefined,用定时器延迟来接收即可。\n5.改变对象或数组不会触发DOM更新，解决办法：\n```\neg: const obj = that.keywordList[key]\n\t\tobj.checked = !obj.checked\n\t\tthat.leywordList.splice(index, 1, obj)\n```\n6.若需要动态添加元素的CSS,则<style></style>不能写scoped属性\n7.nextTick:在视图更新之后，基于新的视图进行操作。\n看一个例子：\n点击show按钮使得原来v-show：false的input输入框显示，并获取焦点：\n```\n <div id=\"app\">\n  <input ref=\"input\" v-show=\"inputShow\">\n  <button @click=\"show\">show</button>  \n </div>\n\nnew Vue({\n  el: \"#app\",\n  data() {\n   return {\n     inputShow: false\n   }\n  },\n  methods: {\n    show() {\n      this.inputShow = true\n      this.$nextTick(() => {\n        this.$refs.input.focus()\n      })\n    }\n  }\n})\n```\n","source":"_posts/08vue.md","raw":"---\ntitle: vue重构项目遇到的问题以及vue项目打包\ndate: 2018-03-04 13:32:49\ntags: \n- javascript\n- vue\ncategories:\n- 前端 \n---\n\n 本文描述的是在用vue重构项目时所遇到的一些问题。在此记录一下。\n<!-- more -->\n## 1.如果图片的路径是变量，需要用require(\"路径变量\")\n## 2.子组件之间的通信\n### (1)在全局定义window.bus。\n>通知：bus.$emit(\"事件名称\",数据)\n>接收：bus.$on(\"事件名称\",function(msg){})\n### (2)或者使用本地存储技术\n>localStorage/sessionStorage.setItem(\"名称\",数据)\n>localStorage/sessionStorage.getItem(\"名称\")\n>localStorage/sessionStorage.removeItem(\"名称\")\n## 3.怎样刷新页面，局部刷新？？\n<h3>this.$router.push(\"/路径\")不支持刷新</h3>\n>window.location.reload()是刷新整个页面，我想只刷新某部分的router-view\n>this.$router.go(0);刷新整个页面\n## 4.关于通信问题。\n(1)父与子：\n① props\n![](./父与子.jpg)\t\n② $refs\n![](./父与子ref.jpg) \n③ $parent\n![](./父与子$parent.jpg)\n(2)子与父：\n子：$emit.事件\n ![](./子与父子.jpg)\n父：标签中 @事件=\"\"\n ![](./子与父父.jpg)\n\n(3)子与子bus\n子1（传递$emit）:\n ![](./子与子子1.jpg)\n子2（绑定$on）：\n ![](./子与子子2.jpg)\n\n# vue环境搭建\n![](./搭建.jpg)\n\n# vue项目打包\n1.config/index.js\n![](./index.jpg)\n2.build/utils.js\n![](./util.jpg)\n3.根目录下运行npm run build\n4.完成后文件保存在根目录下的dist，需要打开服务器，才能打开index.html\n\n# vue-router的导航钩子\n1.全局导航钩子（前置守卫、后置钩子）\n（1）全局前置守卫\n```\nconst router = new VueRouter({...})\nrouter.beforeEach((to,from,next)=>{\n\t//do something\n})\n\nto:Route，代表要进入的目标，它是一个路由对象\nfrom:Route，代表当前正要离开的路由，同样也是一个路由对象\nnext:Function，这是一个必须需要调用的方法，而具体的执行效果则依赖next方法调用的参数\n```\n![](./vue-router-nav.jpg)\n（2）全局后置钩子:不同于前置守卫，后置钩子没有next函数，也不会改变导航本身。\n```\nrouter.afterEach((to,from)=>{\n\t//do something\n})\n```\n2.路由独享的钩子：在路由配置上直接定义的：\n```\ncont router = new VueRouter({\n     routes:[\n\t{\n\t\tpath:'/file',\n\t\tcomponent:File,\n\t\tbeforeEnter:((to,from,next)=>{\n\t\t\t//do something\n\t\t})\n\t}\n     ]\n})\n```\n3.组件内的导航钩子\n4.父组件向子组件传递props（异步请求回来的数据）时，在子组件的生命周期挂载后，数据为undefined,用定时器延迟来接收即可。\n5.改变对象或数组不会触发DOM更新，解决办法：\n```\neg: const obj = that.keywordList[key]\n\t\tobj.checked = !obj.checked\n\t\tthat.leywordList.splice(index, 1, obj)\n```\n6.若需要动态添加元素的CSS,则<style></style>不能写scoped属性\n7.nextTick:在视图更新之后，基于新的视图进行操作。\n看一个例子：\n点击show按钮使得原来v-show：false的input输入框显示，并获取焦点：\n```\n <div id=\"app\">\n  <input ref=\"input\" v-show=\"inputShow\">\n  <button @click=\"show\">show</button>  \n </div>\n\nnew Vue({\n  el: \"#app\",\n  data() {\n   return {\n     inputShow: false\n   }\n  },\n  methods: {\n    show() {\n      this.inputShow = true\n      this.$nextTick(() => {\n        this.$refs.input.focus()\n      })\n    }\n  }\n})\n```\n","slug":"08vue","published":1,"updated":"2019-03-12T04:22:48.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccouv000jg8rx2zh3098y","content":"<p> 本文描述的是在用vue重构项目时所遇到的一些问题。在此记录一下。<br><a id=\"more\"></a></p>\n<h2 id=\"1-如果图片的路径是变量，需要用require-“路径变量”\"><a href=\"#1-如果图片的路径是变量，需要用require-“路径变量”\" class=\"headerlink\" title=\"1.如果图片的路径是变量，需要用require(“路径变量”)\"></a>1.如果图片的路径是变量，需要用require(“路径变量”)</h2><h2 id=\"2-子组件之间的通信\"><a href=\"#2-子组件之间的通信\" class=\"headerlink\" title=\"2.子组件之间的通信\"></a>2.子组件之间的通信</h2><h3 id=\"1-在全局定义window-bus。\"><a href=\"#1-在全局定义window-bus。\" class=\"headerlink\" title=\"(1)在全局定义window.bus。\"></a>(1)在全局定义window.bus。</h3><blockquote>\n<p>通知：bus.$emit(“事件名称”,数据)<br>接收：bus.$on(“事件名称”,function(msg){})</p>\n</blockquote>\n<h3 id=\"2-或者使用本地存储技术\"><a href=\"#2-或者使用本地存储技术\" class=\"headerlink\" title=\"(2)或者使用本地存储技术\"></a>(2)或者使用本地存储技术</h3><blockquote>\n<p>localStorage/sessionStorage.setItem(“名称”,数据)<br>localStorage/sessionStorage.getItem(“名称”)<br>localStorage/sessionStorage.removeItem(“名称”)</p>\n</blockquote>\n<h2 id=\"3-怎样刷新页面，局部刷新？？\"><a href=\"#3-怎样刷新页面，局部刷新？？\" class=\"headerlink\" title=\"3.怎样刷新页面，局部刷新？？\"></a>3.怎样刷新页面，局部刷新？？</h2><p></p><h3>this.$router.push(“/路径”)不支持刷新</h3><p></p>\n<blockquote>\n<p>window.location.reload()是刷新整个页面，我想只刷新某部分的router-view<br>this.$router.go(0);刷新整个页面</p>\n</blockquote>\n<h2 id=\"4-关于通信问题。\"><a href=\"#4-关于通信问题。\" class=\"headerlink\" title=\"4.关于通信问题。\"></a>4.关于通信问题。</h2><p>(1)父与子：<br>① props<br><img src=\"./父与子.jpg\" alt><br>② $refs<br><img src=\"./父与子ref.jpg\" alt><br>③ $parent<br><img src=\"./父与子$parent.jpg\" alt><br>(2)子与父：<br>子：$emit.事件<br> <img src=\"./子与父子.jpg\" alt><br>父：标签中 @事件=””<br> <img src=\"./子与父父.jpg\" alt></p>\n<p>(3)子与子bus<br>子1（传递$emit）:<br> <img src=\"./子与子子1.jpg\" alt><br>子2（绑定$on）：<br> <img src=\"./子与子子2.jpg\" alt></p>\n<h1 id=\"vue环境搭建\"><a href=\"#vue环境搭建\" class=\"headerlink\" title=\"vue环境搭建\"></a>vue环境搭建</h1><p><img src=\"./搭建.jpg\" alt></p>\n<h1 id=\"vue项目打包\"><a href=\"#vue项目打包\" class=\"headerlink\" title=\"vue项目打包\"></a>vue项目打包</h1><p>1.config/index.js<br><img src=\"./index.jpg\" alt><br>2.build/utils.js<br><img src=\"./util.jpg\" alt><br>3.根目录下运行npm run build<br>4.完成后文件保存在根目录下的dist，需要打开服务器，才能打开index.html</p>\n<h1 id=\"vue-router的导航钩子\"><a href=\"#vue-router的导航钩子\" class=\"headerlink\" title=\"vue-router的导航钩子\"></a>vue-router的导航钩子</h1><p>1.全局导航钩子（前置守卫、后置钩子）<br>（1）全局前置守卫<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = new VueRouter(&#123;...&#125;)</span><br><span class=\"line\">router.beforeEach((to,from,next)=&gt;&#123;</span><br><span class=\"line\">\t//do something</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">to:Route，代表要进入的目标，它是一个路由对象</span><br><span class=\"line\">from:Route，代表当前正要离开的路由，同样也是一个路由对象</span><br><span class=\"line\">next:Function，这是一个必须需要调用的方法，而具体的执行效果则依赖next方法调用的参数</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./vue-router-nav.jpg\" alt><br>（2）全局后置钩子:不同于前置守卫，后置钩子没有next函数，也不会改变导航本身。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.afterEach((to,from)=&gt;&#123;</span><br><span class=\"line\">\t//do something</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>2.路由独享的钩子：在路由配置上直接定义的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cont router = new VueRouter(&#123;</span><br><span class=\"line\">     routes:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpath:&apos;/file&apos;,</span><br><span class=\"line\">\t\tcomponent:File,</span><br><span class=\"line\">\t\tbeforeEnter:((to,from,next)=&gt;&#123;</span><br><span class=\"line\">\t\t\t//do something</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">     ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3.组件内的导航钩子<br>4.父组件向子组件传递props（异步请求回来的数据）时，在子组件的生命周期挂载后，数据为undefined,用定时器延迟来接收即可。<br>5.改变对象或数组不会触发DOM更新，解决办法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg: const obj = that.keywordList[key]</span><br><span class=\"line\">\t\tobj.checked = !obj.checked</span><br><span class=\"line\">\t\tthat.leywordList.splice(index, 1, obj)</span><br></pre></td></tr></table></figure></p>\n<p>6.若需要动态添加元素的CSS,则<style></style>不能写scoped属性<br>7.nextTick:在视图更新之后，基于新的视图进行操作。<br>看一个例子：<br>点击show按钮使得原来v-show：false的input输入框显示，并获取焦点：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input ref=&quot;input&quot; v-show=&quot;inputShow&quot;&gt;</span><br><span class=\"line\">  &lt;button @click=&quot;show&quot;&gt;show&lt;/button&gt;  </span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">   return &#123;</span><br><span class=\"line\">     inputShow: false</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    show() &#123;</span><br><span class=\"line\">      this.inputShow = true</span><br><span class=\"line\">      this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">        this.$refs.input.focus()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p> 本文描述的是在用vue重构项目时所遇到的一些问题。在此记录一下。<br>","more":"</p>\n<h2 id=\"1-如果图片的路径是变量，需要用require-“路径变量”\"><a href=\"#1-如果图片的路径是变量，需要用require-“路径变量”\" class=\"headerlink\" title=\"1.如果图片的路径是变量，需要用require(“路径变量”)\"></a>1.如果图片的路径是变量，需要用require(“路径变量”)</h2><h2 id=\"2-子组件之间的通信\"><a href=\"#2-子组件之间的通信\" class=\"headerlink\" title=\"2.子组件之间的通信\"></a>2.子组件之间的通信</h2><h3 id=\"1-在全局定义window-bus。\"><a href=\"#1-在全局定义window-bus。\" class=\"headerlink\" title=\"(1)在全局定义window.bus。\"></a>(1)在全局定义window.bus。</h3><blockquote>\n<p>通知：bus.$emit(“事件名称”,数据)<br>接收：bus.$on(“事件名称”,function(msg){})</p>\n</blockquote>\n<h3 id=\"2-或者使用本地存储技术\"><a href=\"#2-或者使用本地存储技术\" class=\"headerlink\" title=\"(2)或者使用本地存储技术\"></a>(2)或者使用本地存储技术</h3><blockquote>\n<p>localStorage/sessionStorage.setItem(“名称”,数据)<br>localStorage/sessionStorage.getItem(“名称”)<br>localStorage/sessionStorage.removeItem(“名称”)</p>\n</blockquote>\n<h2 id=\"3-怎样刷新页面，局部刷新？？\"><a href=\"#3-怎样刷新页面，局部刷新？？\" class=\"headerlink\" title=\"3.怎样刷新页面，局部刷新？？\"></a>3.怎样刷新页面，局部刷新？？</h2><p></p><h3>this.$router.push(“/路径”)不支持刷新</h3><p></p>\n<blockquote>\n<p>window.location.reload()是刷新整个页面，我想只刷新某部分的router-view<br>this.$router.go(0);刷新整个页面</p>\n</blockquote>\n<h2 id=\"4-关于通信问题。\"><a href=\"#4-关于通信问题。\" class=\"headerlink\" title=\"4.关于通信问题。\"></a>4.关于通信问题。</h2><p>(1)父与子：<br>① props<br><img src=\"./父与子.jpg\" alt><br>② $refs<br><img src=\"./父与子ref.jpg\" alt><br>③ $parent<br><img src=\"./父与子$parent.jpg\" alt><br>(2)子与父：<br>子：$emit.事件<br> <img src=\"./子与父子.jpg\" alt><br>父：标签中 @事件=””<br> <img src=\"./子与父父.jpg\" alt></p>\n<p>(3)子与子bus<br>子1（传递$emit）:<br> <img src=\"./子与子子1.jpg\" alt><br>子2（绑定$on）：<br> <img src=\"./子与子子2.jpg\" alt></p>\n<h1 id=\"vue环境搭建\"><a href=\"#vue环境搭建\" class=\"headerlink\" title=\"vue环境搭建\"></a>vue环境搭建</h1><p><img src=\"./搭建.jpg\" alt></p>\n<h1 id=\"vue项目打包\"><a href=\"#vue项目打包\" class=\"headerlink\" title=\"vue项目打包\"></a>vue项目打包</h1><p>1.config/index.js<br><img src=\"./index.jpg\" alt><br>2.build/utils.js<br><img src=\"./util.jpg\" alt><br>3.根目录下运行npm run build<br>4.完成后文件保存在根目录下的dist，需要打开服务器，才能打开index.html</p>\n<h1 id=\"vue-router的导航钩子\"><a href=\"#vue-router的导航钩子\" class=\"headerlink\" title=\"vue-router的导航钩子\"></a>vue-router的导航钩子</h1><p>1.全局导航钩子（前置守卫、后置钩子）<br>（1）全局前置守卫<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = new VueRouter(&#123;...&#125;)</span><br><span class=\"line\">router.beforeEach((to,from,next)=&gt;&#123;</span><br><span class=\"line\">\t//do something</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">to:Route，代表要进入的目标，它是一个路由对象</span><br><span class=\"line\">from:Route，代表当前正要离开的路由，同样也是一个路由对象</span><br><span class=\"line\">next:Function，这是一个必须需要调用的方法，而具体的执行效果则依赖next方法调用的参数</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./vue-router-nav.jpg\" alt><br>（2）全局后置钩子:不同于前置守卫，后置钩子没有next函数，也不会改变导航本身。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.afterEach((to,from)=&gt;&#123;</span><br><span class=\"line\">\t//do something</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>2.路由独享的钩子：在路由配置上直接定义的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cont router = new VueRouter(&#123;</span><br><span class=\"line\">     routes:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpath:&apos;/file&apos;,</span><br><span class=\"line\">\t\tcomponent:File,</span><br><span class=\"line\">\t\tbeforeEnter:((to,from,next)=&gt;&#123;</span><br><span class=\"line\">\t\t\t//do something</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">     ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3.组件内的导航钩子<br>4.父组件向子组件传递props（异步请求回来的数据）时，在子组件的生命周期挂载后，数据为undefined,用定时器延迟来接收即可。<br>5.改变对象或数组不会触发DOM更新，解决办法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg: const obj = that.keywordList[key]</span><br><span class=\"line\">\t\tobj.checked = !obj.checked</span><br><span class=\"line\">\t\tthat.leywordList.splice(index, 1, obj)</span><br></pre></td></tr></table></figure></p>\n<p>6.若需要动态添加元素的CSS,则<style></style>不能写scoped属性<br>7.nextTick:在视图更新之后，基于新的视图进行操作。<br>看一个例子：<br>点击show按钮使得原来v-show：false的input输入框显示，并获取焦点：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input ref=&quot;input&quot; v-show=&quot;inputShow&quot;&gt;</span><br><span class=\"line\">  &lt;button @click=&quot;show&quot;&gt;show&lt;/button&gt;  </span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">   return &#123;</span><br><span class=\"line\">     inputShow: false</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    show() &#123;</span><br><span class=\"line\">      this.inputShow = true</span><br><span class=\"line\">      this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">        this.$refs.input.focus()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>"},{"title":"antd design pro中使用typescript","date":"2019-02-26T03:20:03.000Z","_content":"\n## index.js\n```javascript\nimport React, { Component, PureComponent } from 'react'\nexport default class TagSelect extends Component{\n\n}\n\n```\n<!-- more -->\n\n## TagSelectionOption.d.ts\n```javascript\nimport * as React from 'react';\n\nexport interface ITagSelectOptionProps {\n  value: string | number;\n  style?: React.CSSProperties;\n}\n\nexport default class TagSelectOption extends React.Component<ITagSelectOptionProps, any> {}\n```\n## index.d.ts\n```javascript\nimport * as React from 'react'\nimport TagSelectOption from './TagSelectOption'\n\nexport interface ITagSelectProps {\n    onChange?: (value: string[]) => void;\n    expandable?: boolean;\n    value?: string[] | number[];\n    style?: React.CSSProperties;\n    hideCheckAll?: boolean;\n}\nexport default class TagSelect extends React.Component<ITagSelectProps, any>{\n    public static Option: typeof TagSelectOption\n    private children:\n        | React.ReactElement<TagSelection>\n        | Array<React.ReactElement<TagSeletion>>;\n}\n\n```","source":"_posts/antd-design-pro中使用typescript.md","raw":"---\ntitle: antd design pro中使用typescript\ndate: 2019-02-26 11:20:03\ntags: \n- react\ncategories:\n- 前端框架 \n---\n\n## index.js\n```javascript\nimport React, { Component, PureComponent } from 'react'\nexport default class TagSelect extends Component{\n\n}\n\n```\n<!-- more -->\n\n## TagSelectionOption.d.ts\n```javascript\nimport * as React from 'react';\n\nexport interface ITagSelectOptionProps {\n  value: string | number;\n  style?: React.CSSProperties;\n}\n\nexport default class TagSelectOption extends React.Component<ITagSelectOptionProps, any> {}\n```\n## index.d.ts\n```javascript\nimport * as React from 'react'\nimport TagSelectOption from './TagSelectOption'\n\nexport interface ITagSelectProps {\n    onChange?: (value: string[]) => void;\n    expandable?: boolean;\n    value?: string[] | number[];\n    style?: React.CSSProperties;\n    hideCheckAll?: boolean;\n}\nexport default class TagSelect extends React.Component<ITagSelectProps, any>{\n    public static Option: typeof TagSelectOption\n    private children:\n        | React.ReactElement<TagSelection>\n        | Array<React.ReactElement<TagSeletion>>;\n}\n\n```","slug":"antd-design-pro中使用typescript","published":1,"updated":"2019-03-12T04:22:48.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccova000mg8rxgxr86nk1","content":"<h2 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TagSelect</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"TagSelectionOption-d-ts\"><a href=\"#TagSelectionOption-d-ts\" class=\"headerlink\" title=\"TagSelectionOption.d.ts\"></a>TagSelectionOption.d.ts</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface ITagSelectOptionProps &#123;</span><br><span class=\"line\">  value: string | number;</span><br><span class=\"line\">  style?: React.CSSProperties;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TagSelectOption</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">ITagSelectOptionProps</span>, <span class=\"title\">any</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"index-d-ts\"><a href=\"#index-d-ts\" class=\"headerlink\" title=\"index.d.ts\"></a>index.d.ts</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TagSelectOption <span class=\"keyword\">from</span> <span class=\"string\">'./TagSelectOption'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface ITagSelectProps &#123;</span><br><span class=\"line\">    onChange?: <span class=\"function\">(<span class=\"params\">value: string[]</span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    expandable?: boolean;</span><br><span class=\"line\">    value?: string[] | number[];</span><br><span class=\"line\">    style?: React.CSSProperties;</span><br><span class=\"line\">    hideCheckAll?: boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TagSelect</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">ITagSelectProps</span>, <span class=\"title\">any</span>&gt;</span>&#123;</span><br><span class=\"line\">    public <span class=\"keyword\">static</span> Option: <span class=\"keyword\">typeof</span> TagSelectOption</span><br><span class=\"line\">    private children:</span><br><span class=\"line\">        | React.ReactElement&lt;TagSelection&gt;</span><br><span class=\"line\">        | <span class=\"built_in\">Array</span>&lt;React.ReactElement&lt;TagSeletion&gt;&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TagSelect</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"TagSelectionOption-d-ts\"><a href=\"#TagSelectionOption-d-ts\" class=\"headerlink\" title=\"TagSelectionOption.d.ts\"></a>TagSelectionOption.d.ts</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface ITagSelectOptionProps &#123;</span><br><span class=\"line\">  value: string | number;</span><br><span class=\"line\">  style?: React.CSSProperties;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TagSelectOption</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">ITagSelectOptionProps</span>, <span class=\"title\">any</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"index-d-ts\"><a href=\"#index-d-ts\" class=\"headerlink\" title=\"index.d.ts\"></a>index.d.ts</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TagSelectOption <span class=\"keyword\">from</span> <span class=\"string\">'./TagSelectOption'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface ITagSelectProps &#123;</span><br><span class=\"line\">    onChange?: <span class=\"function\">(<span class=\"params\">value: string[]</span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    expandable?: boolean;</span><br><span class=\"line\">    value?: string[] | number[];</span><br><span class=\"line\">    style?: React.CSSProperties;</span><br><span class=\"line\">    hideCheckAll?: boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TagSelect</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">ITagSelectProps</span>, <span class=\"title\">any</span>&gt;</span>&#123;</span><br><span class=\"line\">    public <span class=\"keyword\">static</span> Option: <span class=\"keyword\">typeof</span> TagSelectOption</span><br><span class=\"line\">    private children:</span><br><span class=\"line\">        | React.ReactElement&lt;TagSelection&gt;</span><br><span class=\"line\">        | <span class=\"built_in\">Array</span>&lt;React.ReactElement&lt;TagSeletion&gt;&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"antd design pro的用法","date":"2018-09-11T01:43:21.000Z","_content":"\n## antd design pro的用法\nnamespace:\nstate:\neffects: \nreducer:\n\n<!-- more -->\n\n拿回数据需要做的事情：\nmodel中写namespace（全局的state的名字）/state（全局state中的属性）/effects（发起请求拿回数据，触发reducer改变state）/reducer（改变数据）/subscriptions（监控路由的变化,键盘输入，地理位置，返回一个函数）\nmock中写这个请求对应的数据。在mock中对接收的数据，及返回的数据进行处理，再将最终的结果进行返回。\nservice中写用request发起这个请求，返回数据\n\n```javascript\n// 监控各种变化\nsubscriptions{\n    setup({ dispatch,history }) {// 方法名可以随便定义，当监听有变化的时候就会依次执行这的变化\n        \n        return history.listen(({ pathname, search,query }) => {// 表示路由变化时，执行以下语句\n            //console.log(`query = ${JSON.stringify(query)}`);\n            \n            if(pathname.indexOf('/list/table-list')>=0){\n            \n            const {page=1 , name,category:type}  = query;\n            console.log('page = ',page, ' , name = ',name,',type =',type,);\n            dispatch({type:'fetch',payload:{page,name,type,from:'unchecks','status':'EXAMINE'}});\n            }else if(pathname.indexOf('/list/basic-list')>=0){\n            const {page=1 , name,category:type}  = query;\n            dispatch({type:'fetch',payload:{page,name,type,from:'tracks',}});\n            }else if(pathname.indexOf('/list/card-list')>=0){\n            const {page=1 , name,category:type}  = query;\n            dispatch({type:'fetch',payload:{page,name,type,from:'rolleds','status':'FINISH'}});\n            }\n        });\n    }\n\n    setup({ dispatch, history }) {  // 这里的方法名可以随便命名，当监听有变化的时候就会依次执行这的变化\n        window.onresize = () => {   //这里表示的当浏览器的页面的大小变化时就会触发里面的dispatch方法\n            dispatch (type:\"save\")        \n        }\n},\n```\n\n1. `state`定义初始状态，\n`reducer`定义相关函数，来修改状态。\n```javascript\n    export default {\n        namespace: '名字',\n        state: '初始状态' & {resultCode,resultMsg},\n        reducer: {\n            updateState(state, {payload})\n        }\n    }\n```\n\n2. `effects`描述当前发生的事情，是改变state的方法。若需要发起请求后，再改变状态，需要在effects定义的函数中发起请求。请求后返回的参数传递到put函数中，触发reducer，进而修改状态。\n```javascript\n    effects: {\n        *fetchRes(_, { call, put}){\n            const res = yield call(请求函数,[请求参数]);\n            yield put({\n                type:'updateState',\n                payload: res\n            })\n        }\n    }\n```\n> 请求函数放在`service`文件夹中，通过封装的request的函数向mock发起请求。\n```javascript\n    // mock/~.js\n    const getNotice = (req, res) => {\n        res.json([{\n            uname:'haha',\n            des:'你好'\n        }])\n    }\n    export default {\n        'GET /api/···': getNotices,\n    };\n\n    // service/api \n    export async function query(params){\n        // 带参数的get请求\n        return request(`/api/···${strinify(params)}`)\n        // post请求\n        return request('/api/···', {\n            method: 'POST',\n            body: params\n        })\n    }\n\n    // utils/request\n    export default function request(url, options){\n        ~~~\n    }\n```\n\n3. effects只是描述这件事情发生后的情况，并没有触发。所以在视图组件中，需要通过`dispatch`({\n    type: ''\n})\n的方法，触发当前发生的事情，然后执行2中的顺序，待状态修改完成，会自动渲染到视图中形成新的数据状态。想要调用`dispatch`需要加上connect\n```javascript\n    componentDidMount(){\n        const { dispatch } = this.props;\n        dispatch({\n            type:namespace+'/'+effects中的描述事件的方法\n        })\n    }\n```\n\n4. 重要的一点是，若想在视图中使用state，并更改state，也就是把model和组件串起来，需要用到`@connect`，是connect的装饰器，在外面包裹了一层state。\n```javascript\n    @connect(( profile, loading )=>({\n        profile,\n        loading: loading.effects[namespace+'/'+effects中的描述事件的方法]\n    }))\n```\nconnect里面的参数，是全局里面的state，将全局state注入到当前的组件中，当前组件用this.props取出。\nloading属性是加载时调用此请求\n\n> 总结：model的流程大致是 store(View -> effects -> reducer -> state -> view)  \n关于发送请求的流程是 view -> sevice发起请求 -> mock返回数据 -> model更改状态 -> view\n\n## 菜单栏 导航信息\n左侧菜单栏文字信息修改：zh-CN.js（中文配置）\n右上头部信息更改： componennts - GlobalHeader - RightContent.js\n右上铃铛通知：ZComponent - MyNotifyIcon.js\n面包屑导航：components - PageHeaderWrapper - index.js\n            修改breadcrumbList的参数 [{title:'', name: '', href: ''}]\n\n## 点击跳转 传参\n```javascript\nimport {routerRedux} from 'dva/router'\n    const {dispatch} = this.props;\n    dispatch(routerRedux.push({pathname:'/profile/advanced', params/query/search: `参数`}));\n```\n有两种跳转方式：\n第一种是 import { routerRedux } from 'dva/router';\n第二种是 import  router  from 'umi/router';\n`router.push({pathname:路径,params/query/search:参数) = dispatch(routerRedux.push({pathname:路径,params/query/search:参数}))`\n\n```javascript\nrouter.go(n) \n//这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)\nrouter.push(location) \n//想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。\nrouter.replace(location) \n//跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。\n```\n\n`跳转前确认：有一个生命周期钩子：routerWillLeave(){}`\n\nBrowser History：地址形式https://xxx.com/ccc/cc/,  访问指定url\nHash History: 地址形式https://xxx.com/#/ccc/cc, 以 # 后面的路径进行处理\n\n>react-router官方推荐使用browserHistory\n首先 browserHistory 其实使用的是 HTML5 的 History API，浏览器提供相应的接口来修改浏览器的历史记录；而 hashHistory 是通过改变地址后面的 hash 来改变浏览器的历史记录；\n\nHistory API 提供了 pushState() 和 replaceState() 方法来增加或替换历史记录。而 hash 没有相应的方法，所以并没有替换历史记录的功能。但 react-router 通过 polyfill 实现了此功能，具体实现没有看，好像是使用 sessionStorage。\n\n另一个原因是 hash 部分并不会被浏览器发送到服务端，也就是说不管是请求 http://domain.com/index.html#foo 还是 http://domain.com/index.html#bar ，服务只知道请求了 index.html 并不知道 hash 部分的细节。而 History API 需要服务端支持，这样服务端能获取请求细节。\n>\n\n还有一个原因是因为有些应该会忽略 URL 中的 hash 部分，记得之前将 URL 使用微信分享时会丢失 hash 部分。\n\n## 表格组件\n进行筛选功能时，用onFilter过滤掉不需要的数据，不需要的数据返回false。对时间的顺序进行sorter排序，用两个参数，对需要排序的列进行大小加减。\n\n## webpack打包`yarn run analyze`\n```\nyarn run analyze\n```\n查看项目打包各个模块的体积\n\n## pureComponent和Component\npureComponent的相当于把Component中的shouldComponentUpdate()钩子函数进行了二次封装，进行了浅比较，当数据相同时就不会重新渲染数据了。\n用原生的shouldComponentUpdate()通过返回return false阻止render渲染。一般与与第三方的immutable.js库连用，保证数据的唯一性。\n\n## 高阶组件\n高阶组件就是没有副作用的纯函数，且该函数接受一个组件作为参数，并返回一个新的组件。最主要的作用是重用组件逻辑。最好是能用父组件就用父组件，因为高阶组件是一种更hack的方法，更具灵活性。\n区别：父组件可以在元素树上任意使用，高阶组件只应用于一个组件。\n> 高阶组件的用途两点：属性代理和反向继承。通过调用不断将需要的参数传递进去，内部是函数式编程规范进行处理的。\n\n## 关于&&\n1 && 4：返回4\n0 && 4：返回0\n这两个执行语句并不直接返回true或false，如果两边的值为boolean类型，那就返回bool类型的值。\n\n## 设置代理\nconfig.js中设置代理\n```javascript\n    publicPath: \"http://static.wanxiangzc.com/web/shinva/\",\n    base: \"/shinva\",\n    history: \"hash\",//改为hash history的方式（默认browserHistory）\n    hash: true,\n    proxy: {\n        \"/api\": {\n        \"target\": \"http://192.168.2.37:8080/api/\",\n        \"changeOrigin\": true,//（必须）实现跨域\n        \"pathRewrite\": { \"^/api\" : \"\" }\n    }\n  }\n```\n\n疑难：父元素如何禁止子元素的事件？\n事件捕获： addEventListener('事件名',funciton(e){e.stop..;e,prevent..}, true)\n\n### react组件：父元素嵌套子元素，子元素路由不一样。\n> 将子路由写在父路由的routes中，在父组件中用props获取children，组件中直接使用{children}即可。\n\n## 404路由组件必须放在最下面\n","source":"_posts/antd-design-pro的用法.md","raw":"---\ntitle: antd design pro的用法\ndate: 2018-09-11 9:43:21\ntags: \n- react\ncategories:\n- 前端框架 \n---\n\n## antd design pro的用法\nnamespace:\nstate:\neffects: \nreducer:\n\n<!-- more -->\n\n拿回数据需要做的事情：\nmodel中写namespace（全局的state的名字）/state（全局state中的属性）/effects（发起请求拿回数据，触发reducer改变state）/reducer（改变数据）/subscriptions（监控路由的变化,键盘输入，地理位置，返回一个函数）\nmock中写这个请求对应的数据。在mock中对接收的数据，及返回的数据进行处理，再将最终的结果进行返回。\nservice中写用request发起这个请求，返回数据\n\n```javascript\n// 监控各种变化\nsubscriptions{\n    setup({ dispatch,history }) {// 方法名可以随便定义，当监听有变化的时候就会依次执行这的变化\n        \n        return history.listen(({ pathname, search,query }) => {// 表示路由变化时，执行以下语句\n            //console.log(`query = ${JSON.stringify(query)}`);\n            \n            if(pathname.indexOf('/list/table-list')>=0){\n            \n            const {page=1 , name,category:type}  = query;\n            console.log('page = ',page, ' , name = ',name,',type =',type,);\n            dispatch({type:'fetch',payload:{page,name,type,from:'unchecks','status':'EXAMINE'}});\n            }else if(pathname.indexOf('/list/basic-list')>=0){\n            const {page=1 , name,category:type}  = query;\n            dispatch({type:'fetch',payload:{page,name,type,from:'tracks',}});\n            }else if(pathname.indexOf('/list/card-list')>=0){\n            const {page=1 , name,category:type}  = query;\n            dispatch({type:'fetch',payload:{page,name,type,from:'rolleds','status':'FINISH'}});\n            }\n        });\n    }\n\n    setup({ dispatch, history }) {  // 这里的方法名可以随便命名，当监听有变化的时候就会依次执行这的变化\n        window.onresize = () => {   //这里表示的当浏览器的页面的大小变化时就会触发里面的dispatch方法\n            dispatch (type:\"save\")        \n        }\n},\n```\n\n1. `state`定义初始状态，\n`reducer`定义相关函数，来修改状态。\n```javascript\n    export default {\n        namespace: '名字',\n        state: '初始状态' & {resultCode,resultMsg},\n        reducer: {\n            updateState(state, {payload})\n        }\n    }\n```\n\n2. `effects`描述当前发生的事情，是改变state的方法。若需要发起请求后，再改变状态，需要在effects定义的函数中发起请求。请求后返回的参数传递到put函数中，触发reducer，进而修改状态。\n```javascript\n    effects: {\n        *fetchRes(_, { call, put}){\n            const res = yield call(请求函数,[请求参数]);\n            yield put({\n                type:'updateState',\n                payload: res\n            })\n        }\n    }\n```\n> 请求函数放在`service`文件夹中，通过封装的request的函数向mock发起请求。\n```javascript\n    // mock/~.js\n    const getNotice = (req, res) => {\n        res.json([{\n            uname:'haha',\n            des:'你好'\n        }])\n    }\n    export default {\n        'GET /api/···': getNotices,\n    };\n\n    // service/api \n    export async function query(params){\n        // 带参数的get请求\n        return request(`/api/···${strinify(params)}`)\n        // post请求\n        return request('/api/···', {\n            method: 'POST',\n            body: params\n        })\n    }\n\n    // utils/request\n    export default function request(url, options){\n        ~~~\n    }\n```\n\n3. effects只是描述这件事情发生后的情况，并没有触发。所以在视图组件中，需要通过`dispatch`({\n    type: ''\n})\n的方法，触发当前发生的事情，然后执行2中的顺序，待状态修改完成，会自动渲染到视图中形成新的数据状态。想要调用`dispatch`需要加上connect\n```javascript\n    componentDidMount(){\n        const { dispatch } = this.props;\n        dispatch({\n            type:namespace+'/'+effects中的描述事件的方法\n        })\n    }\n```\n\n4. 重要的一点是，若想在视图中使用state，并更改state，也就是把model和组件串起来，需要用到`@connect`，是connect的装饰器，在外面包裹了一层state。\n```javascript\n    @connect(( profile, loading )=>({\n        profile,\n        loading: loading.effects[namespace+'/'+effects中的描述事件的方法]\n    }))\n```\nconnect里面的参数，是全局里面的state，将全局state注入到当前的组件中，当前组件用this.props取出。\nloading属性是加载时调用此请求\n\n> 总结：model的流程大致是 store(View -> effects -> reducer -> state -> view)  \n关于发送请求的流程是 view -> sevice发起请求 -> mock返回数据 -> model更改状态 -> view\n\n## 菜单栏 导航信息\n左侧菜单栏文字信息修改：zh-CN.js（中文配置）\n右上头部信息更改： componennts - GlobalHeader - RightContent.js\n右上铃铛通知：ZComponent - MyNotifyIcon.js\n面包屑导航：components - PageHeaderWrapper - index.js\n            修改breadcrumbList的参数 [{title:'', name: '', href: ''}]\n\n## 点击跳转 传参\n```javascript\nimport {routerRedux} from 'dva/router'\n    const {dispatch} = this.props;\n    dispatch(routerRedux.push({pathname:'/profile/advanced', params/query/search: `参数`}));\n```\n有两种跳转方式：\n第一种是 import { routerRedux } from 'dva/router';\n第二种是 import  router  from 'umi/router';\n`router.push({pathname:路径,params/query/search:参数) = dispatch(routerRedux.push({pathname:路径,params/query/search:参数}))`\n\n```javascript\nrouter.go(n) \n//这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)\nrouter.push(location) \n//想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。\nrouter.replace(location) \n//跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。\n```\n\n`跳转前确认：有一个生命周期钩子：routerWillLeave(){}`\n\nBrowser History：地址形式https://xxx.com/ccc/cc/,  访问指定url\nHash History: 地址形式https://xxx.com/#/ccc/cc, 以 # 后面的路径进行处理\n\n>react-router官方推荐使用browserHistory\n首先 browserHistory 其实使用的是 HTML5 的 History API，浏览器提供相应的接口来修改浏览器的历史记录；而 hashHistory 是通过改变地址后面的 hash 来改变浏览器的历史记录；\n\nHistory API 提供了 pushState() 和 replaceState() 方法来增加或替换历史记录。而 hash 没有相应的方法，所以并没有替换历史记录的功能。但 react-router 通过 polyfill 实现了此功能，具体实现没有看，好像是使用 sessionStorage。\n\n另一个原因是 hash 部分并不会被浏览器发送到服务端，也就是说不管是请求 http://domain.com/index.html#foo 还是 http://domain.com/index.html#bar ，服务只知道请求了 index.html 并不知道 hash 部分的细节。而 History API 需要服务端支持，这样服务端能获取请求细节。\n>\n\n还有一个原因是因为有些应该会忽略 URL 中的 hash 部分，记得之前将 URL 使用微信分享时会丢失 hash 部分。\n\n## 表格组件\n进行筛选功能时，用onFilter过滤掉不需要的数据，不需要的数据返回false。对时间的顺序进行sorter排序，用两个参数，对需要排序的列进行大小加减。\n\n## webpack打包`yarn run analyze`\n```\nyarn run analyze\n```\n查看项目打包各个模块的体积\n\n## pureComponent和Component\npureComponent的相当于把Component中的shouldComponentUpdate()钩子函数进行了二次封装，进行了浅比较，当数据相同时就不会重新渲染数据了。\n用原生的shouldComponentUpdate()通过返回return false阻止render渲染。一般与与第三方的immutable.js库连用，保证数据的唯一性。\n\n## 高阶组件\n高阶组件就是没有副作用的纯函数，且该函数接受一个组件作为参数，并返回一个新的组件。最主要的作用是重用组件逻辑。最好是能用父组件就用父组件，因为高阶组件是一种更hack的方法，更具灵活性。\n区别：父组件可以在元素树上任意使用，高阶组件只应用于一个组件。\n> 高阶组件的用途两点：属性代理和反向继承。通过调用不断将需要的参数传递进去，内部是函数式编程规范进行处理的。\n\n## 关于&&\n1 && 4：返回4\n0 && 4：返回0\n这两个执行语句并不直接返回true或false，如果两边的值为boolean类型，那就返回bool类型的值。\n\n## 设置代理\nconfig.js中设置代理\n```javascript\n    publicPath: \"http://static.wanxiangzc.com/web/shinva/\",\n    base: \"/shinva\",\n    history: \"hash\",//改为hash history的方式（默认browserHistory）\n    hash: true,\n    proxy: {\n        \"/api\": {\n        \"target\": \"http://192.168.2.37:8080/api/\",\n        \"changeOrigin\": true,//（必须）实现跨域\n        \"pathRewrite\": { \"^/api\" : \"\" }\n    }\n  }\n```\n\n疑难：父元素如何禁止子元素的事件？\n事件捕获： addEventListener('事件名',funciton(e){e.stop..;e,prevent..}, true)\n\n### react组件：父元素嵌套子元素，子元素路由不一样。\n> 将子路由写在父路由的routes中，在父组件中用props获取children，组件中直接使用{children}即可。\n\n## 404路由组件必须放在最下面\n","slug":"antd-design-pro的用法","published":1,"updated":"2019-03-12T04:22:48.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovb000rg8rxutoruhdr","content":"<h2 id=\"antd-design-pro的用法\"><a href=\"#antd-design-pro的用法\" class=\"headerlink\" title=\"antd design pro的用法\"></a>antd design pro的用法</h2><p>namespace:<br>state:<br>effects:<br>reducer:</p>\n<a id=\"more\"></a>\n<p>拿回数据需要做的事情：<br>model中写namespace（全局的state的名字）/state（全局state中的属性）/effects（发起请求拿回数据，触发reducer改变state）/reducer（改变数据）/subscriptions（监控路由的变化,键盘输入，地理位置，返回一个函数）<br>mock中写这个请求对应的数据。在mock中对接收的数据，及返回的数据进行处理，再将最终的结果进行返回。<br>service中写用request发起这个请求，返回数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监控各种变化</span></span><br><span class=\"line\">subscriptions&#123;</span><br><span class=\"line\">    setup(&#123; dispatch,history &#125;) &#123;<span class=\"comment\">// 方法名可以随便定义，当监听有变化的时候就会依次执行这的变化</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> history.listen(<span class=\"function\">(<span class=\"params\">&#123; pathname, search,query &#125;</span>) =&gt;</span> &#123;<span class=\"comment\">// 表示路由变化时，执行以下语句</span></span><br><span class=\"line\">            <span class=\"comment\">//console.log(`query = $&#123;JSON.stringify(query)&#125;`);</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pathname.indexOf(<span class=\"string\">'/list/table-list'</span>)&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123;page=<span class=\"number\">1</span> , name,<span class=\"attr\">category</span>:type&#125;  = query;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'page = '</span>,page, <span class=\"string\">' , name = '</span>,name,<span class=\"string\">',type ='</span>,type,);</span><br><span class=\"line\">            dispatch(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'fetch'</span>,<span class=\"attr\">payload</span>:&#123;page,name,type,<span class=\"attr\">from</span>:<span class=\"string\">'unchecks'</span>,<span class=\"string\">'status'</span>:<span class=\"string\">'EXAMINE'</span>&#125;&#125;);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pathname.indexOf(<span class=\"string\">'/list/basic-list'</span>)&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123;page=<span class=\"number\">1</span> , name,<span class=\"attr\">category</span>:type&#125;  = query;</span><br><span class=\"line\">            dispatch(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'fetch'</span>,<span class=\"attr\">payload</span>:&#123;page,name,type,<span class=\"attr\">from</span>:<span class=\"string\">'tracks'</span>,&#125;&#125;);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pathname.indexOf(<span class=\"string\">'/list/card-list'</span>)&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123;page=<span class=\"number\">1</span> , name,<span class=\"attr\">category</span>:type&#125;  = query;</span><br><span class=\"line\">            dispatch(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'fetch'</span>,<span class=\"attr\">payload</span>:&#123;page,name,type,<span class=\"attr\">from</span>:<span class=\"string\">'rolleds'</span>,<span class=\"string\">'status'</span>:<span class=\"string\">'FINISH'</span>&#125;&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setup(&#123; dispatch, history &#125;) &#123;  <span class=\"comment\">// 这里的方法名可以随便命名，当监听有变化的时候就会依次执行这的变化</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.onresize = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;   <span class=\"comment\">//这里表示的当浏览器的页面的大小变化时就会触发里面的dispatch方法</span></span><br><span class=\"line\">            dispatch (type:<span class=\"string\">\"save\"</span>)        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p><code>state</code>定义初始状态，<br><code>reducer</code>定义相关函数，来修改状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    namespace: <span class=\"string\">'名字'</span>,</span><br><span class=\"line\">    state: <span class=\"string\">'初始状态'</span> &amp; &#123;resultCode,resultMsg&#125;,</span><br><span class=\"line\">    reducer: &#123;</span><br><span class=\"line\">        updateState(state, &#123;payload&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>effects</code>描述当前发生的事情，是改变state的方法。若需要发起请求后，再改变状态，需要在effects定义的函数中发起请求。请求后返回的参数传递到put函数中，触发reducer，进而修改状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">effects: &#123;</span><br><span class=\"line\">    *fetchRes(_, &#123; call, put&#125;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = <span class=\"keyword\">yield</span> call(请求函数,[请求参数]);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">            type:<span class=\"string\">'updateState'</span>,</span><br><span class=\"line\">            payload: res</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>请求函数放在<code>service</code>文件夹中，通过封装的request的函数向mock发起请求。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mock/~.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getNotice = <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.json([&#123;</span><br><span class=\"line\">        uname:<span class=\"string\">'haha'</span>,</span><br><span class=\"line\">        des:<span class=\"string\">'你好'</span></span><br><span class=\"line\">    &#125;])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">'GET /api/···'</span>: getNotices,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// service/api </span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span>(<span class=\"params\">params</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 带参数的get请求</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> request(<span class=\"string\">`/api/···<span class=\"subst\">$&#123;strinify(params)&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"comment\">// post请求</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> request(<span class=\"string\">'/api/···'</span>, &#123;</span><br><span class=\"line\">        method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">        body: params</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// utils/request</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url, options</span>)</span>&#123;</span><br><span class=\"line\">    ~~~</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ol start=\"3\">\n<li><p>effects只是描述这件事情发生后的情况，并没有触发。所以在视图组件中，需要通过<code>dispatch</code>({<br> type: ‘’<br>})<br>的方法，触发当前发生的事情，然后执行2中的顺序，待状态修改完成，会自动渲染到视图中形成新的数据状态。想要调用<code>dispatch</code>需要加上connect</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; dispatch &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">        type:namespace+<span class=\"string\">'/'</span>+effects中的描述事件的方法</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重要的一点是，若想在视图中使用state，并更改state，也就是把model和组件串起来，需要用到<code>@connect</code>，是connect的装饰器，在外面包裹了一层state。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@connect(<span class=\"function\">(<span class=\"params\"> profile, loading </span>)=&gt;</span>(&#123;</span><br><span class=\"line\">    profile,</span><br><span class=\"line\">    loading: loading.effects[namespace+<span class=\"string\">'/'</span>+effects中的描述事件的方法]</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>connect里面的参数，是全局里面的state，将全局state注入到当前的组件中，当前组件用this.props取出。<br>loading属性是加载时调用此请求</p>\n<blockquote>\n<p>总结：model的流程大致是 store(View -&gt; effects -&gt; reducer -&gt; state -&gt; view)<br>关于发送请求的流程是 view -&gt; sevice发起请求 -&gt; mock返回数据 -&gt; model更改状态 -&gt; view</p>\n</blockquote>\n<h2 id=\"菜单栏-导航信息\"><a href=\"#菜单栏-导航信息\" class=\"headerlink\" title=\"菜单栏 导航信息\"></a>菜单栏 导航信息</h2><p>左侧菜单栏文字信息修改：zh-CN.js（中文配置）<br>右上头部信息更改： componennts - GlobalHeader - RightContent.js<br>右上铃铛通知：ZComponent - MyNotifyIcon.js<br>面包屑导航：components - PageHeaderWrapper - index.js<br>            修改breadcrumbList的参数 [{title:’’, name: ‘’, href: ‘’}]</p>\n<h2 id=\"点击跳转-传参\"><a href=\"#点击跳转-传参\" class=\"headerlink\" title=\"点击跳转 传参\"></a>点击跳转 传参</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;routerRedux&#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva/router'</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;dispatch&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    dispatch(routerRedux.push(&#123;<span class=\"attr\">pathname</span>:<span class=\"string\">'/profile/advanced'</span>, params/query/search: <span class=\"string\">`参数`</span>&#125;));</span><br></pre></td></tr></table></figure>\n<p>有两种跳转方式：<br>第一种是 import { routerRedux } from ‘dva/router’;<br>第二种是 import  router  from ‘umi/router’;<br><code>router.push({pathname:路径,params/query/search:参数) = dispatch(routerRedux.push({pathname:路径,params/query/search:参数}))</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.go(n) </span><br><span class=\"line\"><span class=\"comment\">//这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)</span></span><br><span class=\"line\">router.push(location) </span><br><span class=\"line\"><span class=\"comment\">//想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</span></span><br><span class=\"line\">router.replace(location) </span><br><span class=\"line\"><span class=\"comment\">//跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</span></span><br></pre></td></tr></table></figure>\n<p><code>跳转前确认：有一个生命周期钩子：routerWillLeave(){}</code></p>\n<p>Browser History：地址形式<a href=\"https://xxx.com/ccc/cc/\" target=\"_blank\" rel=\"noopener\">https://xxx.com/ccc/cc/</a>,  访问指定url<br>Hash History: 地址形式<a href=\"https://xxx.com/#/ccc/cc\" target=\"_blank\" rel=\"noopener\">https://xxx.com/#/ccc/cc</a>, 以 # 后面的路径进行处理</p>\n<blockquote>\n<p>react-router官方推荐使用browserHistory<br>首先 browserHistory 其实使用的是 HTML5 的 History API，浏览器提供相应的接口来修改浏览器的历史记录；而 hashHistory 是通过改变地址后面的 hash 来改变浏览器的历史记录；</p>\n</blockquote>\n<p>History API 提供了 pushState() 和 replaceState() 方法来增加或替换历史记录。而 hash 没有相应的方法，所以并没有替换历史记录的功能。但 react-router 通过 polyfill 实现了此功能，具体实现没有看，好像是使用 sessionStorage。</p>\n<p>另一个原因是 hash 部分并不会被浏览器发送到服务端，也就是说不管是请求 <a href=\"http://domain.com/index.html#foo\" target=\"_blank\" rel=\"noopener\">http://domain.com/index.html#foo</a> 还是 <a href=\"http://domain.com/index.html#bar\" target=\"_blank\" rel=\"noopener\">http://domain.com/index.html#bar</a> ，服务只知道请求了 index.html 并不知道 hash 部分的细节。而 History API 需要服务端支持，这样服务端能获取请求细节。</p>\n<blockquote>\n</blockquote>\n<p>还有一个原因是因为有些应该会忽略 URL 中的 hash 部分，记得之前将 URL 使用微信分享时会丢失 hash 部分。</p>\n<h2 id=\"表格组件\"><a href=\"#表格组件\" class=\"headerlink\" title=\"表格组件\"></a>表格组件</h2><p>进行筛选功能时，用onFilter过滤掉不需要的数据，不需要的数据返回false。对时间的顺序进行sorter排序，用两个参数，对需要排序的列进行大小加减。</p>\n<h2 id=\"webpack打包yarn-run-analyze\"><a href=\"#webpack打包yarn-run-analyze\" class=\"headerlink\" title=\"webpack打包yarn run analyze\"></a>webpack打包<code>yarn run analyze</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run analyze</span><br></pre></td></tr></table></figure>\n<p>查看项目打包各个模块的体积</p>\n<h2 id=\"pureComponent和Component\"><a href=\"#pureComponent和Component\" class=\"headerlink\" title=\"pureComponent和Component\"></a>pureComponent和Component</h2><p>pureComponent的相当于把Component中的shouldComponentUpdate()钩子函数进行了二次封装，进行了浅比较，当数据相同时就不会重新渲染数据了。<br>用原生的shouldComponentUpdate()通过返回return false阻止render渲染。一般与与第三方的immutable.js库连用，保证数据的唯一性。</p>\n<h2 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a>高阶组件</h2><p>高阶组件就是没有副作用的纯函数，且该函数接受一个组件作为参数，并返回一个新的组件。最主要的作用是重用组件逻辑。最好是能用父组件就用父组件，因为高阶组件是一种更hack的方法，更具灵活性。<br>区别：父组件可以在元素树上任意使用，高阶组件只应用于一个组件。</p>\n<blockquote>\n<p>高阶组件的用途两点：属性代理和反向继承。通过调用不断将需要的参数传递进去，内部是函数式编程规范进行处理的。</p>\n</blockquote>\n<h2 id=\"关于-amp-amp\"><a href=\"#关于-amp-amp\" class=\"headerlink\" title=\"关于&amp;&amp;\"></a>关于&amp;&amp;</h2><p>1 &amp;&amp; 4：返回4<br>0 &amp;&amp; 4：返回0<br>这两个执行语句并不直接返回true或false，如果两边的值为boolean类型，那就返回bool类型的值。</p>\n<h2 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h2><p>config.js中设置代理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  publicPath: <span class=\"string\">\"http://static.wanxiangzc.com/web/shinva/\"</span>,</span><br><span class=\"line\">  base: <span class=\"string\">\"/shinva\"</span>,</span><br><span class=\"line\">  history: <span class=\"string\">\"hash\"</span>,<span class=\"comment\">//改为hash history的方式（默认browserHistory）</span></span><br><span class=\"line\">  hash: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"/api\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"target\"</span>: <span class=\"string\">\"http://192.168.2.37:8080/api/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"changeOrigin\"</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//（必须）实现跨域</span></span><br><span class=\"line\">      <span class=\"string\">\"pathRewrite\"</span>: &#123; <span class=\"string\">\"^/api\"</span> : <span class=\"string\">\"\"</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>疑难：父元素如何禁止子元素的事件？<br>事件捕获： addEventListener(‘事件名’,funciton(e){e.stop..;e,prevent..}, true)</p>\n<h3 id=\"react组件：父元素嵌套子元素，子元素路由不一样。\"><a href=\"#react组件：父元素嵌套子元素，子元素路由不一样。\" class=\"headerlink\" title=\"react组件：父元素嵌套子元素，子元素路由不一样。\"></a>react组件：父元素嵌套子元素，子元素路由不一样。</h3><blockquote>\n<p>将子路由写在父路由的routes中，在父组件中用props获取children，组件中直接使用{children}即可。</p>\n</blockquote>\n<h2 id=\"404路由组件必须放在最下面\"><a href=\"#404路由组件必须放在最下面\" class=\"headerlink\" title=\"404路由组件必须放在最下面\"></a>404路由组件必须放在最下面</h2>","site":{"data":{}},"excerpt":"<h2 id=\"antd-design-pro的用法\"><a href=\"#antd-design-pro的用法\" class=\"headerlink\" title=\"antd design pro的用法\"></a>antd design pro的用法</h2><p>namespace:<br>state:<br>effects:<br>reducer:</p>","more":"<p>拿回数据需要做的事情：<br>model中写namespace（全局的state的名字）/state（全局state中的属性）/effects（发起请求拿回数据，触发reducer改变state）/reducer（改变数据）/subscriptions（监控路由的变化,键盘输入，地理位置，返回一个函数）<br>mock中写这个请求对应的数据。在mock中对接收的数据，及返回的数据进行处理，再将最终的结果进行返回。<br>service中写用request发起这个请求，返回数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监控各种变化</span></span><br><span class=\"line\">subscriptions&#123;</span><br><span class=\"line\">    setup(&#123; dispatch,history &#125;) &#123;<span class=\"comment\">// 方法名可以随便定义，当监听有变化的时候就会依次执行这的变化</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> history.listen(<span class=\"function\">(<span class=\"params\">&#123; pathname, search,query &#125;</span>) =&gt;</span> &#123;<span class=\"comment\">// 表示路由变化时，执行以下语句</span></span><br><span class=\"line\">            <span class=\"comment\">//console.log(`query = $&#123;JSON.stringify(query)&#125;`);</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pathname.indexOf(<span class=\"string\">'/list/table-list'</span>)&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123;page=<span class=\"number\">1</span> , name,<span class=\"attr\">category</span>:type&#125;  = query;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'page = '</span>,page, <span class=\"string\">' , name = '</span>,name,<span class=\"string\">',type ='</span>,type,);</span><br><span class=\"line\">            dispatch(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'fetch'</span>,<span class=\"attr\">payload</span>:&#123;page,name,type,<span class=\"attr\">from</span>:<span class=\"string\">'unchecks'</span>,<span class=\"string\">'status'</span>:<span class=\"string\">'EXAMINE'</span>&#125;&#125;);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pathname.indexOf(<span class=\"string\">'/list/basic-list'</span>)&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123;page=<span class=\"number\">1</span> , name,<span class=\"attr\">category</span>:type&#125;  = query;</span><br><span class=\"line\">            dispatch(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'fetch'</span>,<span class=\"attr\">payload</span>:&#123;page,name,type,<span class=\"attr\">from</span>:<span class=\"string\">'tracks'</span>,&#125;&#125;);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pathname.indexOf(<span class=\"string\">'/list/card-list'</span>)&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123;page=<span class=\"number\">1</span> , name,<span class=\"attr\">category</span>:type&#125;  = query;</span><br><span class=\"line\">            dispatch(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'fetch'</span>,<span class=\"attr\">payload</span>:&#123;page,name,type,<span class=\"attr\">from</span>:<span class=\"string\">'rolleds'</span>,<span class=\"string\">'status'</span>:<span class=\"string\">'FINISH'</span>&#125;&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setup(&#123; dispatch, history &#125;) &#123;  <span class=\"comment\">// 这里的方法名可以随便命名，当监听有变化的时候就会依次执行这的变化</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.onresize = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;   <span class=\"comment\">//这里表示的当浏览器的页面的大小变化时就会触发里面的dispatch方法</span></span><br><span class=\"line\">            dispatch (type:<span class=\"string\">\"save\"</span>)        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p><code>state</code>定义初始状态，<br><code>reducer</code>定义相关函数，来修改状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    namespace: <span class=\"string\">'名字'</span>,</span><br><span class=\"line\">    state: <span class=\"string\">'初始状态'</span> &amp; &#123;resultCode,resultMsg&#125;,</span><br><span class=\"line\">    reducer: &#123;</span><br><span class=\"line\">        updateState(state, &#123;payload&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>effects</code>描述当前发生的事情，是改变state的方法。若需要发起请求后，再改变状态，需要在effects定义的函数中发起请求。请求后返回的参数传递到put函数中，触发reducer，进而修改状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">effects: &#123;</span><br><span class=\"line\">    *fetchRes(_, &#123; call, put&#125;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = <span class=\"keyword\">yield</span> call(请求函数,[请求参数]);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">            type:<span class=\"string\">'updateState'</span>,</span><br><span class=\"line\">            payload: res</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>请求函数放在<code>service</code>文件夹中，通过封装的request的函数向mock发起请求。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mock/~.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getNotice = <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.json([&#123;</span><br><span class=\"line\">        uname:<span class=\"string\">'haha'</span>,</span><br><span class=\"line\">        des:<span class=\"string\">'你好'</span></span><br><span class=\"line\">    &#125;])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">'GET /api/···'</span>: getNotices,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// service/api </span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span>(<span class=\"params\">params</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 带参数的get请求</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> request(<span class=\"string\">`/api/···<span class=\"subst\">$&#123;strinify(params)&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"comment\">// post请求</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> request(<span class=\"string\">'/api/···'</span>, &#123;</span><br><span class=\"line\">        method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">        body: params</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// utils/request</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url, options</span>)</span>&#123;</span><br><span class=\"line\">    ~~~</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ol start=\"3\">\n<li><p>effects只是描述这件事情发生后的情况，并没有触发。所以在视图组件中，需要通过<code>dispatch</code>({<br> type: ‘’<br>})<br>的方法，触发当前发生的事情，然后执行2中的顺序，待状态修改完成，会自动渲染到视图中形成新的数据状态。想要调用<code>dispatch</code>需要加上connect</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; dispatch &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">        type:namespace+<span class=\"string\">'/'</span>+effects中的描述事件的方法</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重要的一点是，若想在视图中使用state，并更改state，也就是把model和组件串起来，需要用到<code>@connect</code>，是connect的装饰器，在外面包裹了一层state。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@connect(<span class=\"function\">(<span class=\"params\"> profile, loading </span>)=&gt;</span>(&#123;</span><br><span class=\"line\">    profile,</span><br><span class=\"line\">    loading: loading.effects[namespace+<span class=\"string\">'/'</span>+effects中的描述事件的方法]</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>connect里面的参数，是全局里面的state，将全局state注入到当前的组件中，当前组件用this.props取出。<br>loading属性是加载时调用此请求</p>\n<blockquote>\n<p>总结：model的流程大致是 store(View -&gt; effects -&gt; reducer -&gt; state -&gt; view)<br>关于发送请求的流程是 view -&gt; sevice发起请求 -&gt; mock返回数据 -&gt; model更改状态 -&gt; view</p>\n</blockquote>\n<h2 id=\"菜单栏-导航信息\"><a href=\"#菜单栏-导航信息\" class=\"headerlink\" title=\"菜单栏 导航信息\"></a>菜单栏 导航信息</h2><p>左侧菜单栏文字信息修改：zh-CN.js（中文配置）<br>右上头部信息更改： componennts - GlobalHeader - RightContent.js<br>右上铃铛通知：ZComponent - MyNotifyIcon.js<br>面包屑导航：components - PageHeaderWrapper - index.js<br>            修改breadcrumbList的参数 [{title:’’, name: ‘’, href: ‘’}]</p>\n<h2 id=\"点击跳转-传参\"><a href=\"#点击跳转-传参\" class=\"headerlink\" title=\"点击跳转 传参\"></a>点击跳转 传参</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;routerRedux&#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva/router'</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;dispatch&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    dispatch(routerRedux.push(&#123;<span class=\"attr\">pathname</span>:<span class=\"string\">'/profile/advanced'</span>, params/query/search: <span class=\"string\">`参数`</span>&#125;));</span><br></pre></td></tr></table></figure>\n<p>有两种跳转方式：<br>第一种是 import { routerRedux } from ‘dva/router’;<br>第二种是 import  router  from ‘umi/router’;<br><code>router.push({pathname:路径,params/query/search:参数) = dispatch(routerRedux.push({pathname:路径,params/query/search:参数}))</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.go(n) </span><br><span class=\"line\"><span class=\"comment\">//这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)</span></span><br><span class=\"line\">router.push(location) </span><br><span class=\"line\"><span class=\"comment\">//想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</span></span><br><span class=\"line\">router.replace(location) </span><br><span class=\"line\"><span class=\"comment\">//跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</span></span><br></pre></td></tr></table></figure>\n<p><code>跳转前确认：有一个生命周期钩子：routerWillLeave(){}</code></p>\n<p>Browser History：地址形式<a href=\"https://xxx.com/ccc/cc/\" target=\"_blank\" rel=\"noopener\">https://xxx.com/ccc/cc/</a>,  访问指定url<br>Hash History: 地址形式<a href=\"https://xxx.com/#/ccc/cc\" target=\"_blank\" rel=\"noopener\">https://xxx.com/#/ccc/cc</a>, 以 # 后面的路径进行处理</p>\n<blockquote>\n<p>react-router官方推荐使用browserHistory<br>首先 browserHistory 其实使用的是 HTML5 的 History API，浏览器提供相应的接口来修改浏览器的历史记录；而 hashHistory 是通过改变地址后面的 hash 来改变浏览器的历史记录；</p>\n</blockquote>\n<p>History API 提供了 pushState() 和 replaceState() 方法来增加或替换历史记录。而 hash 没有相应的方法，所以并没有替换历史记录的功能。但 react-router 通过 polyfill 实现了此功能，具体实现没有看，好像是使用 sessionStorage。</p>\n<p>另一个原因是 hash 部分并不会被浏览器发送到服务端，也就是说不管是请求 <a href=\"http://domain.com/index.html#foo\" target=\"_blank\" rel=\"noopener\">http://domain.com/index.html#foo</a> 还是 <a href=\"http://domain.com/index.html#bar\" target=\"_blank\" rel=\"noopener\">http://domain.com/index.html#bar</a> ，服务只知道请求了 index.html 并不知道 hash 部分的细节。而 History API 需要服务端支持，这样服务端能获取请求细节。</p>\n<blockquote>\n</blockquote>\n<p>还有一个原因是因为有些应该会忽略 URL 中的 hash 部分，记得之前将 URL 使用微信分享时会丢失 hash 部分。</p>\n<h2 id=\"表格组件\"><a href=\"#表格组件\" class=\"headerlink\" title=\"表格组件\"></a>表格组件</h2><p>进行筛选功能时，用onFilter过滤掉不需要的数据，不需要的数据返回false。对时间的顺序进行sorter排序，用两个参数，对需要排序的列进行大小加减。</p>\n<h2 id=\"webpack打包yarn-run-analyze\"><a href=\"#webpack打包yarn-run-analyze\" class=\"headerlink\" title=\"webpack打包yarn run analyze\"></a>webpack打包<code>yarn run analyze</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run analyze</span><br></pre></td></tr></table></figure>\n<p>查看项目打包各个模块的体积</p>\n<h2 id=\"pureComponent和Component\"><a href=\"#pureComponent和Component\" class=\"headerlink\" title=\"pureComponent和Component\"></a>pureComponent和Component</h2><p>pureComponent的相当于把Component中的shouldComponentUpdate()钩子函数进行了二次封装，进行了浅比较，当数据相同时就不会重新渲染数据了。<br>用原生的shouldComponentUpdate()通过返回return false阻止render渲染。一般与与第三方的immutable.js库连用，保证数据的唯一性。</p>\n<h2 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a>高阶组件</h2><p>高阶组件就是没有副作用的纯函数，且该函数接受一个组件作为参数，并返回一个新的组件。最主要的作用是重用组件逻辑。最好是能用父组件就用父组件，因为高阶组件是一种更hack的方法，更具灵活性。<br>区别：父组件可以在元素树上任意使用，高阶组件只应用于一个组件。</p>\n<blockquote>\n<p>高阶组件的用途两点：属性代理和反向继承。通过调用不断将需要的参数传递进去，内部是函数式编程规范进行处理的。</p>\n</blockquote>\n<h2 id=\"关于-amp-amp\"><a href=\"#关于-amp-amp\" class=\"headerlink\" title=\"关于&amp;&amp;\"></a>关于&amp;&amp;</h2><p>1 &amp;&amp; 4：返回4<br>0 &amp;&amp; 4：返回0<br>这两个执行语句并不直接返回true或false，如果两边的值为boolean类型，那就返回bool类型的值。</p>\n<h2 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h2><p>config.js中设置代理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  publicPath: <span class=\"string\">\"http://static.wanxiangzc.com/web/shinva/\"</span>,</span><br><span class=\"line\">  base: <span class=\"string\">\"/shinva\"</span>,</span><br><span class=\"line\">  history: <span class=\"string\">\"hash\"</span>,<span class=\"comment\">//改为hash history的方式（默认browserHistory）</span></span><br><span class=\"line\">  hash: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"/api\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"target\"</span>: <span class=\"string\">\"http://192.168.2.37:8080/api/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"changeOrigin\"</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//（必须）实现跨域</span></span><br><span class=\"line\">      <span class=\"string\">\"pathRewrite\"</span>: &#123; <span class=\"string\">\"^/api\"</span> : <span class=\"string\">\"\"</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>疑难：父元素如何禁止子元素的事件？<br>事件捕获： addEventListener(‘事件名’,funciton(e){e.stop..;e,prevent..}, true)</p>\n<h3 id=\"react组件：父元素嵌套子元素，子元素路由不一样。\"><a href=\"#react组件：父元素嵌套子元素，子元素路由不一样。\" class=\"headerlink\" title=\"react组件：父元素嵌套子元素，子元素路由不一样。\"></a>react组件：父元素嵌套子元素，子元素路由不一样。</h3><blockquote>\n<p>将子路由写在父路由的routes中，在父组件中用props获取children，组件中直接使用{children}即可。</p>\n</blockquote>\n<h2 id=\"404路由组件必须放在最下面\"><a href=\"#404路由组件必须放在最下面\" class=\"headerlink\" title=\"404路由组件必须放在最下面\"></a>404路由组件必须放在最下面</h2>"},{"title":"git和vscode安装文档","date":"2018-02-11T01:45:45.000Z","_content":"\n## node\n`https://nodejs.org/zh-cn/download/`\n\n## git\n`https://git-scm.com/downloads`\n\n<!-- more -->\n## npm-cnpm-yarn-tyarn\n```\nnpm -v\n\nnpm install cnpm -g --registry=https://registry.npm.taobao.org\ncnpm -v\n\ncnpm install yarn tyarn -g\nyarn -v\ntyarn -v\n```\n\n## visual studio code\n`https://visualstudio.microsoft.com/zh-hans/downloads/`\n\n1. 插件：\n```\nAuto Close Tag\nAuto Complete Tag\nAuto Rename Tag\nBeautify\nChinese (Simplified) Language\nES7 React/Redux/GraphQL/React-Native snippets\nGit History\nGitLens -Git supercharged\nHTML CSS Support\nHTML Snippets\nnpm Intellisense\nPath Intellisense\nReact/Redux/react-router Snippets\nReactjs code snippets\n```\n\n2. 设置：setting.json\n```json\n{\n    \"workbench.editor.enablePreview\": false,\n    \"git.ignoreMissingGitWarning\": true,\n    \"editor.fontSize\": 18,\n    \"window.zoomLevel\": 1,\n    \"git.path\": \"D:\\\\git\\\\Git\\\\bin\\\\git.exe\",\n    \"emmet.includeLanguages\": {\n        \"javascript\": \"javascriptreact\"\n    },\n    \"javascript.implicitProjectConfig.experimentalDecorators\": true,\n    \"git.confirmSync\": false,\n}\n```\n\n3. 添加git的环境变量\n右键`我的电脑`->`属性`->`高级系统设置`->`环境变量`\nadministrator下的Path\n添加`D:\\git\\Git\\bin`\n\n4. 常用快捷键\nctrl+p 打开某个文件\nctrl+g 去某一行\nctrl+shift+p 使用git\n\n5. 左侧应用\n```\n左侧搜索全局\n使用git\n插件安装\n```\n\n## 项目地址\n`https://code.aliyun.com/`\n\n\n\n\n\n","source":"_posts/git和vscode安装文档.md","raw":"---\ntitle: git和vscode安装文档\ndate: 2018-02-11 9:45:45\ntags: \n- git\n- vscode\ncategories:\n- 工具\n---\n\n## node\n`https://nodejs.org/zh-cn/download/`\n\n## git\n`https://git-scm.com/downloads`\n\n<!-- more -->\n## npm-cnpm-yarn-tyarn\n```\nnpm -v\n\nnpm install cnpm -g --registry=https://registry.npm.taobao.org\ncnpm -v\n\ncnpm install yarn tyarn -g\nyarn -v\ntyarn -v\n```\n\n## visual studio code\n`https://visualstudio.microsoft.com/zh-hans/downloads/`\n\n1. 插件：\n```\nAuto Close Tag\nAuto Complete Tag\nAuto Rename Tag\nBeautify\nChinese (Simplified) Language\nES7 React/Redux/GraphQL/React-Native snippets\nGit History\nGitLens -Git supercharged\nHTML CSS Support\nHTML Snippets\nnpm Intellisense\nPath Intellisense\nReact/Redux/react-router Snippets\nReactjs code snippets\n```\n\n2. 设置：setting.json\n```json\n{\n    \"workbench.editor.enablePreview\": false,\n    \"git.ignoreMissingGitWarning\": true,\n    \"editor.fontSize\": 18,\n    \"window.zoomLevel\": 1,\n    \"git.path\": \"D:\\\\git\\\\Git\\\\bin\\\\git.exe\",\n    \"emmet.includeLanguages\": {\n        \"javascript\": \"javascriptreact\"\n    },\n    \"javascript.implicitProjectConfig.experimentalDecorators\": true,\n    \"git.confirmSync\": false,\n}\n```\n\n3. 添加git的环境变量\n右键`我的电脑`->`属性`->`高级系统设置`->`环境变量`\nadministrator下的Path\n添加`D:\\git\\Git\\bin`\n\n4. 常用快捷键\nctrl+p 打开某个文件\nctrl+g 去某一行\nctrl+shift+p 使用git\n\n5. 左侧应用\n```\n左侧搜索全局\n使用git\n插件安装\n```\n\n## 项目地址\n`https://code.aliyun.com/`\n\n\n\n\n\n","slug":"git和vscode安装文档","published":1,"updated":"2019-03-12T04:22:48.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovd000tg8rx6bjs7job","content":"<h2 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h2><p><code>https://nodejs.org/zh-cn/download/</code></p>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p><code>https://git-scm.com/downloads</code></p>\n<a id=\"more\"></a>\n<h2 id=\"npm-cnpm-yarn-tyarn\"><a href=\"#npm-cnpm-yarn-tyarn\" class=\"headerlink\" title=\"npm-cnpm-yarn-tyarn\"></a>npm-cnpm-yarn-tyarn</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br><span class=\"line\"></span><br><span class=\"line\">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">cnpm -v</span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install yarn tyarn -g</span><br><span class=\"line\">yarn -v</span><br><span class=\"line\">tyarn -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"visual-studio-code\"><a href=\"#visual-studio-code\" class=\"headerlink\" title=\"visual studio code\"></a>visual studio code</h2><p><code>https://visualstudio.microsoft.com/zh-hans/downloads/</code></p>\n<ol>\n<li><p>插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Auto Close Tag</span><br><span class=\"line\">Auto Complete Tag</span><br><span class=\"line\">Auto Rename Tag</span><br><span class=\"line\">Beautify</span><br><span class=\"line\">Chinese (Simplified) Language</span><br><span class=\"line\">ES7 React/Redux/GraphQL/React-Native snippets</span><br><span class=\"line\">Git History</span><br><span class=\"line\">GitLens -Git supercharged</span><br><span class=\"line\">HTML CSS Support</span><br><span class=\"line\">HTML Snippets</span><br><span class=\"line\">npm Intellisense</span><br><span class=\"line\">Path Intellisense</span><br><span class=\"line\">React/Redux/react-router Snippets</span><br><span class=\"line\">Reactjs code snippets</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置：setting.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.editor.enablePreview\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"git.ignoreMissingGitWarning\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.fontSize\"</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"window.zoomLevel\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"git.path\"</span>: <span class=\"string\">\"D:\\\\git\\\\Git\\\\bin\\\\git.exe\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"emmet.includeLanguages\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"javascript\"</span>: <span class=\"string\">\"javascriptreact\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"javascript.implicitProjectConfig.experimentalDecorators\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"git.confirmSync\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加git的环境变量<br>右键<code>我的电脑</code>-&gt;<code>属性</code>-&gt;<code>高级系统设置</code>-&gt;<code>环境变量</code><br>administrator下的Path<br>添加<code>D:\\git\\Git\\bin</code></p>\n</li>\n<li><p>常用快捷键<br>ctrl+p 打开某个文件<br>ctrl+g 去某一行<br>ctrl+shift+p 使用git</p>\n</li>\n<li><p>左侧应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">左侧搜索全局</span><br><span class=\"line\">使用git</span><br><span class=\"line\">插件安装</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><code>https://code.aliyun.com/</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h2><p><code>https://nodejs.org/zh-cn/download/</code></p>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p><code>https://git-scm.com/downloads</code></p>","more":"<h2 id=\"npm-cnpm-yarn-tyarn\"><a href=\"#npm-cnpm-yarn-tyarn\" class=\"headerlink\" title=\"npm-cnpm-yarn-tyarn\"></a>npm-cnpm-yarn-tyarn</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br><span class=\"line\"></span><br><span class=\"line\">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">cnpm -v</span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install yarn tyarn -g</span><br><span class=\"line\">yarn -v</span><br><span class=\"line\">tyarn -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"visual-studio-code\"><a href=\"#visual-studio-code\" class=\"headerlink\" title=\"visual studio code\"></a>visual studio code</h2><p><code>https://visualstudio.microsoft.com/zh-hans/downloads/</code></p>\n<ol>\n<li><p>插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Auto Close Tag</span><br><span class=\"line\">Auto Complete Tag</span><br><span class=\"line\">Auto Rename Tag</span><br><span class=\"line\">Beautify</span><br><span class=\"line\">Chinese (Simplified) Language</span><br><span class=\"line\">ES7 React/Redux/GraphQL/React-Native snippets</span><br><span class=\"line\">Git History</span><br><span class=\"line\">GitLens -Git supercharged</span><br><span class=\"line\">HTML CSS Support</span><br><span class=\"line\">HTML Snippets</span><br><span class=\"line\">npm Intellisense</span><br><span class=\"line\">Path Intellisense</span><br><span class=\"line\">React/Redux/react-router Snippets</span><br><span class=\"line\">Reactjs code snippets</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置：setting.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.editor.enablePreview\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"git.ignoreMissingGitWarning\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.fontSize\"</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"window.zoomLevel\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"git.path\"</span>: <span class=\"string\">\"D:\\\\git\\\\Git\\\\bin\\\\git.exe\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"emmet.includeLanguages\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"javascript\"</span>: <span class=\"string\">\"javascriptreact\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"javascript.implicitProjectConfig.experimentalDecorators\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"git.confirmSync\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加git的环境变量<br>右键<code>我的电脑</code>-&gt;<code>属性</code>-&gt;<code>高级系统设置</code>-&gt;<code>环境变量</code><br>administrator下的Path<br>添加<code>D:\\git\\Git\\bin</code></p>\n</li>\n<li><p>常用快捷键<br>ctrl+p 打开某个文件<br>ctrl+g 去某一行<br>ctrl+shift+p 使用git</p>\n</li>\n<li><p>左侧应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">左侧搜索全局</span><br><span class=\"line\">使用git</span><br><span class=\"line\">插件安装</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><code>https://code.aliyun.com/</code></p>"},{"title":"hexo博客保存源代码","date":"2018-08-29T10:16:59.000Z","_content":"hexo默认上传代码至github仓库时，会自动将文件进行打包转换为.deploy_git中的代码，这样，我们用别的电脑继续书写博客，就会存在找不到源文件的问题。所以，针对这个问题，我重新开了一个分支来保存源码，步骤已列出，希望给大家带来一些帮助。\n\n<!-- more -->\n在根目录中放置一个git文件，以便将代码上传至github\n```\n$ git init\n```\ngit文件夹中的 config 放至以下内容， `注意url中的地址需要是Use HTTPS，不是SSH。（如果电脑上不需要添加账户密钥就用HTTPS的地址，这样无论在何时都可以更新博客了）` 根目录下的 _config.yml也需要将地址更改为Use HTTPS \n```\n[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n[remote \"origin\"]\n\turl = https://github.com/用户名/用户名.github.io.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n```\n在GitHub仓库中创建一个新分支，git创建一个同样的分支并切换到此分支，执行以下代码：\n在这里我用的git的上传工具，TortoiseGit。\n![](./branch.png '创建新分支')\n![](./git.png '创建新分支')\n```\n$ git pull \n$ git commit\n$ git push\n```\n然后，就可以在github的分支上面看到hexo的源代码了\n\n若推送时，警告说已存在这个仓库，就删掉仓库中的分支，执行以下代码：\n```\n$ git push origin :需要去掉的分支的名字\n```\n\n\n\n\n","source":"_posts/hexo博客保存源代码.md","raw":"---\ntitle: hexo博客保存源代码\ndate: 2018-08-29 18:16:59\ntags:\n- hexo \n- git\ncategories:\n- 博客开发\n---\nhexo默认上传代码至github仓库时，会自动将文件进行打包转换为.deploy_git中的代码，这样，我们用别的电脑继续书写博客，就会存在找不到源文件的问题。所以，针对这个问题，我重新开了一个分支来保存源码，步骤已列出，希望给大家带来一些帮助。\n\n<!-- more -->\n在根目录中放置一个git文件，以便将代码上传至github\n```\n$ git init\n```\ngit文件夹中的 config 放至以下内容， `注意url中的地址需要是Use HTTPS，不是SSH。（如果电脑上不需要添加账户密钥就用HTTPS的地址，这样无论在何时都可以更新博客了）` 根目录下的 _config.yml也需要将地址更改为Use HTTPS \n```\n[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n[remote \"origin\"]\n\turl = https://github.com/用户名/用户名.github.io.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n```\n在GitHub仓库中创建一个新分支，git创建一个同样的分支并切换到此分支，执行以下代码：\n在这里我用的git的上传工具，TortoiseGit。\n![](./branch.png '创建新分支')\n![](./git.png '创建新分支')\n```\n$ git pull \n$ git commit\n$ git push\n```\n然后，就可以在github的分支上面看到hexo的源代码了\n\n若推送时，警告说已存在这个仓库，就删掉仓库中的分支，执行以下代码：\n```\n$ git push origin :需要去掉的分支的名字\n```\n\n\n\n\n","slug":"hexo博客保存源代码","published":1,"updated":"2019-03-12T04:22:48.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovf000xg8rxmxunrgum","content":"<p>hexo默认上传代码至github仓库时，会自动将文件进行打包转换为.deploy_git中的代码，这样，我们用别的电脑继续书写博客，就会存在找不到源文件的问题。所以，针对这个问题，我重新开了一个分支来保存源码，步骤已列出，希望给大家带来一些帮助。</p>\n<a id=\"more\"></a>\n<p>在根目录中放置一个git文件，以便将代码上传至github<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure></p>\n<p>git文件夹中的 config 放至以下内容， <code>注意url中的地址需要是Use HTTPS，不是SSH。（如果电脑上不需要添加账户密钥就用HTTPS的地址，这样无论在何时都可以更新博客了）</code> 根目录下的 _config.yml也需要将地址更改为Use HTTPS<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[core]</span><br><span class=\"line\">\trepositoryformatversion = 0</span><br><span class=\"line\">\tfilemode = false</span><br><span class=\"line\">\tbare = false</span><br><span class=\"line\">\tlogallrefupdates = true</span><br><span class=\"line\">\tsymlinks = false</span><br><span class=\"line\">\tignorecase = true</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">\turl = https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">\tfetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure></p>\n<p>在GitHub仓库中创建一个新分支，git创建一个同样的分支并切换到此分支，执行以下代码：<br>在这里我用的git的上传工具，TortoiseGit。<br><img src=\"./branch.png\" alt title=\"创建新分支\"><br><img src=\"./git.png\" alt title=\"创建新分支\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull </span><br><span class=\"line\">$ git commit</span><br><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure></p>\n<p>然后，就可以在github的分支上面看到hexo的源代码了</p>\n<p>若推送时，警告说已存在这个仓库，就删掉仓库中的分支，执行以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :需要去掉的分支的名字</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>hexo默认上传代码至github仓库时，会自动将文件进行打包转换为.deploy_git中的代码，这样，我们用别的电脑继续书写博客，就会存在找不到源文件的问题。所以，针对这个问题，我重新开了一个分支来保存源码，步骤已列出，希望给大家带来一些帮助。</p>","more":"<p>在根目录中放置一个git文件，以便将代码上传至github<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure></p>\n<p>git文件夹中的 config 放至以下内容， <code>注意url中的地址需要是Use HTTPS，不是SSH。（如果电脑上不需要添加账户密钥就用HTTPS的地址，这样无论在何时都可以更新博客了）</code> 根目录下的 _config.yml也需要将地址更改为Use HTTPS<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[core]</span><br><span class=\"line\">\trepositoryformatversion = 0</span><br><span class=\"line\">\tfilemode = false</span><br><span class=\"line\">\tbare = false</span><br><span class=\"line\">\tlogallrefupdates = true</span><br><span class=\"line\">\tsymlinks = false</span><br><span class=\"line\">\tignorecase = true</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">\turl = https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">\tfetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure></p>\n<p>在GitHub仓库中创建一个新分支，git创建一个同样的分支并切换到此分支，执行以下代码：<br>在这里我用的git的上传工具，TortoiseGit。<br><img src=\"./branch.png\" alt title=\"创建新分支\"><br><img src=\"./git.png\" alt title=\"创建新分支\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull </span><br><span class=\"line\">$ git commit</span><br><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure></p>\n<p>然后，就可以在github的分支上面看到hexo的源代码了</p>\n<p>若推送时，警告说已存在这个仓库，就删掉仓库中的分支，执行以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :需要去掉的分支的名字</span><br></pre></td></tr></table></figure></p>"},{"title":"hexo博客同时部署到github和Coding","date":"2018-09-03T10:09:01.000Z","_content":"\n>原文：http://www.voidcn.com/article/p-psfdomxz-yz.html\n\n>引言：\n>之前博客只部署到了github上，具体过程可参考[基于hexo+github博客的搭建](https://xuxut.github.io/2018/02/22/02hexo/)，我尝试同时部署到coding上。\n\n<!-- more -->\n\n1.打开[Coding.net官网](https://coding.net/)，注册个人账号。这里我直接关联的github账号。\n\n2.新建项目\n注意：项目名与注册用的账户名一致。\n\n3.将根目录下的_config.yml的repo写成\n```\nrepo:\n    github: https://github.com/账户名/账户名.github.io.git,master\n    coding:\n      https://git.coding.net/帐户名/账户名.git,master\n```\n\n4.部署即可\n```\n$ hexo g\n$ hexo d\n```\n\n5.打开Coding.net的项目管理界面，打开代码->Pages服务，选择部署来源为master分支，然后保存即可。\n\n6.访问地址：账户名.coding.me\n\n\n","source":"_posts/hexo博客同时部署到github和Coding.md","raw":"---\ntitle: hexo博客同时部署到github和Coding\ndate: 2018-09-03 18:09:01\ntags:\n- hexo \ncategories:\n- 博客开发\n---\n\n>原文：http://www.voidcn.com/article/p-psfdomxz-yz.html\n\n>引言：\n>之前博客只部署到了github上，具体过程可参考[基于hexo+github博客的搭建](https://xuxut.github.io/2018/02/22/02hexo/)，我尝试同时部署到coding上。\n\n<!-- more -->\n\n1.打开[Coding.net官网](https://coding.net/)，注册个人账号。这里我直接关联的github账号。\n\n2.新建项目\n注意：项目名与注册用的账户名一致。\n\n3.将根目录下的_config.yml的repo写成\n```\nrepo:\n    github: https://github.com/账户名/账户名.github.io.git,master\n    coding:\n      https://git.coding.net/帐户名/账户名.git,master\n```\n\n4.部署即可\n```\n$ hexo g\n$ hexo d\n```\n\n5.打开Coding.net的项目管理界面，打开代码->Pages服务，选择部署来源为master分支，然后保存即可。\n\n6.访问地址：账户名.coding.me\n\n\n","slug":"hexo博客同时部署到github和Coding","published":1,"updated":"2019-03-12T04:22:48.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovg000zg8rxvvozh79f","content":"<blockquote>\n<p>原文：<a href=\"http://www.voidcn.com/article/p-psfdomxz-yz.html\" target=\"_blank\" rel=\"noopener\">http://www.voidcn.com/article/p-psfdomxz-yz.html</a></p>\n</blockquote>\n<blockquote>\n<p>引言：<br>之前博客只部署到了github上，具体过程可参考<a href=\"https://xuxut.github.io/2018/02/22/02hexo/\" target=\"_blank\" rel=\"noopener\">基于hexo+github博客的搭建</a>，我尝试同时部署到coding上。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>1.打开<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding.net官网</a>，注册个人账号。这里我直接关联的github账号。</p>\n<p>2.新建项目<br>注意：项目名与注册用的账户名一致。</p>\n<p>3.将根目录下的_config.yml的repo写成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repo:</span><br><span class=\"line\">    github: https://github.com/账户名/账户名.github.io.git,master</span><br><span class=\"line\">    coding:</span><br><span class=\"line\">      https://git.coding.net/帐户名/账户名.git,master</span><br></pre></td></tr></table></figure></p>\n<p>4.部署即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>5.打开Coding.net的项目管理界面，打开代码-&gt;Pages服务，选择部署来源为master分支，然后保存即可。</p>\n<p>6.访问地址：账户名.coding.me</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>原文：<a href=\"http://www.voidcn.com/article/p-psfdomxz-yz.html\" target=\"_blank\" rel=\"noopener\">http://www.voidcn.com/article/p-psfdomxz-yz.html</a></p>\n</blockquote>\n<blockquote>\n<p>引言：<br>之前博客只部署到了github上，具体过程可参考<a href=\"https://xuxut.github.io/2018/02/22/02hexo/\" target=\"_blank\" rel=\"noopener\">基于hexo+github博客的搭建</a>，我尝试同时部署到coding上。</p>\n</blockquote>","more":"<p>1.打开<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding.net官网</a>，注册个人账号。这里我直接关联的github账号。</p>\n<p>2.新建项目<br>注意：项目名与注册用的账户名一致。</p>\n<p>3.将根目录下的_config.yml的repo写成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repo:</span><br><span class=\"line\">    github: https://github.com/账户名/账户名.github.io.git,master</span><br><span class=\"line\">    coding:</span><br><span class=\"line\">      https://git.coding.net/帐户名/账户名.git,master</span><br></pre></td></tr></table></figure></p>\n<p>4.部署即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>5.打开Coding.net的项目管理界面，打开代码-&gt;Pages服务，选择部署来源为master分支，然后保存即可。</p>\n<p>6.访问地址：账户名.coding.me</p>"},{"title":"node搭建服务器","date":"2018-03-22T01:32:38.000Z","_content":"\n使用node搭建一个简单的服务器\n<!-- more -->\n1.新建文件夹，在里面再创建一个文件夹server\n2.在server里面\n```\nnpm init    创建一个package.json\nnpm i --save express(npm i -S express)  安装express\n```\n3.创建app.js(index.js)\n```\nconst express = require(\"express\");\nlet app = new express();\napp.listen(3000);\n```\n4.打开服务器\n安装：npm i -g supervisor\n```\ncmd:supervisor app|node app\n```\n地址栏localhost:3000\n5.全局安装隧道服务\n```\ncmd:npm i -g ngrok\n任意位置:ngrok http 3000\n```\n或者网页安装（http://ngrok.com/download）\nC:/ngrok.exe\n之后在C盘web-01里面将ngrok打开，并解压到桌面\n```\nC:/ cmd:ngrok.exe http 3000\n```\n6.server/\n```\nnpm i -S wechat\n```\n7.app.js\n```\nconst wechat = require(\"wechat\");\nlet config = {\n\tappid:'',\n\ttoken:'',\n\tencodingAESKey:''\n}\n```\n8.微信公众平台-登录个人订阅号账号\n开发-基本配置\n复制AppId,粘贴为config的AppID值\n9.开发-基本配置\n服务器(未启用)-修改配置\ntoken:weixin\nencodingAESKey:随机生成\n10.复制ngrok生成的隧道地址，填写到公众平台的url处\n11.app.js\n```\napp.get('/',wechat(config,(req,res)=>{\n\tlet message = req.weixin \n\tconsole.log(message)\n\n}))\n```\n\n12.开发-基本配置\n服务器配置（未启用）-修改配置\n提交\n\n13.启用开发者模式\n服务器配置（已启用）\n\n14.在公众号中输入消息，后台可以看到。\n15.在公众号中输入消息，可以自动回复。\n返回响应：res.reply(\"收到\")\n\n16.模拟编辑模式的关键词半匹配回复。\n```\nconst express = require(\"express\");\nconst wechat = require(\"wechat\");\n\nlet config = {\n\tappid:'wx8c42dec7e3b4dc1f',\n\ttoken:'weixin',\n\tencodingAESKey:'utC2otCu4vW0F86XpHIQZ9kx71I9fcltwDvbGFNk3Il'\n};\n\nlet app = new express();\n\napp.post('/',wechat(config,(req,res)=>{\n\tlet message = req.weixin \n\tconsole.log(message.Content)\n\tres.reply(\"收到\")\n\n}))\n\napp.listen(3000);\n```\n```\nconst express = require(\"express\");\nconst wechat = require(\"wechat\");\nconst mysql=require(\"mysql\");\nconst pool = mysql.createPool({\n\tuser:'root',\n\tconnectionLimit:5\n})\n\n\nlet config = {\n\tappid:'wx8c42dec7e3b4dc1f',\n\ttoken:'weixin',\n\tencodingAESKey:'utC2otCu4vW0F86XpHIQZ9kx71I9fcltwDvbGFNk3Il'\n};\n\nlet app = new express();\n\napp.post('/',wechat(config,(req,res)=>{\n\tlet message = req.weixin.Content\n\tconsole.log(message)\n\t//if(message.includes('JavaScript')){\n\t//\tres.reply('JS...')\n\t//}else if(message.includes('HTML')){\n\t//\tres.reply('HTML...')\n\t//}else if(message.includes('CSS')){\n\t//\tres.reply('CSS')\n\t//}\n\n\tlet sql = `SELECT * FROM db.chat WHERE ? LIKE CONCAT('%'+question+'%')`;\n\tpool.query(sql,[message],(err,result)=>{\n\t\t//返回answer\n\t\tif(result.length==1){\n\t\t\tres.reply(results[0].answer)\n\t\t}else{\n\t\t\tres.reply('啊？')\n\t\t}\n\t})\n\n}))\n\napp.listen(3000);\n\n\n```","source":"_posts/node搭建服务器.md","raw":"---\ntitle: 'node搭建服务器'\ndate: 2018-03-22 09:32:38\ntags:\n- node\ncategories:\n- 后端\n---\n\n使用node搭建一个简单的服务器\n<!-- more -->\n1.新建文件夹，在里面再创建一个文件夹server\n2.在server里面\n```\nnpm init    创建一个package.json\nnpm i --save express(npm i -S express)  安装express\n```\n3.创建app.js(index.js)\n```\nconst express = require(\"express\");\nlet app = new express();\napp.listen(3000);\n```\n4.打开服务器\n安装：npm i -g supervisor\n```\ncmd:supervisor app|node app\n```\n地址栏localhost:3000\n5.全局安装隧道服务\n```\ncmd:npm i -g ngrok\n任意位置:ngrok http 3000\n```\n或者网页安装（http://ngrok.com/download）\nC:/ngrok.exe\n之后在C盘web-01里面将ngrok打开，并解压到桌面\n```\nC:/ cmd:ngrok.exe http 3000\n```\n6.server/\n```\nnpm i -S wechat\n```\n7.app.js\n```\nconst wechat = require(\"wechat\");\nlet config = {\n\tappid:'',\n\ttoken:'',\n\tencodingAESKey:''\n}\n```\n8.微信公众平台-登录个人订阅号账号\n开发-基本配置\n复制AppId,粘贴为config的AppID值\n9.开发-基本配置\n服务器(未启用)-修改配置\ntoken:weixin\nencodingAESKey:随机生成\n10.复制ngrok生成的隧道地址，填写到公众平台的url处\n11.app.js\n```\napp.get('/',wechat(config,(req,res)=>{\n\tlet message = req.weixin \n\tconsole.log(message)\n\n}))\n```\n\n12.开发-基本配置\n服务器配置（未启用）-修改配置\n提交\n\n13.启用开发者模式\n服务器配置（已启用）\n\n14.在公众号中输入消息，后台可以看到。\n15.在公众号中输入消息，可以自动回复。\n返回响应：res.reply(\"收到\")\n\n16.模拟编辑模式的关键词半匹配回复。\n```\nconst express = require(\"express\");\nconst wechat = require(\"wechat\");\n\nlet config = {\n\tappid:'wx8c42dec7e3b4dc1f',\n\ttoken:'weixin',\n\tencodingAESKey:'utC2otCu4vW0F86XpHIQZ9kx71I9fcltwDvbGFNk3Il'\n};\n\nlet app = new express();\n\napp.post('/',wechat(config,(req,res)=>{\n\tlet message = req.weixin \n\tconsole.log(message.Content)\n\tres.reply(\"收到\")\n\n}))\n\napp.listen(3000);\n```\n```\nconst express = require(\"express\");\nconst wechat = require(\"wechat\");\nconst mysql=require(\"mysql\");\nconst pool = mysql.createPool({\n\tuser:'root',\n\tconnectionLimit:5\n})\n\n\nlet config = {\n\tappid:'wx8c42dec7e3b4dc1f',\n\ttoken:'weixin',\n\tencodingAESKey:'utC2otCu4vW0F86XpHIQZ9kx71I9fcltwDvbGFNk3Il'\n};\n\nlet app = new express();\n\napp.post('/',wechat(config,(req,res)=>{\n\tlet message = req.weixin.Content\n\tconsole.log(message)\n\t//if(message.includes('JavaScript')){\n\t//\tres.reply('JS...')\n\t//}else if(message.includes('HTML')){\n\t//\tres.reply('HTML...')\n\t//}else if(message.includes('CSS')){\n\t//\tres.reply('CSS')\n\t//}\n\n\tlet sql = `SELECT * FROM db.chat WHERE ? LIKE CONCAT('%'+question+'%')`;\n\tpool.query(sql,[message],(err,result)=>{\n\t\t//返回answer\n\t\tif(result.length==1){\n\t\t\tres.reply(results[0].answer)\n\t\t}else{\n\t\t\tres.reply('啊？')\n\t\t}\n\t})\n\n}))\n\napp.listen(3000);\n\n\n```","slug":"node搭建服务器","published":1,"updated":"2019-03-12T04:22:48.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovi0013g8rx8wd2e8n5","content":"<p>使用node搭建一个简单的服务器<br><a id=\"more\"></a><br>1.新建文件夹，在里面再创建一个文件夹server<br>2.在server里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init    创建一个package.json</span><br><span class=\"line\">npm i --save express(npm i -S express)  安装express</span><br></pre></td></tr></table></figure></p>\n<p>3.创建app.js(index.js)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&quot;express&quot;);</span><br><span class=\"line\">let app = new express();</span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure></p>\n<p>4.打开服务器<br>安装：npm i -g supervisor<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd:supervisor app|node app</span><br></pre></td></tr></table></figure></p>\n<p>地址栏localhost:3000<br>5.全局安装隧道服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd:npm i -g ngrok</span><br><span class=\"line\">任意位置:ngrok http 3000</span><br></pre></td></tr></table></figure></p>\n<p>或者网页安装（<a href=\"http://ngrok.com/download）\" target=\"_blank\" rel=\"noopener\">http://ngrok.com/download）</a><br>C:/ngrok.exe<br>之后在C盘web-01里面将ngrok打开，并解压到桌面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:/ cmd:ngrok.exe http 3000</span><br></pre></td></tr></table></figure></p>\n<p>6.server/<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S wechat</span><br></pre></td></tr></table></figure></p>\n<p>7.app.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const wechat = require(&quot;wechat&quot;);</span><br><span class=\"line\">let config = &#123;</span><br><span class=\"line\">\tappid:&apos;&apos;,</span><br><span class=\"line\">\ttoken:&apos;&apos;,</span><br><span class=\"line\">\tencodingAESKey:&apos;&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>8.微信公众平台-登录个人订阅号账号<br>开发-基本配置<br>复制AppId,粘贴为config的AppID值<br>9.开发-基本配置<br>服务器(未启用)-修改配置<br>token:weixin<br>encodingAESKey:随机生成<br>10.复制ngrok生成的隧道地址，填写到公众平台的url处<br>11.app.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&apos;/&apos;,wechat(config,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tlet message = req.weixin </span><br><span class=\"line\">\tconsole.log(message)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure></p>\n<p>12.开发-基本配置<br>服务器配置（未启用）-修改配置<br>提交</p>\n<p>13.启用开发者模式<br>服务器配置（已启用）</p>\n<p>14.在公众号中输入消息，后台可以看到。<br>15.在公众号中输入消息，可以自动回复。<br>返回响应：res.reply(“收到”)</p>\n<p>16.模拟编辑模式的关键词半匹配回复。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&quot;express&quot;);</span><br><span class=\"line\">const wechat = require(&quot;wechat&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">let config = &#123;</span><br><span class=\"line\">\tappid:&apos;wx8c42dec7e3b4dc1f&apos;,</span><br><span class=\"line\">\ttoken:&apos;weixin&apos;,</span><br><span class=\"line\">\tencodingAESKey:&apos;utC2otCu4vW0F86XpHIQZ9kx71I9fcltwDvbGFNk3Il&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let app = new express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(&apos;/&apos;,wechat(config,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tlet message = req.weixin </span><br><span class=\"line\">\tconsole.log(message.Content)</span><br><span class=\"line\">\tres.reply(&quot;收到&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&quot;express&quot;);</span><br><span class=\"line\">const wechat = require(&quot;wechat&quot;);</span><br><span class=\"line\">const mysql=require(&quot;mysql&quot;);</span><br><span class=\"line\">const pool = mysql.createPool(&#123;</span><br><span class=\"line\">\tuser:&apos;root&apos;,</span><br><span class=\"line\">\tconnectionLimit:5</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let config = &#123;</span><br><span class=\"line\">\tappid:&apos;wx8c42dec7e3b4dc1f&apos;,</span><br><span class=\"line\">\ttoken:&apos;weixin&apos;,</span><br><span class=\"line\">\tencodingAESKey:&apos;utC2otCu4vW0F86XpHIQZ9kx71I9fcltwDvbGFNk3Il&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let app = new express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(&apos;/&apos;,wechat(config,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tlet message = req.weixin.Content</span><br><span class=\"line\">\tconsole.log(message)</span><br><span class=\"line\">\t//if(message.includes(&apos;JavaScript&apos;))&#123;</span><br><span class=\"line\">\t//\tres.reply(&apos;JS...&apos;)</span><br><span class=\"line\">\t//&#125;else if(message.includes(&apos;HTML&apos;))&#123;</span><br><span class=\"line\">\t//\tres.reply(&apos;HTML...&apos;)</span><br><span class=\"line\">\t//&#125;else if(message.includes(&apos;CSS&apos;))&#123;</span><br><span class=\"line\">\t//\tres.reply(&apos;CSS&apos;)</span><br><span class=\"line\">\t//&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlet sql = `SELECT * FROM db.chat WHERE ? LIKE CONCAT(&apos;%&apos;+question+&apos;%&apos;)`;</span><br><span class=\"line\">\tpool.query(sql,[message],(err,result)=&gt;&#123;</span><br><span class=\"line\">\t\t//返回answer</span><br><span class=\"line\">\t\tif(result.length==1)&#123;</span><br><span class=\"line\">\t\t\tres.reply(results[0].answer)</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tres.reply(&apos;啊？&apos;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>使用node搭建一个简单的服务器<br>","more":"<br>1.新建文件夹，在里面再创建一个文件夹server<br>2.在server里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init    创建一个package.json</span><br><span class=\"line\">npm i --save express(npm i -S express)  安装express</span><br></pre></td></tr></table></figure></p>\n<p>3.创建app.js(index.js)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&quot;express&quot;);</span><br><span class=\"line\">let app = new express();</span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure></p>\n<p>4.打开服务器<br>安装：npm i -g supervisor<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd:supervisor app|node app</span><br></pre></td></tr></table></figure></p>\n<p>地址栏localhost:3000<br>5.全局安装隧道服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd:npm i -g ngrok</span><br><span class=\"line\">任意位置:ngrok http 3000</span><br></pre></td></tr></table></figure></p>\n<p>或者网页安装（<a href=\"http://ngrok.com/download）\" target=\"_blank\" rel=\"noopener\">http://ngrok.com/download）</a><br>C:/ngrok.exe<br>之后在C盘web-01里面将ngrok打开，并解压到桌面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:/ cmd:ngrok.exe http 3000</span><br></pre></td></tr></table></figure></p>\n<p>6.server/<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S wechat</span><br></pre></td></tr></table></figure></p>\n<p>7.app.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const wechat = require(&quot;wechat&quot;);</span><br><span class=\"line\">let config = &#123;</span><br><span class=\"line\">\tappid:&apos;&apos;,</span><br><span class=\"line\">\ttoken:&apos;&apos;,</span><br><span class=\"line\">\tencodingAESKey:&apos;&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>8.微信公众平台-登录个人订阅号账号<br>开发-基本配置<br>复制AppId,粘贴为config的AppID值<br>9.开发-基本配置<br>服务器(未启用)-修改配置<br>token:weixin<br>encodingAESKey:随机生成<br>10.复制ngrok生成的隧道地址，填写到公众平台的url处<br>11.app.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&apos;/&apos;,wechat(config,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tlet message = req.weixin </span><br><span class=\"line\">\tconsole.log(message)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure></p>\n<p>12.开发-基本配置<br>服务器配置（未启用）-修改配置<br>提交</p>\n<p>13.启用开发者模式<br>服务器配置（已启用）</p>\n<p>14.在公众号中输入消息，后台可以看到。<br>15.在公众号中输入消息，可以自动回复。<br>返回响应：res.reply(“收到”)</p>\n<p>16.模拟编辑模式的关键词半匹配回复。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&quot;express&quot;);</span><br><span class=\"line\">const wechat = require(&quot;wechat&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">let config = &#123;</span><br><span class=\"line\">\tappid:&apos;wx8c42dec7e3b4dc1f&apos;,</span><br><span class=\"line\">\ttoken:&apos;weixin&apos;,</span><br><span class=\"line\">\tencodingAESKey:&apos;utC2otCu4vW0F86XpHIQZ9kx71I9fcltwDvbGFNk3Il&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let app = new express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(&apos;/&apos;,wechat(config,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tlet message = req.weixin </span><br><span class=\"line\">\tconsole.log(message.Content)</span><br><span class=\"line\">\tres.reply(&quot;收到&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&quot;express&quot;);</span><br><span class=\"line\">const wechat = require(&quot;wechat&quot;);</span><br><span class=\"line\">const mysql=require(&quot;mysql&quot;);</span><br><span class=\"line\">const pool = mysql.createPool(&#123;</span><br><span class=\"line\">\tuser:&apos;root&apos;,</span><br><span class=\"line\">\tconnectionLimit:5</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let config = &#123;</span><br><span class=\"line\">\tappid:&apos;wx8c42dec7e3b4dc1f&apos;,</span><br><span class=\"line\">\ttoken:&apos;weixin&apos;,</span><br><span class=\"line\">\tencodingAESKey:&apos;utC2otCu4vW0F86XpHIQZ9kx71I9fcltwDvbGFNk3Il&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let app = new express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(&apos;/&apos;,wechat(config,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tlet message = req.weixin.Content</span><br><span class=\"line\">\tconsole.log(message)</span><br><span class=\"line\">\t//if(message.includes(&apos;JavaScript&apos;))&#123;</span><br><span class=\"line\">\t//\tres.reply(&apos;JS...&apos;)</span><br><span class=\"line\">\t//&#125;else if(message.includes(&apos;HTML&apos;))&#123;</span><br><span class=\"line\">\t//\tres.reply(&apos;HTML...&apos;)</span><br><span class=\"line\">\t//&#125;else if(message.includes(&apos;CSS&apos;))&#123;</span><br><span class=\"line\">\t//\tres.reply(&apos;CSS&apos;)</span><br><span class=\"line\">\t//&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlet sql = `SELECT * FROM db.chat WHERE ? LIKE CONCAT(&apos;%&apos;+question+&apos;%&apos;)`;</span><br><span class=\"line\">\tpool.query(sql,[message],(err,result)=&gt;&#123;</span><br><span class=\"line\">\t\t//返回answer</span><br><span class=\"line\">\t\tif(result.length==1)&#123;</span><br><span class=\"line\">\t\t\tres.reply(results[0].answer)</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tres.reply(&apos;啊？&apos;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>"},{"title":"react高阶函数——页面中弹出框的打开和关闭","date":"2018-12-27T10:21:44.000Z","blogexcerpt":"react的高阶组件就是一个函数，接收组件作为参数，然后再返回一个新的组件。它是一个纯函数，注入组件并返回组件，对这个高阶组件页面中的内容无任何副作用，只是为这个页面增加了某些状态或功能，说白了就是在这个页面外面包了一层。","_content":"\n>前言：在最近的项目中，多个页面都有弹出框的功能，所以我写了一个高阶组件，减少了代码量，顺便学习了一下高阶组件。\n\n1. 在src文件夹下建立名为hoc的子文件夹，以后的高阶组件都写在这个文件夹里面\n```javascript\nimport React, { PureComponent } from 'react';\nimport { connect } from 'dva';\nimport { notification } from 'antd';\n\nconst ModalSubmitHoc = WrappedComponent => {\n  return connect(({ }) => ({\n\n  }))(\n    class extends PureComponent {\n      state={\n        modalParams:{\n          visible: false,\n          visibleObject: {}\n        },\n        modalMethods:{\n\n        },\n      }\n\n      constructor(){\n        super()\n        this.state={\n          modalParams:{\n            visible: false,\n            visibleObject: {}\n          },\n          modalMethods: {\n            openModal:this.openModal,\n            closeModal:this.closeModal,\n            openOneModal: this.openOneModal,\n            closeOneModal: this.closeOneModal,\n            submitModal:this.submitModal,\n            getModalVisibleObject: this.getModalVisibleObject\n          }\n        }\n      }\n\n      // 生成多少个弹窗的visible\n      getModalVisibleObject = (visibleArr) => {\n        let c = {}\n        visibleArr.map((_)=>{\n          c[_] = false\n        })\n        this.setState({\n          visibleObject: c\n        })\n      }\n\n      // 页面内只有一个弹窗\n      openModal = (visible=true) => {\n        this.setState({modalParams:{visible}})\n      }\n      closeModal = (visible=false) => {\n        this.setState({modalParams:{visible}})\n      }\n\n      // 页面内有多个弹窗\n      openOneModal = (visibleName) => {\n        this.setState({\n          modalParams: {\n            visibleObject: {\n              [visibleName]: true\n            }\n          }\n        })\n      }\n      closeOneModal = (visibleName) => {\n        this.setState({\n          modalParams: {\n            visibleObject: {\n              [visibleName]: false\n            }\n          }\n        })\n      }\n\n      resetFields = ()  => {\n        const { form } = this.props;\n        form.resetFields()\n      }\n\n      /**\n       * 提交modal\n       * @param {String} dispatchType dispatch的type\n       * @param {Object} values 提交的参数\n       * @param {string} visibleName 提交的弹窗名字\n       */\n      submitModal = (dispatchType, values, visibleName) => {\n        const { dispatch } = this.props;\n        dispatch({\n          type:`${dispatchType}`,\n          payload: {\n            ...values,\n          },\n          callback: (code, message, description) => {\n            if(code){\n              notification.success({message})\n              this.resetFields()\n              if(visibleName){\n               this.closeOneModal(visibleName)\n              }else {\n               this.closeModal()\n              }\n            }else {\n              notification.error({message, description})\n            }\n          }\n        })\n      }\n\n      render() {\n        const newProps = {...this.props,...this.state};\n\n        return <WrappedComponent {...newProps} />;\n      }\n    }\n  );\n};\nexport default ModalSubmitHoc;\n\n```\n\n2. 在页面中使用\n页面通过获取props来使用高阶组件的参数和方法\n```javascript\nimport ModalSubmitHoc from '@/hoc/ModalSubmitHoc'\n\n@ModalSubmitHoc\nexport default class 组件 extends PureComponent{\n\n}\n```\n\n\n","source":"_posts/react高阶函数———一个页面中弹出框的打开和关闭.md","raw":"---\ntitle: react高阶函数——页面中弹出框的打开和关闭\ndate: 2018-12-27 18:21:44\ntags: \n- 高阶组件HOC\ncategories:\n- react\nblogexcerpt: react的高阶组件就是一个函数，接收组件作为参数，然后再返回一个新的组件。它是一个纯函数，注入组件并返回组件，对这个高阶组件页面中的内容无任何副作用，只是为这个页面增加了某些状态或功能，说白了就是在这个页面外面包了一层。\n---\n\n>前言：在最近的项目中，多个页面都有弹出框的功能，所以我写了一个高阶组件，减少了代码量，顺便学习了一下高阶组件。\n\n1. 在src文件夹下建立名为hoc的子文件夹，以后的高阶组件都写在这个文件夹里面\n```javascript\nimport React, { PureComponent } from 'react';\nimport { connect } from 'dva';\nimport { notification } from 'antd';\n\nconst ModalSubmitHoc = WrappedComponent => {\n  return connect(({ }) => ({\n\n  }))(\n    class extends PureComponent {\n      state={\n        modalParams:{\n          visible: false,\n          visibleObject: {}\n        },\n        modalMethods:{\n\n        },\n      }\n\n      constructor(){\n        super()\n        this.state={\n          modalParams:{\n            visible: false,\n            visibleObject: {}\n          },\n          modalMethods: {\n            openModal:this.openModal,\n            closeModal:this.closeModal,\n            openOneModal: this.openOneModal,\n            closeOneModal: this.closeOneModal,\n            submitModal:this.submitModal,\n            getModalVisibleObject: this.getModalVisibleObject\n          }\n        }\n      }\n\n      // 生成多少个弹窗的visible\n      getModalVisibleObject = (visibleArr) => {\n        let c = {}\n        visibleArr.map((_)=>{\n          c[_] = false\n        })\n        this.setState({\n          visibleObject: c\n        })\n      }\n\n      // 页面内只有一个弹窗\n      openModal = (visible=true) => {\n        this.setState({modalParams:{visible}})\n      }\n      closeModal = (visible=false) => {\n        this.setState({modalParams:{visible}})\n      }\n\n      // 页面内有多个弹窗\n      openOneModal = (visibleName) => {\n        this.setState({\n          modalParams: {\n            visibleObject: {\n              [visibleName]: true\n            }\n          }\n        })\n      }\n      closeOneModal = (visibleName) => {\n        this.setState({\n          modalParams: {\n            visibleObject: {\n              [visibleName]: false\n            }\n          }\n        })\n      }\n\n      resetFields = ()  => {\n        const { form } = this.props;\n        form.resetFields()\n      }\n\n      /**\n       * 提交modal\n       * @param {String} dispatchType dispatch的type\n       * @param {Object} values 提交的参数\n       * @param {string} visibleName 提交的弹窗名字\n       */\n      submitModal = (dispatchType, values, visibleName) => {\n        const { dispatch } = this.props;\n        dispatch({\n          type:`${dispatchType}`,\n          payload: {\n            ...values,\n          },\n          callback: (code, message, description) => {\n            if(code){\n              notification.success({message})\n              this.resetFields()\n              if(visibleName){\n               this.closeOneModal(visibleName)\n              }else {\n               this.closeModal()\n              }\n            }else {\n              notification.error({message, description})\n            }\n          }\n        })\n      }\n\n      render() {\n        const newProps = {...this.props,...this.state};\n\n        return <WrappedComponent {...newProps} />;\n      }\n    }\n  );\n};\nexport default ModalSubmitHoc;\n\n```\n\n2. 在页面中使用\n页面通过获取props来使用高阶组件的参数和方法\n```javascript\nimport ModalSubmitHoc from '@/hoc/ModalSubmitHoc'\n\n@ModalSubmitHoc\nexport default class 组件 extends PureComponent{\n\n}\n```\n\n\n","slug":"react高阶函数———一个页面中弹出框的打开和关闭","published":1,"updated":"2019-03-12T04:22:48.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovj0015g8rxe8idskla","content":"<blockquote>\n<p>前言：在最近的项目中，多个页面都有弹出框的功能，所以我写了一个高阶组件，减少了代码量，顺便学习了一下高阶组件。</p>\n</blockquote>\n<ol>\n<li><p>在src文件夹下建立名为hoc的子文件夹，以后的高阶组件都写在这个文件夹里面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; notification &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ModalSubmitHoc = <span class=\"function\"><span class=\"params\">WrappedComponent</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> connect(<span class=\"function\">(<span class=\"params\">&#123; &#125;</span>) =&gt;</span> (&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;))(</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">      state=&#123;</span><br><span class=\"line\">        modalParams:&#123;</span><br><span class=\"line\">          visible: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          visibleObject: &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        modalMethods:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state=&#123;</span><br><span class=\"line\">          modalParams:&#123;</span><br><span class=\"line\">            visible: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            visibleObject: &#123;&#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          modalMethods: &#123;</span><br><span class=\"line\">            openModal:<span class=\"keyword\">this</span>.openModal,</span><br><span class=\"line\">            closeModal:<span class=\"keyword\">this</span>.closeModal,</span><br><span class=\"line\">            openOneModal: <span class=\"keyword\">this</span>.openOneModal,</span><br><span class=\"line\">            closeOneModal: <span class=\"keyword\">this</span>.closeOneModal,</span><br><span class=\"line\">            submitModal:<span class=\"keyword\">this</span>.submitModal,</span><br><span class=\"line\">            getModalVisibleObject: <span class=\"keyword\">this</span>.getModalVisibleObject</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 生成多少个弹窗的visible</span></span><br><span class=\"line\">      getModalVisibleObject = <span class=\"function\">(<span class=\"params\">visibleArr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> c = &#123;&#125;</span><br><span class=\"line\">        visibleArr.map(<span class=\"function\">(<span class=\"params\">_</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          c[_] = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">          visibleObject: c</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 页面内只有一个弹窗</span></span><br><span class=\"line\">      openModal = <span class=\"function\">(<span class=\"params\">visible=<span class=\"literal\">true</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">modalParams</span>:&#123;visible&#125;&#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      closeModal = <span class=\"function\">(<span class=\"params\">visible=<span class=\"literal\">false</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">modalParams</span>:&#123;visible&#125;&#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 页面内有多个弹窗</span></span><br><span class=\"line\">      openOneModal = <span class=\"function\">(<span class=\"params\">visibleName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">          modalParams: &#123;</span><br><span class=\"line\">            visibleObject: &#123;</span><br><span class=\"line\">              [visibleName]: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      closeOneModal = <span class=\"function\">(<span class=\"params\">visibleName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">          modalParams: &#123;</span><br><span class=\"line\">            visibleObject: &#123;</span><br><span class=\"line\">              [visibleName]: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      resetFields = <span class=\"function\"><span class=\"params\">()</span>  =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; form &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        form.resetFields()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 提交modal</span></span><br><span class=\"line\"><span class=\"comment\">       * @param &#123;String&#125; dispatchType dispatch的type</span></span><br><span class=\"line\"><span class=\"comment\">       * @param &#123;Object&#125; values 提交的参数</span></span><br><span class=\"line\"><span class=\"comment\">       * @param &#123;string&#125; visibleName 提交的弹窗名字</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      submitModal = <span class=\"function\">(<span class=\"params\">dispatchType, values, visibleName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; dispatch &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        dispatch(&#123;</span><br><span class=\"line\">          type:<span class=\"string\">`<span class=\"subst\">$&#123;dispatchType&#125;</span>`</span>,</span><br><span class=\"line\">          payload: &#123;</span><br><span class=\"line\">            ...values,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          callback: <span class=\"function\">(<span class=\"params\">code, message, description</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(code)&#123;</span><br><span class=\"line\">              notification.success(&#123;message&#125;)</span><br><span class=\"line\">              <span class=\"keyword\">this</span>.resetFields()</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(visibleName)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.closeOneModal(visibleName)</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.closeModal()</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              notification.error(&#123;message, description&#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newProps = &#123;...this.props,...this.state&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &lt;WrappedComponent &#123;...newProps&#125; /&gt;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default ModalSubmitHoc;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在页面中使用<br>页面通过获取props来使用高阶组件的参数和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ModalSubmitHoc <span class=\"keyword\">from</span> <span class=\"string\">'@/hoc/ModalSubmitHoc'</span></span><br><span class=\"line\"></span><br><span class=\"line\">@ModalSubmitHoc</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> 组件 <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>前言：在最近的项目中，多个页面都有弹出框的功能，所以我写了一个高阶组件，减少了代码量，顺便学习了一下高阶组件。</p>\n</blockquote>\n<ol>\n<li><p>在src文件夹下建立名为hoc的子文件夹，以后的高阶组件都写在这个文件夹里面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; notification &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ModalSubmitHoc = <span class=\"function\"><span class=\"params\">WrappedComponent</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> connect(<span class=\"function\">(<span class=\"params\">&#123; &#125;</span>) =&gt;</span> (&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;))(</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">      state=&#123;</span><br><span class=\"line\">        modalParams:&#123;</span><br><span class=\"line\">          visible: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          visibleObject: &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        modalMethods:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state=&#123;</span><br><span class=\"line\">          modalParams:&#123;</span><br><span class=\"line\">            visible: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            visibleObject: &#123;&#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          modalMethods: &#123;</span><br><span class=\"line\">            openModal:<span class=\"keyword\">this</span>.openModal,</span><br><span class=\"line\">            closeModal:<span class=\"keyword\">this</span>.closeModal,</span><br><span class=\"line\">            openOneModal: <span class=\"keyword\">this</span>.openOneModal,</span><br><span class=\"line\">            closeOneModal: <span class=\"keyword\">this</span>.closeOneModal,</span><br><span class=\"line\">            submitModal:<span class=\"keyword\">this</span>.submitModal,</span><br><span class=\"line\">            getModalVisibleObject: <span class=\"keyword\">this</span>.getModalVisibleObject</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 生成多少个弹窗的visible</span></span><br><span class=\"line\">      getModalVisibleObject = <span class=\"function\">(<span class=\"params\">visibleArr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> c = &#123;&#125;</span><br><span class=\"line\">        visibleArr.map(<span class=\"function\">(<span class=\"params\">_</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          c[_] = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">          visibleObject: c</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 页面内只有一个弹窗</span></span><br><span class=\"line\">      openModal = <span class=\"function\">(<span class=\"params\">visible=<span class=\"literal\">true</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">modalParams</span>:&#123;visible&#125;&#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      closeModal = <span class=\"function\">(<span class=\"params\">visible=<span class=\"literal\">false</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">modalParams</span>:&#123;visible&#125;&#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 页面内有多个弹窗</span></span><br><span class=\"line\">      openOneModal = <span class=\"function\">(<span class=\"params\">visibleName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">          modalParams: &#123;</span><br><span class=\"line\">            visibleObject: &#123;</span><br><span class=\"line\">              [visibleName]: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      closeOneModal = <span class=\"function\">(<span class=\"params\">visibleName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">          modalParams: &#123;</span><br><span class=\"line\">            visibleObject: &#123;</span><br><span class=\"line\">              [visibleName]: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      resetFields = <span class=\"function\"><span class=\"params\">()</span>  =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; form &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        form.resetFields()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 提交modal</span></span><br><span class=\"line\"><span class=\"comment\">       * @param &#123;String&#125; dispatchType dispatch的type</span></span><br><span class=\"line\"><span class=\"comment\">       * @param &#123;Object&#125; values 提交的参数</span></span><br><span class=\"line\"><span class=\"comment\">       * @param &#123;string&#125; visibleName 提交的弹窗名字</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      submitModal = <span class=\"function\">(<span class=\"params\">dispatchType, values, visibleName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; dispatch &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        dispatch(&#123;</span><br><span class=\"line\">          type:<span class=\"string\">`<span class=\"subst\">$&#123;dispatchType&#125;</span>`</span>,</span><br><span class=\"line\">          payload: &#123;</span><br><span class=\"line\">            ...values,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          callback: <span class=\"function\">(<span class=\"params\">code, message, description</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(code)&#123;</span><br><span class=\"line\">              notification.success(&#123;message&#125;)</span><br><span class=\"line\">              <span class=\"keyword\">this</span>.resetFields()</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(visibleName)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.closeOneModal(visibleName)</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.closeModal()</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              notification.error(&#123;message, description&#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newProps = &#123;...this.props,...this.state&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &lt;WrappedComponent &#123;...newProps&#125; /&gt;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default ModalSubmitHoc;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在页面中使用<br>页面通过获取props来使用高阶组件的参数和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ModalSubmitHoc <span class=\"keyword\">from</span> <span class=\"string\">'@/hoc/ModalSubmitHoc'</span></span><br><span class=\"line\"></span><br><span class=\"line\">@ModalSubmitHoc</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> 组件 <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"webpack","date":"2018-09-03T02:10:53.000Z","_content":"\n用webpack进行项目打包。本文出自`https://juejin.im/entry/58c2023dda2f600d8722043a`\n<!-- more -->\n\n## 概念——开发与发布\n在开发阶段需要测试，看程序是否跑通。而测试工具在发布时是不需要的，为了分别管理，npm在package.json提供了这个字段\n>devDependencies ——仅开发依赖\n>dependencies ——依赖包\n\n## 开发与部署\n部署会用到和开发阶段不同的webpack配置文件，将输出目录换了另一个。\n>app 放文件的地方\n>build文件夹 是经过webpack打包，自动生成文件的去处。\n>dist文件夹 保存发布版本\n在.app中写东西，打包到build中调试，再发布到dist文件夹\n\n## 配置webpack\n> webpack.config.js 目标build\n> webpack.production.config.js 目标dist \n需要手写。\n```\n// webpack.config.js\nvar path = require(\"path\");\n\nmodule.exports = {\n  entry:  path.join(__dirname, '/app/main.js'),\n  output: {\n    path: path.join(__dirname, '/build'),//打包后的文件存放的地方\n    filename: \"bundle.js\"//打包后输出文件的文件名\n  }\n};\n```\n__dirname 是当前运行的js所在的目录\n\n>模块的依赖书写方式：\n>require——commonJS\n>import/export——ES6 module import（需要babel转换器）\n\n## 配置属性\n1.entry 入口\n  entry值的写法\n  ```\n  entry: path.resolve(__dirname, 'app');\n  entry: path.join(__dirname, 'app');\n  entry: __dirname + '/app';(linux, mac下正确， windows下错误)\n  ```\npath.resolve() 做一些解析，将参数从右到坐拼接，直到遇到一个绝对路径  `/表示路径起点——绝对路径的标志，通常为脚本运行所处的位置`\npath.join() 仅仅进行路径拼接\n\n2.context——entry的根目录\n可以通过context来定义entry的根目录\n```\n{\n  context: path.join(__dirname, 'app'),\n  entry: 'entry'\n}\n```\n\n3.output `https://www.jianshu.com/p/dcb28b582318`\n规定如何将打包后的文件写在磁盘里\noutput.path 仅仅告诉webpack结果存储到哪儿\noutput.publicPath 被许多webpack的插件用于在生产模式下更新 内嵌到css,html文件里的url值\n\n4.webpack-dev-server 服务器工具\n```\n$ npm install --save-dev webpack-dev-server\n```\nserver内部调用webpack，好处是提供了额外的功能，如热更新“Live Reload”以及热替换“Hot Module Replacement”\n[HMR] hot模块（局部刷新）\n[WDS] webpack-dev-server模块\n使用react-hot-loader\n```\nnpm install --save-dev react-hot-loader@3.0.0-beta.6\n```\n使用babel，若babel配置太多，就新建.babelrc\n```\nnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-2\n```\n","source":"_posts/webpack.md","raw":"---\ntitle: webpack\ndate: 2018-09-03 10:10:53\ntags:\n- webpack\ncategories:\n- 打包工具\n---\n\n用webpack进行项目打包。本文出自`https://juejin.im/entry/58c2023dda2f600d8722043a`\n<!-- more -->\n\n## 概念——开发与发布\n在开发阶段需要测试，看程序是否跑通。而测试工具在发布时是不需要的，为了分别管理，npm在package.json提供了这个字段\n>devDependencies ——仅开发依赖\n>dependencies ——依赖包\n\n## 开发与部署\n部署会用到和开发阶段不同的webpack配置文件，将输出目录换了另一个。\n>app 放文件的地方\n>build文件夹 是经过webpack打包，自动生成文件的去处。\n>dist文件夹 保存发布版本\n在.app中写东西，打包到build中调试，再发布到dist文件夹\n\n## 配置webpack\n> webpack.config.js 目标build\n> webpack.production.config.js 目标dist \n需要手写。\n```\n// webpack.config.js\nvar path = require(\"path\");\n\nmodule.exports = {\n  entry:  path.join(__dirname, '/app/main.js'),\n  output: {\n    path: path.join(__dirname, '/build'),//打包后的文件存放的地方\n    filename: \"bundle.js\"//打包后输出文件的文件名\n  }\n};\n```\n__dirname 是当前运行的js所在的目录\n\n>模块的依赖书写方式：\n>require——commonJS\n>import/export——ES6 module import（需要babel转换器）\n\n## 配置属性\n1.entry 入口\n  entry值的写法\n  ```\n  entry: path.resolve(__dirname, 'app');\n  entry: path.join(__dirname, 'app');\n  entry: __dirname + '/app';(linux, mac下正确， windows下错误)\n  ```\npath.resolve() 做一些解析，将参数从右到坐拼接，直到遇到一个绝对路径  `/表示路径起点——绝对路径的标志，通常为脚本运行所处的位置`\npath.join() 仅仅进行路径拼接\n\n2.context——entry的根目录\n可以通过context来定义entry的根目录\n```\n{\n  context: path.join(__dirname, 'app'),\n  entry: 'entry'\n}\n```\n\n3.output `https://www.jianshu.com/p/dcb28b582318`\n规定如何将打包后的文件写在磁盘里\noutput.path 仅仅告诉webpack结果存储到哪儿\noutput.publicPath 被许多webpack的插件用于在生产模式下更新 内嵌到css,html文件里的url值\n\n4.webpack-dev-server 服务器工具\n```\n$ npm install --save-dev webpack-dev-server\n```\nserver内部调用webpack，好处是提供了额外的功能，如热更新“Live Reload”以及热替换“Hot Module Replacement”\n[HMR] hot模块（局部刷新）\n[WDS] webpack-dev-server模块\n使用react-hot-loader\n```\nnpm install --save-dev react-hot-loader@3.0.0-beta.6\n```\n使用babel，若babel配置太多，就新建.babelrc\n```\nnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-2\n```\n","slug":"webpack","published":1,"updated":"2019-03-12T04:22:48.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovl0019g8rxs6u4ci5l","content":"<p>用webpack进行项目打包。本文出自<code>https://juejin.im/entry/58c2023dda2f600d8722043a</code><br><a id=\"more\"></a></p>\n<h2 id=\"概念——开发与发布\"><a href=\"#概念——开发与发布\" class=\"headerlink\" title=\"概念——开发与发布\"></a>概念——开发与发布</h2><p>在开发阶段需要测试，看程序是否跑通。而测试工具在发布时是不需要的，为了分别管理，npm在package.json提供了这个字段</p>\n<blockquote>\n<p>devDependencies ——仅开发依赖<br>dependencies ——依赖包</p>\n</blockquote>\n<h2 id=\"开发与部署\"><a href=\"#开发与部署\" class=\"headerlink\" title=\"开发与部署\"></a>开发与部署</h2><p>部署会用到和开发阶段不同的webpack配置文件，将输出目录换了另一个。</p>\n<blockquote>\n<p>app 放文件的地方<br>build文件夹 是经过webpack打包，自动生成文件的去处。<br>dist文件夹 保存发布版本<br>在.app中写东西，打包到build中调试，再发布到dist文件夹</p>\n</blockquote>\n<h2 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h2><blockquote>\n<p>webpack.config.js 目标build<br>webpack.production.config.js 目标dist<br>需要手写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.config.js</span><br><span class=\"line\">var path = require(&quot;path&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry:  path.join(__dirname, &apos;/app/main.js&apos;),</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, &apos;/build&apos;),//打包后的文件存放的地方</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>__dirname 是当前运行的js所在的目录</p>\n<blockquote>\n<p>模块的依赖书写方式：<br>require——commonJS<br>import/export——ES6 module import（需要babel转换器）</p>\n</blockquote>\n<h2 id=\"配置属性\"><a href=\"#配置属性\" class=\"headerlink\" title=\"配置属性\"></a>配置属性</h2><p>1.entry 入口<br>  entry值的写法<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: path.resolve(__dirname, &apos;app&apos;);</span><br><span class=\"line\">entry: path.join(__dirname, &apos;app&apos;);</span><br><span class=\"line\">entry: __dirname + &apos;/app&apos;;(linux, mac下正确， windows下错误)</span><br></pre></td></tr></table></figure></p>\n<p>path.resolve() 做一些解析，将参数从右到坐拼接，直到遇到一个绝对路径  <code>/表示路径起点——绝对路径的标志，通常为脚本运行所处的位置</code><br>path.join() 仅仅进行路径拼接</p>\n<p>2.context——entry的根目录<br>可以通过context来定义entry的根目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  context: path.join(__dirname, &apos;app&apos;),</span><br><span class=\"line\">  entry: &apos;entry&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.output <code>https://www.jianshu.com/p/dcb28b582318</code><br>规定如何将打包后的文件写在磁盘里<br>output.path 仅仅告诉webpack结果存储到哪儿<br>output.publicPath 被许多webpack的插件用于在生产模式下更新 内嵌到css,html文件里的url值</p>\n<p>4.webpack-dev-server 服务器工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure></p>\n<p>server内部调用webpack，好处是提供了额外的功能，如热更新“Live Reload”以及热替换“Hot Module Replacement”<br>[HMR] hot模块（局部刷新）<br>[WDS] webpack-dev-server模块<br>使用react-hot-loader<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev react-hot-loader@3.0.0-beta.6</span><br></pre></td></tr></table></figure></p>\n<p>使用babel，若babel配置太多，就新建.babelrc<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-2</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>用webpack进行项目打包。本文出自<code>https://juejin.im/entry/58c2023dda2f600d8722043a</code><br>","more":"</p>\n<h2 id=\"概念——开发与发布\"><a href=\"#概念——开发与发布\" class=\"headerlink\" title=\"概念——开发与发布\"></a>概念——开发与发布</h2><p>在开发阶段需要测试，看程序是否跑通。而测试工具在发布时是不需要的，为了分别管理，npm在package.json提供了这个字段</p>\n<blockquote>\n<p>devDependencies ——仅开发依赖<br>dependencies ——依赖包</p>\n</blockquote>\n<h2 id=\"开发与部署\"><a href=\"#开发与部署\" class=\"headerlink\" title=\"开发与部署\"></a>开发与部署</h2><p>部署会用到和开发阶段不同的webpack配置文件，将输出目录换了另一个。</p>\n<blockquote>\n<p>app 放文件的地方<br>build文件夹 是经过webpack打包，自动生成文件的去处。<br>dist文件夹 保存发布版本<br>在.app中写东西，打包到build中调试，再发布到dist文件夹</p>\n</blockquote>\n<h2 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h2><blockquote>\n<p>webpack.config.js 目标build<br>webpack.production.config.js 目标dist<br>需要手写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.config.js</span><br><span class=\"line\">var path = require(&quot;path&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry:  path.join(__dirname, &apos;/app/main.js&apos;),</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, &apos;/build&apos;),//打包后的文件存放的地方</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>__dirname 是当前运行的js所在的目录</p>\n<blockquote>\n<p>模块的依赖书写方式：<br>require——commonJS<br>import/export——ES6 module import（需要babel转换器）</p>\n</blockquote>\n<h2 id=\"配置属性\"><a href=\"#配置属性\" class=\"headerlink\" title=\"配置属性\"></a>配置属性</h2><p>1.entry 入口<br>  entry值的写法<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: path.resolve(__dirname, &apos;app&apos;);</span><br><span class=\"line\">entry: path.join(__dirname, &apos;app&apos;);</span><br><span class=\"line\">entry: __dirname + &apos;/app&apos;;(linux, mac下正确， windows下错误)</span><br></pre></td></tr></table></figure></p>\n<p>path.resolve() 做一些解析，将参数从右到坐拼接，直到遇到一个绝对路径  <code>/表示路径起点——绝对路径的标志，通常为脚本运行所处的位置</code><br>path.join() 仅仅进行路径拼接</p>\n<p>2.context——entry的根目录<br>可以通过context来定义entry的根目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  context: path.join(__dirname, &apos;app&apos;),</span><br><span class=\"line\">  entry: &apos;entry&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.output <code>https://www.jianshu.com/p/dcb28b582318</code><br>规定如何将打包后的文件写在磁盘里<br>output.path 仅仅告诉webpack结果存储到哪儿<br>output.publicPath 被许多webpack的插件用于在生产模式下更新 内嵌到css,html文件里的url值</p>\n<p>4.webpack-dev-server 服务器工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure></p>\n<p>server内部调用webpack，好处是提供了额外的功能，如热更新“Live Reload”以及热替换“Hot Module Replacement”<br>[HMR] hot模块（局部刷新）<br>[WDS] webpack-dev-server模块<br>使用react-hot-loader<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev react-hot-loader@3.0.0-beta.6</span><br></pre></td></tr></table></figure></p>\n<p>使用babel，若babel配置太多，就新建.babelrc<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-2</span><br></pre></td></tr></table></figure></p>"},{"title":"使用fetch实现文件下载","date":"2019-01-23T08:00:56.000Z","blogexcerpt":"当我们要实现一个下载的功能时，浏览器会通过文件的MIME类型来决定是直接打开文件，还是下载文件。比如：当需要下载的文件是图片或者视频时，浏览器会自动打开文件。最近遇到了一个需要下载视频的需求，在这里记录一下过程。","_content":"\n>文档地址：[https://www.yuque.com/ant-design/course/wvbsue](https://www.yuque.com/ant-design/course/wvbsue)\n\n当我们要实现一个下载的功能时，浏览器会通过文件的MIME类型来决定是直接打开文件，还是下载文件。比如：当需要下载的文件是图片或者视频时，浏览器会自动打开文件。最近遇到了一个需要下载视频的需求，在这里记录一下过程。\n\n项目是antd design pro搭建的，视频的下载这个过程是使用fetch去模拟a标签的下载过程。代码示例如下：\n```javascript\n    import fetch from 'dva/fetch'\n    fetch('http://somehost/somefile.zip')\n        // 1.\n        .then(res => res.blob())\n        .then(blob => {\n            // 2.\n            var a = document.createElement('a');\n            var url = window.URL.createObjectURL(blob);\n            var filename = 'myfile.zip';\n            a.href = url;\n            a.download = filename;\n            // 3.\n            a.click();\n            // 4.\n            window.URL.revokeObjectURL(url);\n        }))\n```\n1. fetch 一个接口获取其内容并转成 [blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) 对象。\n2. 将 blob 对象使用 [createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL) 方法转化成 ObjectURL，等同于一个下载地址链接。\n3. 创建一个 a 标签，并赋予 ObjectURL 且执行一次 click。\n4. 通过 [revokeObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL) 回收 ObjectURL。","source":"_posts/使用fetch实现文件下载.md","raw":"---\ntitle: 使用fetch实现文件下载\ndate: 2019-1-23 16:00:56\ntags: \n- fetch \n- 下载 \ncategory: \n- react\nblogexcerpt: 当我们要实现一个下载的功能时，浏览器会通过文件的MIME类型来决定是直接打开文件，还是下载文件。比如：当需要下载的文件是图片或者视频时，浏览器会自动打开文件。最近遇到了一个需要下载视频的需求，在这里记录一下过程。\n---\n\n>文档地址：[https://www.yuque.com/ant-design/course/wvbsue](https://www.yuque.com/ant-design/course/wvbsue)\n\n当我们要实现一个下载的功能时，浏览器会通过文件的MIME类型来决定是直接打开文件，还是下载文件。比如：当需要下载的文件是图片或者视频时，浏览器会自动打开文件。最近遇到了一个需要下载视频的需求，在这里记录一下过程。\n\n项目是antd design pro搭建的，视频的下载这个过程是使用fetch去模拟a标签的下载过程。代码示例如下：\n```javascript\n    import fetch from 'dva/fetch'\n    fetch('http://somehost/somefile.zip')\n        // 1.\n        .then(res => res.blob())\n        .then(blob => {\n            // 2.\n            var a = document.createElement('a');\n            var url = window.URL.createObjectURL(blob);\n            var filename = 'myfile.zip';\n            a.href = url;\n            a.download = filename;\n            // 3.\n            a.click();\n            // 4.\n            window.URL.revokeObjectURL(url);\n        }))\n```\n1. fetch 一个接口获取其内容并转成 [blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) 对象。\n2. 将 blob 对象使用 [createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL) 方法转化成 ObjectURL，等同于一个下载地址链接。\n3. 创建一个 a 标签，并赋予 ObjectURL 且执行一次 click。\n4. 通过 [revokeObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL) 回收 ObjectURL。","slug":"使用fetch实现文件下载","published":1,"updated":"2019-03-12T04:22:48.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovm001bg8rxyffqy6k5","content":"<blockquote>\n<p>文档地址：<a href=\"https://www.yuque.com/ant-design/course/wvbsue\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/ant-design/course/wvbsue</a></p>\n</blockquote>\n<p>当我们要实现一个下载的功能时，浏览器会通过文件的MIME类型来决定是直接打开文件，还是下载文件。比如：当需要下载的文件是图片或者视频时，浏览器会自动打开文件。最近遇到了一个需要下载视频的需求，在这里记录一下过程。</p>\n<p>项目是antd design pro搭建的，视频的下载这个过程是使用fetch去模拟a标签的下载过程。代码示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fetch <span class=\"keyword\">from</span> <span class=\"string\">'dva/fetch'</span></span><br><span class=\"line\">fetch(<span class=\"string\">'http://somehost/somefile.zip'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 1.</span></span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.blob())</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> filename = <span class=\"string\">'myfile.zip'</span>;</span><br><span class=\"line\">        a.href = url;</span><br><span class=\"line\">        a.download = filename;</span><br><span class=\"line\">        <span class=\"comment\">// 3.</span></span><br><span class=\"line\">        a.click();</span><br><span class=\"line\">        <span class=\"comment\">// 4.</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(url);</span><br><span class=\"line\">    &#125;))</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>fetch 一个接口获取其内容并转成 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\" target=\"_blank\" rel=\"noopener\">blob</a> 对象。</li>\n<li>将 blob 对象使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\" target=\"_blank\" rel=\"noopener\">createObjectURL</a> 方法转化成 ObjectURL，等同于一个下载地址链接。</li>\n<li>创建一个 a 标签，并赋予 ObjectURL 且执行一次 click。</li>\n<li>通过 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL\" target=\"_blank\" rel=\"noopener\">revokeObjectURL</a> 回收 ObjectURL。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>文档地址：<a href=\"https://www.yuque.com/ant-design/course/wvbsue\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/ant-design/course/wvbsue</a></p>\n</blockquote>\n<p>当我们要实现一个下载的功能时，浏览器会通过文件的MIME类型来决定是直接打开文件，还是下载文件。比如：当需要下载的文件是图片或者视频时，浏览器会自动打开文件。最近遇到了一个需要下载视频的需求，在这里记录一下过程。</p>\n<p>项目是antd design pro搭建的，视频的下载这个过程是使用fetch去模拟a标签的下载过程。代码示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fetch <span class=\"keyword\">from</span> <span class=\"string\">'dva/fetch'</span></span><br><span class=\"line\">fetch(<span class=\"string\">'http://somehost/somefile.zip'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 1.</span></span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.blob())</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> filename = <span class=\"string\">'myfile.zip'</span>;</span><br><span class=\"line\">        a.href = url;</span><br><span class=\"line\">        a.download = filename;</span><br><span class=\"line\">        <span class=\"comment\">// 3.</span></span><br><span class=\"line\">        a.click();</span><br><span class=\"line\">        <span class=\"comment\">// 4.</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(url);</span><br><span class=\"line\">    &#125;))</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>fetch 一个接口获取其内容并转成 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\" target=\"_blank\" rel=\"noopener\">blob</a> 对象。</li>\n<li>将 blob 对象使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\" target=\"_blank\" rel=\"noopener\">createObjectURL</a> 方法转化成 ObjectURL，等同于一个下载地址链接。</li>\n<li>创建一个 a 标签，并赋予 ObjectURL 且执行一次 click。</li>\n<li>通过 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL\" target=\"_blank\" rel=\"noopener\">revokeObjectURL</a> 回收 ObjectURL。</li>\n</ol>\n"},{"title":"使用less定制bootstrap的过程","date":"2018-03-04T07:33:07.000Z","_content":"\n本例更改了导航部分的颜色。\n<!-- more -->\n\n\n![](./1.jpg \"下载\")\n![](./2.jpg \"less\")\n![](./3.jpg \"定制\")\n![](./4.jpg \"定制\")\n![](./5.jpg \"定制\")\n>定制完成之后就可以进行编译了。\n![](./6.jpg \"编译\")\n\n","source":"_posts/使用less定制bootstrap的过程.md","raw":"---\ntitle: 使用less定制bootstrap的过程\ndate: 2018-03-04 15:33:07\ntags: \n- css \n- less\n- bootstrap\ncategories:\n- 前端编译器 \n---\n\n本例更改了导航部分的颜色。\n<!-- more -->\n\n\n![](./1.jpg \"下载\")\n![](./2.jpg \"less\")\n![](./3.jpg \"定制\")\n![](./4.jpg \"定制\")\n![](./5.jpg \"定制\")\n>定制完成之后就可以进行编译了。\n![](./6.jpg \"编译\")\n\n","slug":"使用less定制bootstrap的过程","published":1,"updated":"2019-03-12T04:22:48.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovo001eg8rxrbiw3bpg","content":"<p>本例更改了导航部分的颜色。<br><a id=\"more\"></a></p>\n<p><img src=\"./1.jpg\" alt title=\"下载\"><br><img src=\"./2.jpg\" alt title=\"less\"><br><img src=\"./3.jpg\" alt title=\"定制\"><br><img src=\"./4.jpg\" alt title=\"定制\"><br><img src=\"./5.jpg\" alt title=\"定制\"></p>\n<blockquote>\n<p>定制完成之后就可以进行编译了。<br><img src=\"./6.jpg\" alt title=\"编译\"></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本例更改了导航部分的颜色。<br>","more":"</p>\n<p><img src=\"./1.jpg\" alt title=\"下载\"><br><img src=\"./2.jpg\" alt title=\"less\"><br><img src=\"./3.jpg\" alt title=\"定制\"><br><img src=\"./4.jpg\" alt title=\"定制\"><br><img src=\"./5.jpg\" alt title=\"定制\"></p>\n<blockquote>\n<p>定制完成之后就可以进行编译了。<br><img src=\"./6.jpg\" alt title=\"编译\"></p>\n</blockquote>"},{"title":"关于es6","date":"2018-09-06T01:41:32.000Z","_content":"\n箭头函数的那些事儿\n由于大括号会被解析为代码块，所以当返回一个对象时，需要在对象外面加一个括号，否则会报错\n```javascript\nvar getObj = time => ({type:'哈哈哈',time})\n```\n\n","source":"_posts/关于es6.md","raw":"---\ntitle: 关于es6\ndate: 2018-09-06 09:41:32\ntags:\n- javascript \ncategories:\n- es6\n---\n\n箭头函数的那些事儿\n由于大括号会被解析为代码块，所以当返回一个对象时，需要在对象外面加一个括号，否则会报错\n```javascript\nvar getObj = time => ({type:'哈哈哈',time})\n```\n\n","slug":"关于es6","published":1,"updated":"2019-03-12T04:22:48.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovq001ig8rx68dou1ho","content":"<p>箭头函数的那些事儿<br>由于大括号会被解析为代码块，所以当返回一个对象时，需要在对象外面加一个括号，否则会报错<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getObj = <span class=\"function\"><span class=\"params\">time</span> =&gt;</span> (&#123;<span class=\"attr\">type</span>:<span class=\"string\">'哈哈哈'</span>,time&#125;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>箭头函数的那些事儿<br>由于大括号会被解析为代码块，所以当返回一个对象时，需要在对象外面加一个括号，否则会报错<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getObj = <span class=\"function\"><span class=\"params\">time</span> =&gt;</span> (&#123;<span class=\"attr\">type</span>:<span class=\"string\">'哈哈哈'</span>,time&#125;)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"关于redux","date":"2018-09-06T01:50:02.000Z","blogexcerpt":"redux是一个很好的东西","_content":"\n>前言：如果你的应用没那么复杂，就没必要用它。另一方面，Redux 只是 Web 架构的一种解决方案，也可以选择其他方案。\n### 适用场景\nredux的适用场景：`多交互/多数据源`\n* 某个组件的状态，需要共享\n* 某个状态需要在任何地方都可以拿到\n* 一个组件需要改变全局状态\n* 一个组件需要改变另一个组件的状态\n### 设计思想\n* Web 应用是一个状态机，视图与状态是一一对应的。\n* 所有的状态，保存在一个对象里面。\n### 基本概念\n1. store\n`Store`就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 `Store`。\nRedux 提供`createStore`这个函数，用来生成 Store。\n```javascript\nimport { createStore } from 'redux';\n\nconst store = createStore(fn);\n```\n上面代码中，`createStore`函数接受另一个函数作为参数，返回新生成的 Store 对象。\n2. state\nStore 对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 `State`。\n\n当前时刻的 `State`，可以通过`store.getState()`拿到。\n```javascript\nimport { createStore } from 'redux';\nconst store = createStore(fn);\n\nconst state = store.getState();\n```\nRedux 规定， 一个 `State` 对应一个 View。只要 `State` 相同，View 就相同。你知道 `State`，就知道 View 是什么样，反之亦然。\n3. action\nState 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。`Action` 就是 View 发出的通知，表示 State 应该要发生变化了。\n\n`Action` 是一个对象。其中的`type`属性是必须的，表示 Action 的名称。其他属性可以自由设置，[社区](https://github.com/redux-utilities/flux-standard-action)有一个规范可以参考。\n```javascript\nconst action = {\n  type: 'ADD_TODO',\n  payload: 'Learn Redux'\n};\n```\n上面代码中，`Action` 的名称是`ADD_TODO`，它携带的信息是字符串`Learn Redux`。\n\n可以这样理解，`Action` 描述当前发生的事情。改变 State 的唯一办法，就是使用 `Action`。它会运送数据到 Store。\n4. Action Creator\nView 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 `Action Creator`。\n```javascript\nconst ADD_TODO = '添加 TODO';\n\nfunction addTodo(payload) {\n  return {\n    type: ADD_TODO,\n    payload\n  }\n}\n\nconst action = addTodo('Learn Redux');\n```\n上面代码中，`addTodo`函数就是一个 `Action Creator`。\n5. store.dispatch()\n`store.dispatch()`是 View 发出 Action 的唯一方法。\n```javascript\nimport { createStore } from 'redux';\nconst store = createStore(fn);\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  payload: 'Learn Redux'\n});\n```\n上面代码中，store.dispatch接受一个 Action 对象作为参数，将它发送出去。\n\n结合 Action Creator，这段代码可以改写如下。\n```javascript\nstore.dispatch(addTodo('Learn Redux'));\n```\n6. reducer\nStore 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 `Reducer`。\n\n`Reducer` 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。\n整个应用的初始状态，可以作为 State 的默认值。下面是一个实际的例子。\n```javascript\nconst defaultState = 0;\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'ADD':\n      return state + action.payload;\n    default: \n      return state;\n  }\n};\n\nconst state = reducer(1, {\n  type: 'ADD',\n  payload: 2\n});\n```\n上面代码中，`reducer`函数收到名为ADD的 Action 以后，就返回一个新的 State，作为加法的计算结果。其他运算的逻辑（比如减法），也可以根据 Action 的不同来实现。\n\n实际应用中，`Reducer` 函数不用像上面这样手动调用，store.dispatch方法会触发 `Reducer` 的自动执行。为此，Store 需要知道 `Reducer` 函数，做法就是在生成 Store 的时候，将 `Reducer` 传入createStore方法。\n```javascript\nimport { createStore } from 'redux';\nconst store = createStore(reducer);\n```\n具体参见见阮一峰的网络日志http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\n\n## 中间件react-thunk与异步操作\n上述的所有是同步的操作，若需要异步操作的话需要使用中间件\nhttp://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html","source":"_posts/关于redux.md","raw":"---\ntitle: 关于redux\ndate: 2018-09-06 09:50:02\ntags:\n- redux\n- redux-thunk\ncategories:\n- react\nblogexcerpt: redux是一个很好的东西\n---\n\n>前言：如果你的应用没那么复杂，就没必要用它。另一方面，Redux 只是 Web 架构的一种解决方案，也可以选择其他方案。\n### 适用场景\nredux的适用场景：`多交互/多数据源`\n* 某个组件的状态，需要共享\n* 某个状态需要在任何地方都可以拿到\n* 一个组件需要改变全局状态\n* 一个组件需要改变另一个组件的状态\n### 设计思想\n* Web 应用是一个状态机，视图与状态是一一对应的。\n* 所有的状态，保存在一个对象里面。\n### 基本概念\n1. store\n`Store`就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 `Store`。\nRedux 提供`createStore`这个函数，用来生成 Store。\n```javascript\nimport { createStore } from 'redux';\n\nconst store = createStore(fn);\n```\n上面代码中，`createStore`函数接受另一个函数作为参数，返回新生成的 Store 对象。\n2. state\nStore 对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 `State`。\n\n当前时刻的 `State`，可以通过`store.getState()`拿到。\n```javascript\nimport { createStore } from 'redux';\nconst store = createStore(fn);\n\nconst state = store.getState();\n```\nRedux 规定， 一个 `State` 对应一个 View。只要 `State` 相同，View 就相同。你知道 `State`，就知道 View 是什么样，反之亦然。\n3. action\nState 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。`Action` 就是 View 发出的通知，表示 State 应该要发生变化了。\n\n`Action` 是一个对象。其中的`type`属性是必须的，表示 Action 的名称。其他属性可以自由设置，[社区](https://github.com/redux-utilities/flux-standard-action)有一个规范可以参考。\n```javascript\nconst action = {\n  type: 'ADD_TODO',\n  payload: 'Learn Redux'\n};\n```\n上面代码中，`Action` 的名称是`ADD_TODO`，它携带的信息是字符串`Learn Redux`。\n\n可以这样理解，`Action` 描述当前发生的事情。改变 State 的唯一办法，就是使用 `Action`。它会运送数据到 Store。\n4. Action Creator\nView 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 `Action Creator`。\n```javascript\nconst ADD_TODO = '添加 TODO';\n\nfunction addTodo(payload) {\n  return {\n    type: ADD_TODO,\n    payload\n  }\n}\n\nconst action = addTodo('Learn Redux');\n```\n上面代码中，`addTodo`函数就是一个 `Action Creator`。\n5. store.dispatch()\n`store.dispatch()`是 View 发出 Action 的唯一方法。\n```javascript\nimport { createStore } from 'redux';\nconst store = createStore(fn);\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  payload: 'Learn Redux'\n});\n```\n上面代码中，store.dispatch接受一个 Action 对象作为参数，将它发送出去。\n\n结合 Action Creator，这段代码可以改写如下。\n```javascript\nstore.dispatch(addTodo('Learn Redux'));\n```\n6. reducer\nStore 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 `Reducer`。\n\n`Reducer` 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。\n整个应用的初始状态，可以作为 State 的默认值。下面是一个实际的例子。\n```javascript\nconst defaultState = 0;\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'ADD':\n      return state + action.payload;\n    default: \n      return state;\n  }\n};\n\nconst state = reducer(1, {\n  type: 'ADD',\n  payload: 2\n});\n```\n上面代码中，`reducer`函数收到名为ADD的 Action 以后，就返回一个新的 State，作为加法的计算结果。其他运算的逻辑（比如减法），也可以根据 Action 的不同来实现。\n\n实际应用中，`Reducer` 函数不用像上面这样手动调用，store.dispatch方法会触发 `Reducer` 的自动执行。为此，Store 需要知道 `Reducer` 函数，做法就是在生成 Store 的时候，将 `Reducer` 传入createStore方法。\n```javascript\nimport { createStore } from 'redux';\nconst store = createStore(reducer);\n```\n具体参见见阮一峰的网络日志http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\n\n## 中间件react-thunk与异步操作\n上述的所有是同步的操作，若需要异步操作的话需要使用中间件\nhttp://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html","slug":"关于redux","published":1,"updated":"2019-03-12T04:22:48.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovr001mg8rx2wet7zm6","content":"<blockquote>\n<p>前言：如果你的应用没那么复杂，就没必要用它。另一方面，Redux 只是 Web 架构的一种解决方案，也可以选择其他方案。</p>\n</blockquote>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>redux的适用场景：<code>多交互/多数据源</code></p>\n<ul>\n<li>某个组件的状态，需要共享</li>\n<li>某个状态需要在任何地方都可以拿到</li>\n<li>一个组件需要改变全局状态</li>\n<li>一个组件需要改变另一个组件的状态<h3 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h3></li>\n<li>Web 应用是一个状态机，视图与状态是一一对应的。</li>\n<li>所有的状态，保存在一个对象里面。<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3></li>\n</ul>\n<ol>\n<li>store<br><code>Store</code>就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 <code>Store</code>。<br>Redux 提供<code>createStore</code>这个函数，用来生成 Store。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码中，<code>createStore</code>函数接受另一个函数作为参数，返回新生成的 Store 对象。</p>\n<ol start=\"2\">\n<li>state<br>Store 对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 <code>State</code>。</li>\n</ol>\n<p>当前时刻的 <code>State</code>，可以通过<code>store.getState()</code>拿到。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = store.getState();</span><br></pre></td></tr></table></figure></p>\n<p>Redux 规定， 一个 <code>State</code> 对应一个 View。只要 <code>State</code> 相同，View 就相同。你知道 <code>State</code>，就知道 View 是什么样，反之亦然。</p>\n<ol start=\"3\">\n<li>action<br>State 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。<code>Action</code> 就是 View 发出的通知，表示 State 应该要发生变化了。</li>\n</ol>\n<p><code>Action</code> 是一个对象。其中的<code>type</code>属性是必须的，表示 Action 的名称。其他属性可以自由设置，<a href=\"https://github.com/redux-utilities/flux-standard-action\" target=\"_blank\" rel=\"noopener\">社区</a>有一个规范可以参考。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_TODO'</span>,</span><br><span class=\"line\">  payload: <span class=\"string\">'Learn Redux'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，<code>Action</code> 的名称是<code>ADD_TODO</code>，它携带的信息是字符串<code>Learn Redux</code>。</p>\n<p>可以这样理解，<code>Action</code> 描述当前发生的事情。改变 State 的唯一办法，就是使用 <code>Action</code>。它会运送数据到 Store。</p>\n<ol start=\"4\">\n<li>Action Creator<br>View 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 <code>Action Creator</code>。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ADD_TODO = <span class=\"string\">'添加 TODO'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">payload</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type: ADD_TODO,</span><br><span class=\"line\">    payload</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> action = addTodo(<span class=\"string\">'Learn Redux'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码中，<code>addTodo</code>函数就是一个 <code>Action Creator</code>。</p>\n<ol start=\"5\">\n<li>store.dispatch()<br><code>store.dispatch()</code>是 View 发出 Action 的唯一方法。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_TODO'</span>,</span><br><span class=\"line\">  payload: <span class=\"string\">'Learn Redux'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码中，store.dispatch接受一个 Action 对象作为参数，将它发送出去。</p>\n<p>结合 Action Creator，这段代码可以改写如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(addTodo(<span class=\"string\">'Learn Redux'</span>));</span><br></pre></td></tr></table></figure></p>\n<ol start=\"6\">\n<li>reducer<br>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 <code>Reducer</code>。</li>\n</ol>\n<p><code>Reducer</code> 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。<br>整个应用的初始状态，可以作为 State 的默认值。下面是一个实际的例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> defaultState = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state = defaultState, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'ADD'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state + action.payload;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = reducer(<span class=\"number\">1</span>, &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD'</span>,</span><br><span class=\"line\">  payload: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，<code>reducer</code>函数收到名为ADD的 Action 以后，就返回一个新的 State，作为加法的计算结果。其他运算的逻辑（比如减法），也可以根据 Action 的不同来实现。</p>\n<p>实际应用中，<code>Reducer</code> 函数不用像上面这样手动调用，store.dispatch方法会触发 <code>Reducer</code> 的自动执行。为此，Store 需要知道 <code>Reducer</code> 函数，做法就是在生成 Store 的时候，将 <code>Reducer</code> 传入createStore方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer);</span><br></pre></td></tr></table></figure></p>\n<p>具体参见见阮一峰的网络日志<a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html</a></p>\n<h2 id=\"中间件react-thunk与异步操作\"><a href=\"#中间件react-thunk与异步操作\" class=\"headerlink\" title=\"中间件react-thunk与异步操作\"></a>中间件react-thunk与异步操作</h2><p>上述的所有是同步的操作，若需要异步操作的话需要使用中间件<br><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>前言：如果你的应用没那么复杂，就没必要用它。另一方面，Redux 只是 Web 架构的一种解决方案，也可以选择其他方案。</p>\n</blockquote>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>redux的适用场景：<code>多交互/多数据源</code></p>\n<ul>\n<li>某个组件的状态，需要共享</li>\n<li>某个状态需要在任何地方都可以拿到</li>\n<li>一个组件需要改变全局状态</li>\n<li>一个组件需要改变另一个组件的状态<h3 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h3></li>\n<li>Web 应用是一个状态机，视图与状态是一一对应的。</li>\n<li>所有的状态，保存在一个对象里面。<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3></li>\n</ul>\n<ol>\n<li>store<br><code>Store</code>就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 <code>Store</code>。<br>Redux 提供<code>createStore</code>这个函数，用来生成 Store。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码中，<code>createStore</code>函数接受另一个函数作为参数，返回新生成的 Store 对象。</p>\n<ol start=\"2\">\n<li>state<br>Store 对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 <code>State</code>。</li>\n</ol>\n<p>当前时刻的 <code>State</code>，可以通过<code>store.getState()</code>拿到。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = store.getState();</span><br></pre></td></tr></table></figure></p>\n<p>Redux 规定， 一个 <code>State</code> 对应一个 View。只要 <code>State</code> 相同，View 就相同。你知道 <code>State</code>，就知道 View 是什么样，反之亦然。</p>\n<ol start=\"3\">\n<li>action<br>State 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。<code>Action</code> 就是 View 发出的通知，表示 State 应该要发生变化了。</li>\n</ol>\n<p><code>Action</code> 是一个对象。其中的<code>type</code>属性是必须的，表示 Action 的名称。其他属性可以自由设置，<a href=\"https://github.com/redux-utilities/flux-standard-action\" target=\"_blank\" rel=\"noopener\">社区</a>有一个规范可以参考。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_TODO'</span>,</span><br><span class=\"line\">  payload: <span class=\"string\">'Learn Redux'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，<code>Action</code> 的名称是<code>ADD_TODO</code>，它携带的信息是字符串<code>Learn Redux</code>。</p>\n<p>可以这样理解，<code>Action</code> 描述当前发生的事情。改变 State 的唯一办法，就是使用 <code>Action</code>。它会运送数据到 Store。</p>\n<ol start=\"4\">\n<li>Action Creator<br>View 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 <code>Action Creator</code>。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ADD_TODO = <span class=\"string\">'添加 TODO'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">payload</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type: ADD_TODO,</span><br><span class=\"line\">    payload</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> action = addTodo(<span class=\"string\">'Learn Redux'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码中，<code>addTodo</code>函数就是一个 <code>Action Creator</code>。</p>\n<ol start=\"5\">\n<li>store.dispatch()<br><code>store.dispatch()</code>是 View 发出 Action 的唯一方法。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_TODO'</span>,</span><br><span class=\"line\">  payload: <span class=\"string\">'Learn Redux'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面代码中，store.dispatch接受一个 Action 对象作为参数，将它发送出去。</p>\n<p>结合 Action Creator，这段代码可以改写如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(addTodo(<span class=\"string\">'Learn Redux'</span>));</span><br></pre></td></tr></table></figure></p>\n<ol start=\"6\">\n<li>reducer<br>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 <code>Reducer</code>。</li>\n</ol>\n<p><code>Reducer</code> 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。<br>整个应用的初始状态，可以作为 State 的默认值。下面是一个实际的例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> defaultState = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state = defaultState, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'ADD'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state + action.payload;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = reducer(<span class=\"number\">1</span>, &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD'</span>,</span><br><span class=\"line\">  payload: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，<code>reducer</code>函数收到名为ADD的 Action 以后，就返回一个新的 State，作为加法的计算结果。其他运算的逻辑（比如减法），也可以根据 Action 的不同来实现。</p>\n<p>实际应用中，<code>Reducer</code> 函数不用像上面这样手动调用，store.dispatch方法会触发 <code>Reducer</code> 的自动执行。为此，Store 需要知道 <code>Reducer</code> 函数，做法就是在生成 Store 的时候，将 <code>Reducer</code> 传入createStore方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer);</span><br></pre></td></tr></table></figure></p>\n<p>具体参见见阮一峰的网络日志<a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html</a></p>\n<h2 id=\"中间件react-thunk与异步操作\"><a href=\"#中间件react-thunk与异步操作\" class=\"headerlink\" title=\"中间件react-thunk与异步操作\"></a>中间件react-thunk与异步操作</h2><p>上述的所有是同步的操作，若需要异步操作的话需要使用中间件<br><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html</a></p>\n"},{"title":"前端学习/前端工具的网址","date":"2018-09-03T08:45:55.000Z","_content":"\n这里将前端学习的网址，以及前端使用的一些工具记录了下来。\n\n<!-- more -->\n\n1 印记中文 \n[https://docschina.org/#test](https://docschina.org/#test)\n\n2 autoprefixer css \n[http://autoprefixer.github.io/](http://autoprefixer.github.io/)\n将css转换为兼容各浏览器的代码\n\n3 JSON在线解析\n[http://json.awesomes.cn/](http://json.awesomes.cn/)\n\n4 Immutable.js\n[https://facebook.github.io/immutable-js/](https://facebook.github.io/immutable-js/)\n提供了许多永久不可变的数据结构\n\n5 react-ui框架——antd\n[https://ant.design/](https://ant.design/)\n\n6 微信网页版真机调试-可看到console.log\n电脑：[chrome://inspect/#devices](chrome://inspect/#devices)\n手机：[http://debugx5.qq.com](http://debugx5.qq.com)\n>手机上点击`信息`，勾选`打开TBS内核Inspector调试功能`和`打开TBS内核X5jscore Inspector调试功能`\n>电脑端打开`Inspector`字样，就可出现调试界面\n\n7 mock\n[http://mockjs.com/examples.html](http://mockjs.com/examples.html)","source":"_posts/前端学习及工具网址.md","raw":"---\ntitle: 前端学习/前端工具的网址\ndate: 2018-09-03 16:45:55\ntags: \n- 网址\ncategories:\n- 前端\n---\n\n这里将前端学习的网址，以及前端使用的一些工具记录了下来。\n\n<!-- more -->\n\n1 印记中文 \n[https://docschina.org/#test](https://docschina.org/#test)\n\n2 autoprefixer css \n[http://autoprefixer.github.io/](http://autoprefixer.github.io/)\n将css转换为兼容各浏览器的代码\n\n3 JSON在线解析\n[http://json.awesomes.cn/](http://json.awesomes.cn/)\n\n4 Immutable.js\n[https://facebook.github.io/immutable-js/](https://facebook.github.io/immutable-js/)\n提供了许多永久不可变的数据结构\n\n5 react-ui框架——antd\n[https://ant.design/](https://ant.design/)\n\n6 微信网页版真机调试-可看到console.log\n电脑：[chrome://inspect/#devices](chrome://inspect/#devices)\n手机：[http://debugx5.qq.com](http://debugx5.qq.com)\n>手机上点击`信息`，勾选`打开TBS内核Inspector调试功能`和`打开TBS内核X5jscore Inspector调试功能`\n>电脑端打开`Inspector`字样，就可出现调试界面\n\n7 mock\n[http://mockjs.com/examples.html](http://mockjs.com/examples.html)","slug":"前端学习及工具网址","published":1,"updated":"2019-03-12T04:22:48.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovu001qg8rxrjwql1ct","content":"<p>这里将前端学习的网址，以及前端使用的一些工具记录了下来。</p>\n<a id=\"more\"></a>\n<p>1 印记中文<br><a href=\"https://docschina.org/#test\" target=\"_blank\" rel=\"noopener\">https://docschina.org/#test</a></p>\n<p>2 autoprefixer css<br><a href=\"http://autoprefixer.github.io/\" target=\"_blank\" rel=\"noopener\">http://autoprefixer.github.io/</a><br>将css转换为兼容各浏览器的代码</p>\n<p>3 JSON在线解析<br><a href=\"http://json.awesomes.cn/\" target=\"_blank\" rel=\"noopener\">http://json.awesomes.cn/</a></p>\n<p>4 Immutable.js<br><a href=\"https://facebook.github.io/immutable-js/\" target=\"_blank\" rel=\"noopener\">https://facebook.github.io/immutable-js/</a><br>提供了许多永久不可变的数据结构</p>\n<p>5 react-ui框架——antd<br><a href=\"https://ant.design/\" target=\"_blank\" rel=\"noopener\">https://ant.design/</a></p>\n<p>6 微信网页版真机调试-可看到console.log<br>电脑：<a href=\"chrome://inspect/#devices\" target=\"_blank\" rel=\"noopener\">chrome://inspect/#devices</a><br>手机：<a href=\"http://debugx5.qq.com\" target=\"_blank\" rel=\"noopener\">http://debugx5.qq.com</a></p>\n<blockquote>\n<p>手机上点击<code>信息</code>，勾选<code>打开TBS内核Inspector调试功能</code>和<code>打开TBS内核X5jscore Inspector调试功能</code><br>电脑端打开<code>Inspector</code>字样，就可出现调试界面</p>\n</blockquote>\n<p>7 mock<br><a href=\"http://mockjs.com/examples.html\" target=\"_blank\" rel=\"noopener\">http://mockjs.com/examples.html</a></p>\n","site":{"data":{}},"excerpt":"<p>这里将前端学习的网址，以及前端使用的一些工具记录了下来。</p>","more":"<p>1 印记中文<br><a href=\"https://docschina.org/#test\" target=\"_blank\" rel=\"noopener\">https://docschina.org/#test</a></p>\n<p>2 autoprefixer css<br><a href=\"http://autoprefixer.github.io/\" target=\"_blank\" rel=\"noopener\">http://autoprefixer.github.io/</a><br>将css转换为兼容各浏览器的代码</p>\n<p>3 JSON在线解析<br><a href=\"http://json.awesomes.cn/\" target=\"_blank\" rel=\"noopener\">http://json.awesomes.cn/</a></p>\n<p>4 Immutable.js<br><a href=\"https://facebook.github.io/immutable-js/\" target=\"_blank\" rel=\"noopener\">https://facebook.github.io/immutable-js/</a><br>提供了许多永久不可变的数据结构</p>\n<p>5 react-ui框架——antd<br><a href=\"https://ant.design/\" target=\"_blank\" rel=\"noopener\">https://ant.design/</a></p>\n<p>6 微信网页版真机调试-可看到console.log<br>电脑：<a href=\"chrome://inspect/#devices\" target=\"_blank\" rel=\"noopener\">chrome://inspect/#devices</a><br>手机：<a href=\"http://debugx5.qq.com\" target=\"_blank\" rel=\"noopener\">http://debugx5.qq.com</a></p>\n<blockquote>\n<p>手机上点击<code>信息</code>，勾选<code>打开TBS内核Inspector调试功能</code>和<code>打开TBS内核X5jscore Inspector调试功能</code><br>电脑端打开<code>Inspector</code>字样，就可出现调试界面</p>\n</blockquote>\n<p>7 mock<br><a href=\"http://mockjs.com/examples.html\" target=\"_blank\" rel=\"noopener\">http://mockjs.com/examples.html</a></p>"},{"title":"基于mpvue+weui+mpvue-router-patch的小程序","date":"2018-09-04T06:15:55.000Z","_content":">原文文档出自http://kuangpf.com/mpvue-weui/#/README\n>项目出自https://github.com/RebeccaHanjw/weapp-wechat-zhihu\n\n>其他的小程序UI框架:`https://github.com/weilanwl/ColorUI`\n\n最近用基于vue的mpvue框架以及类似ui库的东西（http://kuangpf.com/mpvue-weui/#/grid）搭建了一个类似知乎的小程序。\n\n<!-- more -->\n\n### 开发步骤\n```\n$ vue init mpvue/mpvue-quickstart my-project\n$ cd my-project\n$ npm install\n$ npm run dev\n```\n将项目放在微信web开发工具中即可。（生成的dist文件夹才是转换的微信小程序）\n\n### 使用mpvue-weui\n在`/src/main.js`中引入`weui.css`，然后就可以使用了\n提供一个链接[weui.css](https://github.com/KuangPF/mpvue-weui/blob/master/static/weui/weui.css)\n\n### 使用mpvue-router-patch\nhttps://www.npmjs.com/package/mpvue-router-patch\n```\n$ npm install mpvue-router-patch\n```\n在src文件夹下`main.js`引入如下代码：\n```\nimport Vue from 'vue'\nimport MpvueRouterPatch from 'mpvue-router-patch'\n \nVue.use(MpvueRouterPatch)\n```\n跳转到某个页面\n```\n$router.push(location, onComplete?, onAbort?, onSuccess?)\n```\n跳转到应用内的某个页面，wx.navigateTo、wx.switchTab 及 wx.reLaunch 均通过该方法实现，location 参数支持字符串及对象两种形式，跳转至 tabBar 页面或重启至某页面时必须以对象形式传入\n```\n// 字符串\nrouter.push('/pages/news/detail')\n \n// 对象\nrouter.push({ path: '/pages/news/detail' })\n \n// 带查询参数，变成 /pages/news/detail?id=1\nrouter.push({ path: '/pages/news/detail', query: { id: 1 } })\n \n// 切换至 tabBar 页面\nrouter.push({ path: '/pages/news/list', isTab: true })\n \n// 重启至某页面，无需指定是否为 tabBar 页面，但 tabBar 页面无法携带参数\nrouter.push({ path: '/pages/news/list', reLaunch: true })\n```\n\n\n\n","source":"_posts/基于mpvue-weui的小程序.md","raw":"---\ntitle: 基于mpvue+weui+mpvue-router-patch的小程序\ndate: 2018-09-04 14:15:55\ntags:\n- mpvue \n- weui\ncategories:\n- ui框架\n---\n>原文文档出自http://kuangpf.com/mpvue-weui/#/README\n>项目出自https://github.com/RebeccaHanjw/weapp-wechat-zhihu\n\n>其他的小程序UI框架:`https://github.com/weilanwl/ColorUI`\n\n最近用基于vue的mpvue框架以及类似ui库的东西（http://kuangpf.com/mpvue-weui/#/grid）搭建了一个类似知乎的小程序。\n\n<!-- more -->\n\n### 开发步骤\n```\n$ vue init mpvue/mpvue-quickstart my-project\n$ cd my-project\n$ npm install\n$ npm run dev\n```\n将项目放在微信web开发工具中即可。（生成的dist文件夹才是转换的微信小程序）\n\n### 使用mpvue-weui\n在`/src/main.js`中引入`weui.css`，然后就可以使用了\n提供一个链接[weui.css](https://github.com/KuangPF/mpvue-weui/blob/master/static/weui/weui.css)\n\n### 使用mpvue-router-patch\nhttps://www.npmjs.com/package/mpvue-router-patch\n```\n$ npm install mpvue-router-patch\n```\n在src文件夹下`main.js`引入如下代码：\n```\nimport Vue from 'vue'\nimport MpvueRouterPatch from 'mpvue-router-patch'\n \nVue.use(MpvueRouterPatch)\n```\n跳转到某个页面\n```\n$router.push(location, onComplete?, onAbort?, onSuccess?)\n```\n跳转到应用内的某个页面，wx.navigateTo、wx.switchTab 及 wx.reLaunch 均通过该方法实现，location 参数支持字符串及对象两种形式，跳转至 tabBar 页面或重启至某页面时必须以对象形式传入\n```\n// 字符串\nrouter.push('/pages/news/detail')\n \n// 对象\nrouter.push({ path: '/pages/news/detail' })\n \n// 带查询参数，变成 /pages/news/detail?id=1\nrouter.push({ path: '/pages/news/detail', query: { id: 1 } })\n \n// 切换至 tabBar 页面\nrouter.push({ path: '/pages/news/list', isTab: true })\n \n// 重启至某页面，无需指定是否为 tabBar 页面，但 tabBar 页面无法携带参数\nrouter.push({ path: '/pages/news/list', reLaunch: true })\n```\n\n\n\n","slug":"基于mpvue-weui的小程序","published":1,"updated":"2019-03-12T04:22:48.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovv001tg8rx6elvh6mw","content":"<blockquote>\n<p>原文文档出自<a href=\"http://kuangpf.com/mpvue-weui/#/README\" target=\"_blank\" rel=\"noopener\">http://kuangpf.com/mpvue-weui/#/README</a><br>项目出自<a href=\"https://github.com/RebeccaHanjw/weapp-wechat-zhihu\" target=\"_blank\" rel=\"noopener\">https://github.com/RebeccaHanjw/weapp-wechat-zhihu</a></p>\n</blockquote>\n<blockquote>\n<p>其他的小程序UI框架:<code>https://github.com/weilanwl/ColorUI</code></p>\n</blockquote>\n<p>最近用基于vue的mpvue框架以及类似ui库的东西（<a href=\"http://kuangpf.com/mpvue-weui/#/grid）搭建了一个类似知乎的小程序。\" target=\"_blank\" rel=\"noopener\">http://kuangpf.com/mpvue-weui/#/grid）搭建了一个类似知乎的小程序。</a></p>\n<a id=\"more\"></a>\n<h3 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vue init mpvue/mpvue-quickstart my-project</span><br><span class=\"line\">$ cd my-project</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>将项目放在微信web开发工具中即可。（生成的dist文件夹才是转换的微信小程序）</p>\n<h3 id=\"使用mpvue-weui\"><a href=\"#使用mpvue-weui\" class=\"headerlink\" title=\"使用mpvue-weui\"></a>使用mpvue-weui</h3><p>在<code>/src/main.js</code>中引入<code>weui.css</code>，然后就可以使用了<br>提供一个链接<a href=\"https://github.com/KuangPF/mpvue-weui/blob/master/static/weui/weui.css\" target=\"_blank\" rel=\"noopener\">weui.css</a></p>\n<h3 id=\"使用mpvue-router-patch\"><a href=\"#使用mpvue-router-patch\" class=\"headerlink\" title=\"使用mpvue-router-patch\"></a>使用mpvue-router-patch</h3><p><a href=\"https://www.npmjs.com/package/mpvue-router-patch\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/mpvue-router-patch</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install mpvue-router-patch</span><br></pre></td></tr></table></figure></p>\n<p>在src文件夹下<code>main.js</code>引入如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import MpvueRouterPatch from &apos;mpvue-router-patch&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">Vue.use(MpvueRouterPatch)</span><br></pre></td></tr></table></figure></p>\n<p>跳转到某个页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$router.push(location, onComplete?, onAbort?, onSuccess?)</span><br></pre></td></tr></table></figure></p>\n<p>跳转到应用内的某个页面，wx.navigateTo、wx.switchTab 及 wx.reLaunch 均通过该方法实现，location 参数支持字符串及对象两种形式，跳转至 tabBar 页面或重启至某页面时必须以对象形式传入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 字符串</span><br><span class=\"line\">router.push(&apos;/pages/news/detail&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">// 对象</span><br><span class=\"line\">router.push(&#123; path: &apos;/pages/news/detail&apos; &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">// 带查询参数，变成 /pages/news/detail?id=1</span><br><span class=\"line\">router.push(&#123; path: &apos;/pages/news/detail&apos;, query: &#123; id: 1 &#125; &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">// 切换至 tabBar 页面</span><br><span class=\"line\">router.push(&#123; path: &apos;/pages/news/list&apos;, isTab: true &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">// 重启至某页面，无需指定是否为 tabBar 页面，但 tabBar 页面无法携带参数</span><br><span class=\"line\">router.push(&#123; path: &apos;/pages/news/list&apos;, reLaunch: true &#125;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>原文文档出自<a href=\"http://kuangpf.com/mpvue-weui/#/README\" target=\"_blank\" rel=\"noopener\">http://kuangpf.com/mpvue-weui/#/README</a><br>项目出自<a href=\"https://github.com/RebeccaHanjw/weapp-wechat-zhihu\" target=\"_blank\" rel=\"noopener\">https://github.com/RebeccaHanjw/weapp-wechat-zhihu</a></p>\n</blockquote>\n<blockquote>\n<p>其他的小程序UI框架:<code>https://github.com/weilanwl/ColorUI</code></p>\n</blockquote>\n<p>最近用基于vue的mpvue框架以及类似ui库的东西（<a href=\"http://kuangpf.com/mpvue-weui/#/grid）搭建了一个类似知乎的小程序。\" target=\"_blank\" rel=\"noopener\">http://kuangpf.com/mpvue-weui/#/grid）搭建了一个类似知乎的小程序。</a></p>","more":"<h3 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vue init mpvue/mpvue-quickstart my-project</span><br><span class=\"line\">$ cd my-project</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>将项目放在微信web开发工具中即可。（生成的dist文件夹才是转换的微信小程序）</p>\n<h3 id=\"使用mpvue-weui\"><a href=\"#使用mpvue-weui\" class=\"headerlink\" title=\"使用mpvue-weui\"></a>使用mpvue-weui</h3><p>在<code>/src/main.js</code>中引入<code>weui.css</code>，然后就可以使用了<br>提供一个链接<a href=\"https://github.com/KuangPF/mpvue-weui/blob/master/static/weui/weui.css\" target=\"_blank\" rel=\"noopener\">weui.css</a></p>\n<h3 id=\"使用mpvue-router-patch\"><a href=\"#使用mpvue-router-patch\" class=\"headerlink\" title=\"使用mpvue-router-patch\"></a>使用mpvue-router-patch</h3><p><a href=\"https://www.npmjs.com/package/mpvue-router-patch\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/mpvue-router-patch</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install mpvue-router-patch</span><br></pre></td></tr></table></figure></p>\n<p>在src文件夹下<code>main.js</code>引入如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import MpvueRouterPatch from &apos;mpvue-router-patch&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">Vue.use(MpvueRouterPatch)</span><br></pre></td></tr></table></figure></p>\n<p>跳转到某个页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$router.push(location, onComplete?, onAbort?, onSuccess?)</span><br></pre></td></tr></table></figure></p>\n<p>跳转到应用内的某个页面，wx.navigateTo、wx.switchTab 及 wx.reLaunch 均通过该方法实现，location 参数支持字符串及对象两种形式，跳转至 tabBar 页面或重启至某页面时必须以对象形式传入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 字符串</span><br><span class=\"line\">router.push(&apos;/pages/news/detail&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">// 对象</span><br><span class=\"line\">router.push(&#123; path: &apos;/pages/news/detail&apos; &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">// 带查询参数，变成 /pages/news/detail?id=1</span><br><span class=\"line\">router.push(&#123; path: &apos;/pages/news/detail&apos;, query: &#123; id: 1 &#125; &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">// 切换至 tabBar 页面</span><br><span class=\"line\">router.push(&#123; path: &apos;/pages/news/list&apos;, isTab: true &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">// 重启至某页面，无需指定是否为 tabBar 页面，但 tabBar 页面无法携带参数</span><br><span class=\"line\">router.push(&#123; path: &apos;/pages/news/list&apos;, reLaunch: true &#125;)</span><br></pre></td></tr></table></figure></p>"},{"title":"如何存储对象（深拷贝）","date":"2018-03-08T08:13:27.000Z","_content":"\n<!-- more -->\n```\nJSON.parse(JSON.stringify(对象)):\n深拷贝：会抛弃对象的constructor。也就是深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成Object，遇到循环引用（自己引用自己）也无法处理\n```\n```\nObject.assign({},对象)：深拷贝一级属性，包括prototype，若属性是引用类型，需要递归复制。\n```\n\n## 浅拷贝指向同一地址，修改属性值会影响另一个\n","source":"_posts/如何存储对象.md","raw":"---\ntitle: 如何存储对象（深拷贝）\ndate: 2018-03-08 16:13:27\ntags:\n- javascript\ncategories:\n- 前端\n---\n\n<!-- more -->\n```\nJSON.parse(JSON.stringify(对象)):\n深拷贝：会抛弃对象的constructor。也就是深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成Object，遇到循环引用（自己引用自己）也无法处理\n```\n```\nObject.assign({},对象)：深拷贝一级属性，包括prototype，若属性是引用类型，需要递归复制。\n```\n\n## 浅拷贝指向同一地址，修改属性值会影响另一个\n","slug":"如何存储对象","published":1,"updated":"2019-03-12T04:22:48.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovx001wg8rx1jf5q7t8","content":"<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.parse(JSON.stringify(对象)):</span><br><span class=\"line\">深拷贝：会抛弃对象的constructor。也就是深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成Object，遇到循环引用（自己引用自己）也无法处理</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.assign(&#123;&#125;,对象)：深拷贝一级属性，包括prototype，若属性是引用类型，需要递归复制。</span><br></pre></td></tr></table></figure>\n<h2 id=\"浅拷贝指向同一地址，修改属性值会影响另一个\"><a href=\"#浅拷贝指向同一地址，修改属性值会影响另一个\" class=\"headerlink\" title=\"浅拷贝指向同一地址，修改属性值会影响另一个\"></a>浅拷贝指向同一地址，修改属性值会影响另一个</h2>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.parse(JSON.stringify(对象)):</span><br><span class=\"line\">深拷贝：会抛弃对象的constructor。也就是深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成Object，遇到循环引用（自己引用自己）也无法处理</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.assign(&#123;&#125;,对象)：深拷贝一级属性，包括prototype，若属性是引用类型，需要递归复制。</span><br></pre></td></tr></table></figure>\n<h2 id=\"浅拷贝指向同一地址，修改属性值会影响另一个\"><a href=\"#浅拷贝指向同一地址，修改属性值会影响另一个\" class=\"headerlink\" title=\"浅拷贝指向同一地址，修改属性值会影响另一个\"></a>浅拷贝指向同一地址，修改属性值会影响另一个</h2>"},{"title":"微信小程序登录及注册","date":"2019-01-21T07:09:49.000Z","_content":"\n关于微信小程序的登录及第一次注册的过程\n\n<!-- more -->\n1.登录过程\n![](./微信小程序的登录.jpg '微信小程序的登录过程')\n说明：图中画红线的地方是前端需要处理的过程，\n>首先获取获取用户信息`wx.getUserInfo()` \n>允许调用小程序的`wx.login()`，获取临时登录凭证`code/iv/encryptedData` ---code--> 用`code`发起服务请求，获取自定义登录态`token`\n>自定义登录态存入本地storage`wx.setStorageSync(\"token\", token)` <--token--- `token`\n>发起业务请求，header头部携带自定义登录态`token`\n```javascript\nwx.request({\n    url: parm.url,\n    data: parm.data,\n    header: {\n      token: app.globalData.GetToken()\n    },\n    method: param.method, \n    success:pram.success\n})\n```\n---携带token-->返回数据\n\n2.静默登录  只需要想服务端发送code\n\n","source":"_posts/微信小程序登录及注册.md","raw":"---\ntitle: 微信小程序登录及注册\ndate: 2019-01-21 15:09:49\ntags:\n- js\ncategories:\n- 微信小程序\n---\n\n关于微信小程序的登录及第一次注册的过程\n\n<!-- more -->\n1.登录过程\n![](./微信小程序的登录.jpg '微信小程序的登录过程')\n说明：图中画红线的地方是前端需要处理的过程，\n>首先获取获取用户信息`wx.getUserInfo()` \n>允许调用小程序的`wx.login()`，获取临时登录凭证`code/iv/encryptedData` ---code--> 用`code`发起服务请求，获取自定义登录态`token`\n>自定义登录态存入本地storage`wx.setStorageSync(\"token\", token)` <--token--- `token`\n>发起业务请求，header头部携带自定义登录态`token`\n```javascript\nwx.request({\n    url: parm.url,\n    data: parm.data,\n    header: {\n      token: app.globalData.GetToken()\n    },\n    method: param.method, \n    success:pram.success\n})\n```\n---携带token-->返回数据\n\n2.静默登录  只需要想服务端发送code\n\n","slug":"微信小程序登录及注册","published":1,"updated":"2019-03-12T04:22:48.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccovy001yg8rxtyvgxkko","content":"<p>关于微信小程序的登录及第一次注册的过程</p>\n<a id=\"more\"></a>\n<p>1.登录过程<br><img src=\"./微信小程序的登录.jpg\" alt title=\"微信小程序的登录过程\"><br>说明：图中画红线的地方是前端需要处理的过程，</p>\n<blockquote>\n<p>首先获取获取用户信息<code>wx.getUserInfo()</code><br>允许调用小程序的<code>wx.login()</code>，获取临时登录凭证<code>code/iv/encryptedData</code> —code–&gt; 用<code>code</code>发起服务请求，获取自定义登录态<code>token</code><br>自定义登录态存入本地storage<code>wx.setStorageSync(&quot;token&quot;, token)</code> &lt;–token— <code>token</code><br>发起业务请求，header头部携带自定义登录态<code>token</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.request(&#123;</span><br><span class=\"line\">    url: parm.url,</span><br><span class=\"line\">    data: parm.data,</span><br><span class=\"line\">    header: &#123;</span><br><span class=\"line\">      token: app.globalData.GetToken()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    method: param.method, </span><br><span class=\"line\">    success:pram.success</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>—携带token–&gt;返回数据</p>\n<p>2.静默登录  只需要想服务端发送code</p>\n","site":{"data":{}},"excerpt":"<p>关于微信小程序的登录及第一次注册的过程</p>","more":"<p>1.登录过程<br><img src=\"./微信小程序的登录.jpg\" alt title=\"微信小程序的登录过程\"><br>说明：图中画红线的地方是前端需要处理的过程，</p>\n<blockquote>\n<p>首先获取获取用户信息<code>wx.getUserInfo()</code><br>允许调用小程序的<code>wx.login()</code>，获取临时登录凭证<code>code/iv/encryptedData</code> —code–&gt; 用<code>code</code>发起服务请求，获取自定义登录态<code>token</code><br>自定义登录态存入本地storage<code>wx.setStorageSync(&quot;token&quot;, token)</code> &lt;–token— <code>token</code><br>发起业务请求，header头部携带自定义登录态<code>token</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.request(&#123;</span><br><span class=\"line\">    url: parm.url,</span><br><span class=\"line\">    data: parm.data,</span><br><span class=\"line\">    header: &#123;</span><br><span class=\"line\">      token: app.globalData.GetToken()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    method: param.method, </span><br><span class=\"line\">    success:pram.success</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>—携带token–&gt;返回数据</p>\n<p>2.静默登录  只需要想服务端发送code</p>"},{"title":"微信网页版图片上传预览的书写步骤","date":"2018-09-05T10:04:35.000Z","_content":"\n>微信网页版文档：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115\n>引言：最近做了一个关于图片的功能，包括添加/预览/删除，这里用react的ui框架的一个标签即能实现这些功能。当然还需要调微信端的图像接口。我已经记录了下来。\n\n<!-- more -->\n\n关于真机调试，网址已记录在[前端学习及工具网址](http://xuxut.coding.me/2018/09/03/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%BD%91%E5%9D%80/)\n\n{% asset_img 微信图片_20180905190554.png 图片描述 %}\n{% asset_img 微信图片_20180905190333.png 图片描述 %}\n\n\n### 概述\n微信JS-SDK是[微信公众平台](https://mp.weixin.qq.com/cgi-bin/loginpage?t=wxm2-login&lang=zh_CN&token=)面向网页开发者提供的基于微信内的网页开发工具包。\n\n通过使用微信JS-SDK，网页开发者可以借助使用拍照/选图/语音/位置等手机系统的能力，同时可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力，为微信用户提供更优质的网页体验。\n\n### 使用步骤\n#### 1. 绑定域名\n#### 2. 引入js文件 `http://res.wx.qq.com/open/js/jweixin-1.4.0.js`\n#### 3. 注入权限验证配置\n所有需要使用JS-SDK的页面必须先注入配置信息，否则无法调用。\n```javascript\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名\n    jsApiList: [] // 必填，需要使用的JS接口列表\n});\n\neg: 需要的JS接口列表\njsApiList:['checkJsApi',\n          'chooseImage',\n          'uploadImage',\n          'getLocalImgData',\n          'onMenuShareAppMessage',\n          ]\n```\n#### 4. 通过ready接口处理成功验证\n```javascript\nwx.ready(function(){\n    // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。\n});\n\neg: 开启分享功能\nwindow.wx.ready(() => {\n  // 分享给朋友\n  window.wx.onMenuShareAppMessage({\n    title,\n    desc,\n    link,\n    imgUrl,\n    type: '',\n    dataUrl: '',\n  });\n});\n```\n#### 5.通过error接口处理失败验证\n```javascript\nwx.error(function(res){\n    // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。\n});\n```\nconfig配置成功后，就可以调用接口了。\n```javascript\nimport { ImagePicker} from 'antd-mobile';\n\n<ImagePicker\n  length=\"4\"\n  files={files}\n  // 删除\n  onChange={this.onChange}\n  // 点击图片预览\n  onImageClick={this.onImageClick}\n  selectable={files.length < 4}\n  // 增加图片\n  onAddImageClick={this.onAddImageClick}\n/>\n```\n```javascript\n// 增加图片：从本地或手机相册选择\nwx.chooseImage({\n  count: 1, // 最多选择几张\n  sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有\n  sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有\n  success: function (res) {\n  var localIds = res.localIds; // 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片\n  }\n});\n\n// 选择图片时在此处出现了IOS兼容性问题\n此接口仅在 iOS WKWebview 下提供，用于兼容 iOS WKWebview 不支持 localId 直接显示图片的问题\n  wx.getLocalImgData({\n  localId: '', // 图片的localID\n  success: function (res) {\n  var localData = res.localData; // localData是图片的base64数据，可以用img标签显示\n  }\n  });\n`页面如何判断当前使用的webview内核：\n在页面中可通过微信注入的window.wxjs_is_wkwebview变量判断当前使用的webview内核。 iOS微信6.5.3及其之后的版本 window.wxjs_is_wkwebview 为true时是使用WKWebview，为 false或者 “undefine”时是 UIWebview 。`\n```\n```\n// 预览图片\n  wx.previewImage({\n  current: '', // 当前显示图片的http链接\n  urls: [] // 需要预览的图片http链接列表\n  });\n```\n\n记录我的代码：\n```javascript\n// https.js\n// 微信jssdk签名\nexport function wxShare(options) {\n  const url = window.location.href.replace(/&/g, '@@@');\n  axios\n    .get('weixin/api/v1/weixin/callback/showdata', {\n      params: {\n        url: url.split('#')[0],\n      },\n    })\n    .then(res => {\n      const { nonceStr, timestamp, signature, appid } = res.data.data;\n      const defaultLink = window.location.href;\n      const {\n        title = '',\n        desc = '',\n        link = defaultLink,\n        imgUrl = '',\n      } = options;\n\n      window.wx.config({\n        debug: false,\n        appId: appid,\n        timestamp,\n        nonceStr,\n        signature,\n        jsApiList: [\n          'checkJsApi',\n          'chooseImage',\n          'uploadImage',\n          'getLocalImgData',\n          'onMenuShareAppMessage',\n        ],\n      });\n      window.wx.ready(() => {\n        // 分享给朋友\n        window.wx.onMenuShareAppMessage({\n          title,\n          desc,\n          link,\n          imgUrl,\n          type: '',\n          dataUrl: '',\n        });\n      });\n    });\n}\n```\n```javascript\n// index.jsx\nimport React from 'react';\nimport {\n  List,\n  TextareaItem,\n  Button,\n  WingBlank,\n  ImagePicker,\n} from 'antd-mobile';\nimport { createForm } from 'rc-form';\nimport styled from 'styled-components';\nimport { rem } from '@/utils/utils';\nimport { wxShare } from '@/api/http';\n\nconst data = [\n  {\n    url: 'https://zos.alipayobjects.com/rmsportal/PZUUCKTRIHWiZSY.jpeg',\n    id: '0',\n  },\n];\nclass Feedbackkk extends React.Component {\n  state = {\n    files: data,\n  };\n  componentDidMount() {\n    wxShare({\n      title: '反馈',\n    });\n  }\n  //点击图片预览\n  onImageClick = (index, fs) => {\n    // console.log(index, fs); 索引 图片数组\n    let urls = [];\n    fs.forEach(item => {\n      urls.push(item.url);\n    });\n    window.wx.previewImage({\n      current: fs[index].url, // 当前显示图片的http链接\n      urls: urls, // 需要预览的图片http链接列表\n    });\n  };\n  // 控制删除\n  onChange = (files, type, index) => {\n    // console.log(files, type, index); 图片数组 \"remove\" 删除的索引\n    this.setState({\n      files,\n    });\n  };\n  // 增加图片\n  onAddImageClick = e => {\n    e.preventDefault();\n\n    let isWk = false;\n    if (window.wxjs_is_wkwebview) {\n      isWk = true;\n    }\n    window.wx.chooseImage({\n      count: 4, // 默认9，最多选择几张\n      sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有\n      sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有\n      success: res => {\n        console.log(res);\n        // 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片\n        let localIds = res.localIds;\n        localIds.forEach((item, index) => {\n          if (isWk) {\n            window.wx.getLocalImgData({\n              localId: item, // 图片的localID\n              success: res => {\n                let localData = res.localData;\n                // 展示选中图片\n                this.setState({\n                  files: this.state.files.concat({\n                    url: localData,\n                    id: this.state.files.length + index,\n                  }),\n                }); // localData是图片的base64数据，可以用img标签显示\n              },\n            });\n          } else {\n            // 展示选中图片\n            this.setState({\n              files: this.state.files.concat({\n                url: item,\n                id: this.state.files.length + index,\n              }),\n            });\n          }\n          // 上传图片\n          // window.wx.uploadImage({\n          //   localId: res.localIds[0], // 需要上传的图片的本地ID，由chooseImage接口获得\n          //   isShowProgressTips: 0, // 默认为1，显示进度提示\n          //   success: pic => {\n          //     // this.uploadImage(pic.serverId).then(resp => {\n          //     //   if (resp.data) {\n          //     //     Toast('上传成功');\n          //     //   } else {\n          //     //     Toast('上传失败');\n          //     //   }\n          //     // });\n          //   },\n          // });\n        });\n      },\n    });\n  };\n\n  render() {\n    const { getFieldProps } = this.props.form;\n    const { files } = this.state;\n    return (\n      <div>\n        <Li>\n          <Texta\n            {...getFieldProps('count', {\n              // initialValue: '描述您遇到的问题或建议',\n            })}\n            rows={4}\n            count={200}\n            placeholder=\"描述您遇到的问题或建议\"\n          />\n        </Li>\n        <Screenshots>\n          <SsText>相关截图</SsText>\n          <SsCount>0/4</SsCount>\n        </Screenshots>\n        <ImgSel>\n          <ImagePicker\n            length=\"4\"\n            files={files}\n            onChange={this.onChange}\n            onImageClick={this.onImageClick}\n            selectable={files.length < 4}\n            onAddImageClick={this.onAddImageClick}\n          />\n        </ImgSel>\n        <WingBlank>\n          <Btn type=\"warning\">提交</Btn>\n        </WingBlank>\n      </div>\n    );\n  }\n}\nconst Feedback = createForm()(Feedbackkk);\nexport default Feedback;\n\nconst Li = styled(List)`\n  padding: ${rem('0 15px')};\n  background: #fff;\n  .am-list-item.am-textarea-item {\n    padding: 0 !important;\n  }\n`;\nconst Texta = styled(TextareaItem)`\n  .am-textarea-control textarea {\n    font-size: ${rem('14px')};\n  }\n  .am-textarea-count {\n    color: #999;\n    transform: translateX(${rem('4px')});\n    margin-bottom: ${rem('10px')};\n  }\n  .am-textarea-count span {\n    color: #999999;\n  }\n`;\nconst ImgSel = styled.div`\n  background: #fff;\n  .am-image-picker-list {\n    padding: ${rem('0 15px 23px 15px')};\n  }\n`;\nconst Screenshots = styled.div`\n  background: #fff;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${rem('12px 15px 8px 15px')};\n`;\nconst SsText = styled.div`\n  font-size: ${rem('16px')};\n  color: #595959;\n`;\nconst SsCount = styled.div`\n  font-size: ${rem('14px')};\n  color: #999999;\n`;\nconst Btn = styled(Button)`\n  span {\n    font-size: ${rem('18px')};\n  }\n`;\nconst III = styled.img`\n  width: 80px;\n  height: 80px;\n`;\nconst CCC = styled.img`\n  width: 80px;\n  height: 80px;\n`;\nconst Add = styled.div`\n  width: 80px;\n  height: 80px;\n  border: 1px solid #000;\n`;\n\n```\n\n\n\n","source":"_posts/微信网页版图片上传预览的书写步骤.md","raw":"---\ntitle: 微信网页版图片上传预览的书写步骤\ndate: 2018-09-05 18:04:35\ntags:\n- react\n- antd-mobile\n- 微信JS-SDK\ncategories: \n- 微信网页版\n---\n\n>微信网页版文档：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115\n>引言：最近做了一个关于图片的功能，包括添加/预览/删除，这里用react的ui框架的一个标签即能实现这些功能。当然还需要调微信端的图像接口。我已经记录了下来。\n\n<!-- more -->\n\n关于真机调试，网址已记录在[前端学习及工具网址](http://xuxut.coding.me/2018/09/03/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%BD%91%E5%9D%80/)\n\n{% asset_img 微信图片_20180905190554.png 图片描述 %}\n{% asset_img 微信图片_20180905190333.png 图片描述 %}\n\n\n### 概述\n微信JS-SDK是[微信公众平台](https://mp.weixin.qq.com/cgi-bin/loginpage?t=wxm2-login&lang=zh_CN&token=)面向网页开发者提供的基于微信内的网页开发工具包。\n\n通过使用微信JS-SDK，网页开发者可以借助使用拍照/选图/语音/位置等手机系统的能力，同时可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力，为微信用户提供更优质的网页体验。\n\n### 使用步骤\n#### 1. 绑定域名\n#### 2. 引入js文件 `http://res.wx.qq.com/open/js/jweixin-1.4.0.js`\n#### 3. 注入权限验证配置\n所有需要使用JS-SDK的页面必须先注入配置信息，否则无法调用。\n```javascript\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名\n    jsApiList: [] // 必填，需要使用的JS接口列表\n});\n\neg: 需要的JS接口列表\njsApiList:['checkJsApi',\n          'chooseImage',\n          'uploadImage',\n          'getLocalImgData',\n          'onMenuShareAppMessage',\n          ]\n```\n#### 4. 通过ready接口处理成功验证\n```javascript\nwx.ready(function(){\n    // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。\n});\n\neg: 开启分享功能\nwindow.wx.ready(() => {\n  // 分享给朋友\n  window.wx.onMenuShareAppMessage({\n    title,\n    desc,\n    link,\n    imgUrl,\n    type: '',\n    dataUrl: '',\n  });\n});\n```\n#### 5.通过error接口处理失败验证\n```javascript\nwx.error(function(res){\n    // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。\n});\n```\nconfig配置成功后，就可以调用接口了。\n```javascript\nimport { ImagePicker} from 'antd-mobile';\n\n<ImagePicker\n  length=\"4\"\n  files={files}\n  // 删除\n  onChange={this.onChange}\n  // 点击图片预览\n  onImageClick={this.onImageClick}\n  selectable={files.length < 4}\n  // 增加图片\n  onAddImageClick={this.onAddImageClick}\n/>\n```\n```javascript\n// 增加图片：从本地或手机相册选择\nwx.chooseImage({\n  count: 1, // 最多选择几张\n  sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有\n  sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有\n  success: function (res) {\n  var localIds = res.localIds; // 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片\n  }\n});\n\n// 选择图片时在此处出现了IOS兼容性问题\n此接口仅在 iOS WKWebview 下提供，用于兼容 iOS WKWebview 不支持 localId 直接显示图片的问题\n  wx.getLocalImgData({\n  localId: '', // 图片的localID\n  success: function (res) {\n  var localData = res.localData; // localData是图片的base64数据，可以用img标签显示\n  }\n  });\n`页面如何判断当前使用的webview内核：\n在页面中可通过微信注入的window.wxjs_is_wkwebview变量判断当前使用的webview内核。 iOS微信6.5.3及其之后的版本 window.wxjs_is_wkwebview 为true时是使用WKWebview，为 false或者 “undefine”时是 UIWebview 。`\n```\n```\n// 预览图片\n  wx.previewImage({\n  current: '', // 当前显示图片的http链接\n  urls: [] // 需要预览的图片http链接列表\n  });\n```\n\n记录我的代码：\n```javascript\n// https.js\n// 微信jssdk签名\nexport function wxShare(options) {\n  const url = window.location.href.replace(/&/g, '@@@');\n  axios\n    .get('weixin/api/v1/weixin/callback/showdata', {\n      params: {\n        url: url.split('#')[0],\n      },\n    })\n    .then(res => {\n      const { nonceStr, timestamp, signature, appid } = res.data.data;\n      const defaultLink = window.location.href;\n      const {\n        title = '',\n        desc = '',\n        link = defaultLink,\n        imgUrl = '',\n      } = options;\n\n      window.wx.config({\n        debug: false,\n        appId: appid,\n        timestamp,\n        nonceStr,\n        signature,\n        jsApiList: [\n          'checkJsApi',\n          'chooseImage',\n          'uploadImage',\n          'getLocalImgData',\n          'onMenuShareAppMessage',\n        ],\n      });\n      window.wx.ready(() => {\n        // 分享给朋友\n        window.wx.onMenuShareAppMessage({\n          title,\n          desc,\n          link,\n          imgUrl,\n          type: '',\n          dataUrl: '',\n        });\n      });\n    });\n}\n```\n```javascript\n// index.jsx\nimport React from 'react';\nimport {\n  List,\n  TextareaItem,\n  Button,\n  WingBlank,\n  ImagePicker,\n} from 'antd-mobile';\nimport { createForm } from 'rc-form';\nimport styled from 'styled-components';\nimport { rem } from '@/utils/utils';\nimport { wxShare } from '@/api/http';\n\nconst data = [\n  {\n    url: 'https://zos.alipayobjects.com/rmsportal/PZUUCKTRIHWiZSY.jpeg',\n    id: '0',\n  },\n];\nclass Feedbackkk extends React.Component {\n  state = {\n    files: data,\n  };\n  componentDidMount() {\n    wxShare({\n      title: '反馈',\n    });\n  }\n  //点击图片预览\n  onImageClick = (index, fs) => {\n    // console.log(index, fs); 索引 图片数组\n    let urls = [];\n    fs.forEach(item => {\n      urls.push(item.url);\n    });\n    window.wx.previewImage({\n      current: fs[index].url, // 当前显示图片的http链接\n      urls: urls, // 需要预览的图片http链接列表\n    });\n  };\n  // 控制删除\n  onChange = (files, type, index) => {\n    // console.log(files, type, index); 图片数组 \"remove\" 删除的索引\n    this.setState({\n      files,\n    });\n  };\n  // 增加图片\n  onAddImageClick = e => {\n    e.preventDefault();\n\n    let isWk = false;\n    if (window.wxjs_is_wkwebview) {\n      isWk = true;\n    }\n    window.wx.chooseImage({\n      count: 4, // 默认9，最多选择几张\n      sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有\n      sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有\n      success: res => {\n        console.log(res);\n        // 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片\n        let localIds = res.localIds;\n        localIds.forEach((item, index) => {\n          if (isWk) {\n            window.wx.getLocalImgData({\n              localId: item, // 图片的localID\n              success: res => {\n                let localData = res.localData;\n                // 展示选中图片\n                this.setState({\n                  files: this.state.files.concat({\n                    url: localData,\n                    id: this.state.files.length + index,\n                  }),\n                }); // localData是图片的base64数据，可以用img标签显示\n              },\n            });\n          } else {\n            // 展示选中图片\n            this.setState({\n              files: this.state.files.concat({\n                url: item,\n                id: this.state.files.length + index,\n              }),\n            });\n          }\n          // 上传图片\n          // window.wx.uploadImage({\n          //   localId: res.localIds[0], // 需要上传的图片的本地ID，由chooseImage接口获得\n          //   isShowProgressTips: 0, // 默认为1，显示进度提示\n          //   success: pic => {\n          //     // this.uploadImage(pic.serverId).then(resp => {\n          //     //   if (resp.data) {\n          //     //     Toast('上传成功');\n          //     //   } else {\n          //     //     Toast('上传失败');\n          //     //   }\n          //     // });\n          //   },\n          // });\n        });\n      },\n    });\n  };\n\n  render() {\n    const { getFieldProps } = this.props.form;\n    const { files } = this.state;\n    return (\n      <div>\n        <Li>\n          <Texta\n            {...getFieldProps('count', {\n              // initialValue: '描述您遇到的问题或建议',\n            })}\n            rows={4}\n            count={200}\n            placeholder=\"描述您遇到的问题或建议\"\n          />\n        </Li>\n        <Screenshots>\n          <SsText>相关截图</SsText>\n          <SsCount>0/4</SsCount>\n        </Screenshots>\n        <ImgSel>\n          <ImagePicker\n            length=\"4\"\n            files={files}\n            onChange={this.onChange}\n            onImageClick={this.onImageClick}\n            selectable={files.length < 4}\n            onAddImageClick={this.onAddImageClick}\n          />\n        </ImgSel>\n        <WingBlank>\n          <Btn type=\"warning\">提交</Btn>\n        </WingBlank>\n      </div>\n    );\n  }\n}\nconst Feedback = createForm()(Feedbackkk);\nexport default Feedback;\n\nconst Li = styled(List)`\n  padding: ${rem('0 15px')};\n  background: #fff;\n  .am-list-item.am-textarea-item {\n    padding: 0 !important;\n  }\n`;\nconst Texta = styled(TextareaItem)`\n  .am-textarea-control textarea {\n    font-size: ${rem('14px')};\n  }\n  .am-textarea-count {\n    color: #999;\n    transform: translateX(${rem('4px')});\n    margin-bottom: ${rem('10px')};\n  }\n  .am-textarea-count span {\n    color: #999999;\n  }\n`;\nconst ImgSel = styled.div`\n  background: #fff;\n  .am-image-picker-list {\n    padding: ${rem('0 15px 23px 15px')};\n  }\n`;\nconst Screenshots = styled.div`\n  background: #fff;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${rem('12px 15px 8px 15px')};\n`;\nconst SsText = styled.div`\n  font-size: ${rem('16px')};\n  color: #595959;\n`;\nconst SsCount = styled.div`\n  font-size: ${rem('14px')};\n  color: #999999;\n`;\nconst Btn = styled(Button)`\n  span {\n    font-size: ${rem('18px')};\n  }\n`;\nconst III = styled.img`\n  width: 80px;\n  height: 80px;\n`;\nconst CCC = styled.img`\n  width: 80px;\n  height: 80px;\n`;\nconst Add = styled.div`\n  width: 80px;\n  height: 80px;\n  border: 1px solid #000;\n`;\n\n```\n\n\n\n","slug":"微信网页版图片上传预览的书写步骤","published":1,"updated":"2019-03-12T04:22:48.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccow10023g8rxljiy33nd","content":"<blockquote>\n<p>微信网页版文档：<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115</a><br>引言：最近做了一个关于图片的功能，包括添加/预览/删除，这里用react的ui框架的一个标签即能实现这些功能。当然还需要调微信端的图像接口。我已经记录了下来。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>关于真机调试，网址已记录在<a href=\"http://xuxut.coding.me/2018/09/03/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%BD%91%E5%9D%80/\" target=\"_blank\" rel=\"noopener\">前端学习及工具网址</a></p>\n<img src=\"/2018/09/05/微信网页版图片上传预览的书写步骤/微信图片_20180905190554.png\" title=\"图片描述\">\n<img src=\"/2018/09/05/微信网页版图片上传预览的书写步骤/微信图片_20180905190333.png\" title=\"图片描述\">\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>微信JS-SDK是<a href=\"https://mp.weixin.qq.com/cgi-bin/loginpage?t=wxm2-login&amp;lang=zh_CN&amp;token=\" target=\"_blank\" rel=\"noopener\">微信公众平台</a>面向网页开发者提供的基于微信内的网页开发工具包。</p>\n<p>通过使用微信JS-SDK，网页开发者可以借助使用拍照/选图/语音/位置等手机系统的能力，同时可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力，为微信用户提供更优质的网页体验。</p>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><h4 id=\"1-绑定域名\"><a href=\"#1-绑定域名\" class=\"headerlink\" title=\"1. 绑定域名\"></a>1. 绑定域名</h4><h4 id=\"2-引入js文件-http-res-wx-qq-com-open-js-jweixin-1-4-0-js\"><a href=\"#2-引入js文件-http-res-wx-qq-com-open-js-jweixin-1-4-0-js\" class=\"headerlink\" title=\"2. 引入js文件 http://res.wx.qq.com/open/js/jweixin-1.4.0.js\"></a>2. 引入js文件 <code>http://res.wx.qq.com/open/js/jweixin-1.4.0.js</code></h4><h4 id=\"3-注入权限验证配置\"><a href=\"#3-注入权限验证配置\" class=\"headerlink\" title=\"3. 注入权限验证配置\"></a>3. 注入权限验证配置</h4><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则无法调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class=\"line\">    appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">    timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">    nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">    signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">    jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">eg: 需要的JS接口列表</span><br><span class=\"line\">jsApiList:[<span class=\"string\">'checkJsApi'</span>,</span><br><span class=\"line\">          <span class=\"string\">'chooseImage'</span>,</span><br><span class=\"line\">          <span class=\"string\">'uploadImage'</span>,</span><br><span class=\"line\">          <span class=\"string\">'getLocalImgData'</span>,</span><br><span class=\"line\">          <span class=\"string\">'onMenuShareAppMessage'</span>,</span><br><span class=\"line\">          ]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-通过ready接口处理成功验证\"><a href=\"#4-通过ready接口处理成功验证\" class=\"headerlink\" title=\"4. 通过ready接口处理成功验证\"></a>4. 通过ready接口处理成功验证</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">eg: 开启分享功能</span><br><span class=\"line\"><span class=\"built_in\">window</span>.wx.ready(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 分享给朋友</span></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.wx.onMenuShareAppMessage(&#123;</span><br><span class=\"line\">    title,</span><br><span class=\"line\">    desc,</span><br><span class=\"line\">    link,</span><br><span class=\"line\">    imgUrl,</span><br><span class=\"line\">    type: <span class=\"string\">''</span>,</span><br><span class=\"line\">    dataUrl: <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-通过error接口处理失败验证\"><a href=\"#5-通过error接口处理失败验证\" class=\"headerlink\" title=\"5.通过error接口处理失败验证\"></a>5.通过error接口处理失败验证</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>config配置成功后，就可以调用接口了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ImagePicker&#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd-mobile'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ImagePicker</span><br><span class=\"line\">  length=<span class=\"string\">\"4\"</span></span><br><span class=\"line\">  files=&#123;files&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 删除</span></span><br><span class=\"line\">  onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 点击图片预览</span></span><br><span class=\"line\">  onImageClick=&#123;<span class=\"keyword\">this</span>.onImageClick&#125;</span><br><span class=\"line\">  selectable=&#123;files.length &lt; <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 增加图片</span></span><br><span class=\"line\">  onAddImageClick=&#123;<span class=\"keyword\">this</span>.onAddImageClick&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加图片：从本地或手机相册选择</span></span><br><span class=\"line\">wx.chooseImage(&#123;</span><br><span class=\"line\">  count: <span class=\"number\">1</span>, <span class=\"comment\">// 最多选择几张</span></span><br><span class=\"line\">  sizeType: [<span class=\"string\">'original'</span>, <span class=\"string\">'compressed'</span>], <span class=\"comment\">// 可以指定是原图还是压缩图，默认二者都有</span></span><br><span class=\"line\">  sourceType: [<span class=\"string\">'album'</span>, <span class=\"string\">'camera'</span>], <span class=\"comment\">// 可以指定来源是相册还是相机，默认二者都有</span></span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> localIds = res.localIds; <span class=\"comment\">// 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 选择图片时在此处出现了IOS兼容性问题</span></span><br><span class=\"line\">此接口仅在 iOS WKWebview 下提供，用于兼容 iOS WKWebview 不支持 localId 直接显示图片的问题</span><br><span class=\"line\">  wx.getLocalImgData(&#123;</span><br><span class=\"line\">  localId: <span class=\"string\">''</span>, <span class=\"comment\">// 图片的localID</span></span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> localData = res.localData; <span class=\"comment\">// localData是图片的base64数据，可以用img标签显示</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"string\">`页面如何判断当前使用的webview内核：</span></span><br><span class=\"line\"><span class=\"string\">在页面中可通过微信注入的window.wxjs_is_wkwebview变量判断当前使用的webview内核。 iOS微信6.5.3及其之后的版本 window.wxjs_is_wkwebview 为true时是使用WKWebview，为 false或者 “undefine”时是 UIWebview 。`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 预览图片</span><br><span class=\"line\">  wx.previewImage(&#123;</span><br><span class=\"line\">  current: &apos;&apos;, // 当前显示图片的http链接</span><br><span class=\"line\">  urls: [] // 需要预览的图片http链接列表</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>记录我的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https.js</span></span><br><span class=\"line\"><span class=\"comment\">// 微信jssdk签名</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wxShare</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"built_in\">window</span>.location.href.replace(<span class=\"regexp\">/&amp;/g</span>, <span class=\"string\">'@@@'</span>);</span><br><span class=\"line\">  axios</span><br><span class=\"line\">    .get(<span class=\"string\">'weixin/api/v1/weixin/callback/showdata'</span>, &#123;</span><br><span class=\"line\">      params: &#123;</span><br><span class=\"line\">        url: url.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; nonceStr, timestamp, signature, appid &#125; = res.data.data;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> defaultLink = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        title = <span class=\"string\">''</span>,</span><br><span class=\"line\">        desc = <span class=\"string\">''</span>,</span><br><span class=\"line\">        link = defaultLink,</span><br><span class=\"line\">        imgUrl = <span class=\"string\">''</span>,</span><br><span class=\"line\">      &#125; = options;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">window</span>.wx.config(&#123;</span><br><span class=\"line\">        debug: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        appId: appid,</span><br><span class=\"line\">        timestamp,</span><br><span class=\"line\">        nonceStr,</span><br><span class=\"line\">        signature,</span><br><span class=\"line\">        jsApiList: [</span><br><span class=\"line\">          <span class=\"string\">'checkJsApi'</span>,</span><br><span class=\"line\">          <span class=\"string\">'chooseImage'</span>,</span><br><span class=\"line\">          <span class=\"string\">'uploadImage'</span>,</span><br><span class=\"line\">          <span class=\"string\">'getLocalImgData'</span>,</span><br><span class=\"line\">          <span class=\"string\">'onMenuShareAppMessage'</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.wx.ready(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分享给朋友</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.wx.onMenuShareAppMessage(&#123;</span><br><span class=\"line\">          title,</span><br><span class=\"line\">          desc,</span><br><span class=\"line\">          link,</span><br><span class=\"line\">          imgUrl,</span><br><span class=\"line\">          type: <span class=\"string\">''</span>,</span><br><span class=\"line\">          dataUrl: <span class=\"string\">''</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  List,</span><br><span class=\"line\">  TextareaItem,</span><br><span class=\"line\">  Button,</span><br><span class=\"line\">  WingBlank,</span><br><span class=\"line\">  ImagePicker,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd-mobile'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rc-form'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">'styled-components'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; rem &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/utils'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; wxShare &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/api/http'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    url: <span class=\"string\">'https://zos.alipayobjects.com/rmsportal/PZUUCKTRIHWiZSY.jpeg'</span>,</span><br><span class=\"line\">    id: <span class=\"string\">'0'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Feedbackkk</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    files: data,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    wxShare(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">'反馈'</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//点击图片预览</span></span><br><span class=\"line\">  onImageClick = <span class=\"function\">(<span class=\"params\">index, fs</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(index, fs); 索引 图片数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> urls = [];</span><br><span class=\"line\">    fs.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      urls.push(item.url);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.wx.previewImage(&#123;</span><br><span class=\"line\">      current: fs[index].url, <span class=\"comment\">// 当前显示图片的http链接</span></span><br><span class=\"line\">      urls: urls, <span class=\"comment\">// 需要预览的图片http链接列表</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 控制删除</span></span><br><span class=\"line\">  onChange = <span class=\"function\">(<span class=\"params\">files, type, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(files, type, index); 图片数组 \"remove\" 删除的索引</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      files,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 增加图片</span></span><br><span class=\"line\">  onAddImageClick = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isWk = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.wxjs_is_wkwebview) &#123;</span><br><span class=\"line\">      isWk = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.wx.chooseImage(&#123;</span><br><span class=\"line\">      count: <span class=\"number\">4</span>, <span class=\"comment\">// 默认9，最多选择几张</span></span><br><span class=\"line\">      sizeType: [<span class=\"string\">'original'</span>, <span class=\"string\">'compressed'</span>], <span class=\"comment\">// 可以指定是原图还是压缩图，默认二者都有</span></span><br><span class=\"line\">      sourceType: [<span class=\"string\">'album'</span>, <span class=\"string\">'camera'</span>], <span class=\"comment\">// 可以指定来源是相册还是相机，默认二者都有</span></span><br><span class=\"line\">      success: <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">        <span class=\"comment\">// 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> localIds = res.localIds;</span><br><span class=\"line\">        localIds.forEach(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (isWk) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.wx.getLocalImgData(&#123;</span><br><span class=\"line\">              localId: item, <span class=\"comment\">// 图片的localID</span></span><br><span class=\"line\">              success: <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> localData = res.localData;</span><br><span class=\"line\">                <span class=\"comment\">// 展示选中图片</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">                  files: <span class=\"keyword\">this</span>.state.files.concat(&#123;</span><br><span class=\"line\">                    url: localData,</span><br><span class=\"line\">                    id: <span class=\"keyword\">this</span>.state.files.length + index,</span><br><span class=\"line\">                  &#125;),</span><br><span class=\"line\">                &#125;); <span class=\"comment\">// localData是图片的base64数据，可以用img标签显示</span></span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 展示选中图片</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">              files: <span class=\"keyword\">this</span>.state.files.concat(&#123;</span><br><span class=\"line\">                url: item,</span><br><span class=\"line\">                id: <span class=\"keyword\">this</span>.state.files.length + index,</span><br><span class=\"line\">              &#125;),</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 上传图片</span></span><br><span class=\"line\">          <span class=\"comment\">// window.wx.uploadImage(&#123;</span></span><br><span class=\"line\">          <span class=\"comment\">//   localId: res.localIds[0], // 需要上传的图片的本地ID，由chooseImage接口获得</span></span><br><span class=\"line\">          <span class=\"comment\">//   isShowProgressTips: 0, // 默认为1，显示进度提示</span></span><br><span class=\"line\">          <span class=\"comment\">//   success: pic =&gt; &#123;</span></span><br><span class=\"line\">          <span class=\"comment\">//     // this.uploadImage(pic.serverId).then(resp =&gt; &#123;</span></span><br><span class=\"line\">          <span class=\"comment\">//     //   if (resp.data) &#123;</span></span><br><span class=\"line\">          <span class=\"comment\">//     //     Toast('上传成功');</span></span><br><span class=\"line\">          <span class=\"comment\">//     //   &#125; else &#123;</span></span><br><span class=\"line\">          <span class=\"comment\">//     //     Toast('上传失败');</span></span><br><span class=\"line\">          <span class=\"comment\">//     //   &#125;</span></span><br><span class=\"line\">          <span class=\"comment\">//     // &#125;);</span></span><br><span class=\"line\">          <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">          <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; getFieldProps &#125; = <span class=\"keyword\">this</span>.props.form;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; files &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Li&gt;</span><br><span class=\"line\">          &lt;Texta</span><br><span class=\"line\">            &#123;...getFieldProps(<span class=\"string\">'count'</span>, &#123;</span><br><span class=\"line\">              <span class=\"comment\">// initialValue: '描述您遇到的问题或建议',</span></span><br><span class=\"line\">            &#125;)&#125;</span><br><span class=\"line\">            rows=&#123;<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">            count=&#123;<span class=\"number\">200</span>&#125;</span><br><span class=\"line\">            placeholder=<span class=\"string\">\"描述您遇到的问题或建议\"</span></span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Screenshots&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;SsText&gt;相关截图&lt;/</span>SsText&gt;</span><br><span class=\"line\">          &lt;SsCount&gt;<span class=\"number\">0</span>/<span class=\"number\">4</span>&lt;<span class=\"regexp\">/SsCount&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>Screenshots&gt;</span><br><span class=\"line\">        &lt;ImgSel&gt;</span><br><span class=\"line\">          &lt;ImagePicker</span><br><span class=\"line\">            length=<span class=\"string\">\"4\"</span></span><br><span class=\"line\">            files=&#123;files&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;</span><br><span class=\"line\">            onImageClick=&#123;<span class=\"keyword\">this</span>.onImageClick&#125;</span><br><span class=\"line\">            selectable=&#123;files.length &lt; <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">            onAddImageClick=&#123;<span class=\"keyword\">this</span>.onAddImageClick&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ImgSel&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;WingBlank&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Btn type=\"warning\"&gt;提交&lt;/</span>Btn&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/WingBlank&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Feedback = createForm()(Feedbackkk);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Feedback;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Li = styled(List)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  padding: <span class=\"subst\">$&#123;rem(<span class=\"string\">'0 15px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">  .am-list-item.am-textarea-item &#123;</span></span><br><span class=\"line\"><span class=\"string\">    padding: 0 !important;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Texta = styled(TextareaItem)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  .am-textarea-control textarea &#123;</span></span><br><span class=\"line\"><span class=\"string\">    font-size: <span class=\"subst\">$&#123;rem(<span class=\"string\">'14px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  .am-textarea-count &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: #999;</span></span><br><span class=\"line\"><span class=\"string\">    transform: translateX(<span class=\"subst\">$&#123;rem(<span class=\"string\">'4px'</span>)&#125;</span>);</span></span><br><span class=\"line\"><span class=\"string\">    margin-bottom: <span class=\"subst\">$&#123;rem(<span class=\"string\">'10px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  .am-textarea-count span &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: #999999;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ImgSel = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">  .am-image-picker-list &#123;</span></span><br><span class=\"line\"><span class=\"string\">    padding: <span class=\"subst\">$&#123;rem(<span class=\"string\">'0 15px 23px 15px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Screenshots = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">  display: flex;</span></span><br><span class=\"line\"><span class=\"string\">  justify-content: space-between;</span></span><br><span class=\"line\"><span class=\"string\">  align-items: center;</span></span><br><span class=\"line\"><span class=\"string\">  padding: <span class=\"subst\">$&#123;rem(<span class=\"string\">'12px 15px 8px 15px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> SsText = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  font-size: <span class=\"subst\">$&#123;rem(<span class=\"string\">'16px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  color: #595959;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> SsCount = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  font-size: <span class=\"subst\">$&#123;rem(<span class=\"string\">'14px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  color: #999999;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Btn = styled(Button)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  span &#123;</span></span><br><span class=\"line\"><span class=\"string\">    font-size: <span class=\"subst\">$&#123;rem(<span class=\"string\">'18px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> III = styled.img<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  width: 80px;</span></span><br><span class=\"line\"><span class=\"string\">  height: 80px;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> CCC = styled.img<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  width: 80px;</span></span><br><span class=\"line\"><span class=\"string\">  height: 80px;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Add = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  width: 80px;</span></span><br><span class=\"line\"><span class=\"string\">  height: 80px;</span></span><br><span class=\"line\"><span class=\"string\">  border: 1px solid #000;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>微信网页版文档：<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115</a><br>引言：最近做了一个关于图片的功能，包括添加/预览/删除，这里用react的ui框架的一个标签即能实现这些功能。当然还需要调微信端的图像接口。我已经记录了下来。</p>\n</blockquote>","more":"<p>关于真机调试，网址已记录在<a href=\"http://xuxut.coding.me/2018/09/03/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%BD%91%E5%9D%80/\" target=\"_blank\" rel=\"noopener\">前端学习及工具网址</a></p>\n<img src=\"/2018/09/05/微信网页版图片上传预览的书写步骤/微信图片_20180905190554.png\" title=\"图片描述\">\n<img src=\"/2018/09/05/微信网页版图片上传预览的书写步骤/微信图片_20180905190333.png\" title=\"图片描述\">\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>微信JS-SDK是<a href=\"https://mp.weixin.qq.com/cgi-bin/loginpage?t=wxm2-login&amp;lang=zh_CN&amp;token=\" target=\"_blank\" rel=\"noopener\">微信公众平台</a>面向网页开发者提供的基于微信内的网页开发工具包。</p>\n<p>通过使用微信JS-SDK，网页开发者可以借助使用拍照/选图/语音/位置等手机系统的能力，同时可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力，为微信用户提供更优质的网页体验。</p>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><h4 id=\"1-绑定域名\"><a href=\"#1-绑定域名\" class=\"headerlink\" title=\"1. 绑定域名\"></a>1. 绑定域名</h4><h4 id=\"2-引入js文件-http-res-wx-qq-com-open-js-jweixin-1-4-0-js\"><a href=\"#2-引入js文件-http-res-wx-qq-com-open-js-jweixin-1-4-0-js\" class=\"headerlink\" title=\"2. 引入js文件 http://res.wx.qq.com/open/js/jweixin-1.4.0.js\"></a>2. 引入js文件 <code>http://res.wx.qq.com/open/js/jweixin-1.4.0.js</code></h4><h4 id=\"3-注入权限验证配置\"><a href=\"#3-注入权限验证配置\" class=\"headerlink\" title=\"3. 注入权限验证配置\"></a>3. 注入权限验证配置</h4><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则无法调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class=\"line\">    appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">    timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">    nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">    signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">    jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">eg: 需要的JS接口列表</span><br><span class=\"line\">jsApiList:[<span class=\"string\">'checkJsApi'</span>,</span><br><span class=\"line\">          <span class=\"string\">'chooseImage'</span>,</span><br><span class=\"line\">          <span class=\"string\">'uploadImage'</span>,</span><br><span class=\"line\">          <span class=\"string\">'getLocalImgData'</span>,</span><br><span class=\"line\">          <span class=\"string\">'onMenuShareAppMessage'</span>,</span><br><span class=\"line\">          ]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-通过ready接口处理成功验证\"><a href=\"#4-通过ready接口处理成功验证\" class=\"headerlink\" title=\"4. 通过ready接口处理成功验证\"></a>4. 通过ready接口处理成功验证</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">eg: 开启分享功能</span><br><span class=\"line\"><span class=\"built_in\">window</span>.wx.ready(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 分享给朋友</span></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.wx.onMenuShareAppMessage(&#123;</span><br><span class=\"line\">    title,</span><br><span class=\"line\">    desc,</span><br><span class=\"line\">    link,</span><br><span class=\"line\">    imgUrl,</span><br><span class=\"line\">    type: <span class=\"string\">''</span>,</span><br><span class=\"line\">    dataUrl: <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-通过error接口处理失败验证\"><a href=\"#5-通过error接口处理失败验证\" class=\"headerlink\" title=\"5.通过error接口处理失败验证\"></a>5.通过error接口处理失败验证</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>config配置成功后，就可以调用接口了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ImagePicker&#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd-mobile'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ImagePicker</span><br><span class=\"line\">  length=<span class=\"string\">\"4\"</span></span><br><span class=\"line\">  files=&#123;files&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 删除</span></span><br><span class=\"line\">  onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 点击图片预览</span></span><br><span class=\"line\">  onImageClick=&#123;<span class=\"keyword\">this</span>.onImageClick&#125;</span><br><span class=\"line\">  selectable=&#123;files.length &lt; <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 增加图片</span></span><br><span class=\"line\">  onAddImageClick=&#123;<span class=\"keyword\">this</span>.onAddImageClick&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加图片：从本地或手机相册选择</span></span><br><span class=\"line\">wx.chooseImage(&#123;</span><br><span class=\"line\">  count: <span class=\"number\">1</span>, <span class=\"comment\">// 最多选择几张</span></span><br><span class=\"line\">  sizeType: [<span class=\"string\">'original'</span>, <span class=\"string\">'compressed'</span>], <span class=\"comment\">// 可以指定是原图还是压缩图，默认二者都有</span></span><br><span class=\"line\">  sourceType: [<span class=\"string\">'album'</span>, <span class=\"string\">'camera'</span>], <span class=\"comment\">// 可以指定来源是相册还是相机，默认二者都有</span></span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> localIds = res.localIds; <span class=\"comment\">// 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 选择图片时在此处出现了IOS兼容性问题</span></span><br><span class=\"line\">此接口仅在 iOS WKWebview 下提供，用于兼容 iOS WKWebview 不支持 localId 直接显示图片的问题</span><br><span class=\"line\">  wx.getLocalImgData(&#123;</span><br><span class=\"line\">  localId: <span class=\"string\">''</span>, <span class=\"comment\">// 图片的localID</span></span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> localData = res.localData; <span class=\"comment\">// localData是图片的base64数据，可以用img标签显示</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"string\">`页面如何判断当前使用的webview内核：</span></span><br><span class=\"line\"><span class=\"string\">在页面中可通过微信注入的window.wxjs_is_wkwebview变量判断当前使用的webview内核。 iOS微信6.5.3及其之后的版本 window.wxjs_is_wkwebview 为true时是使用WKWebview，为 false或者 “undefine”时是 UIWebview 。`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 预览图片</span><br><span class=\"line\">  wx.previewImage(&#123;</span><br><span class=\"line\">  current: &apos;&apos;, // 当前显示图片的http链接</span><br><span class=\"line\">  urls: [] // 需要预览的图片http链接列表</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>记录我的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https.js</span></span><br><span class=\"line\"><span class=\"comment\">// 微信jssdk签名</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wxShare</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"built_in\">window</span>.location.href.replace(<span class=\"regexp\">/&amp;/g</span>, <span class=\"string\">'@@@'</span>);</span><br><span class=\"line\">  axios</span><br><span class=\"line\">    .get(<span class=\"string\">'weixin/api/v1/weixin/callback/showdata'</span>, &#123;</span><br><span class=\"line\">      params: &#123;</span><br><span class=\"line\">        url: url.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; nonceStr, timestamp, signature, appid &#125; = res.data.data;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> defaultLink = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        title = <span class=\"string\">''</span>,</span><br><span class=\"line\">        desc = <span class=\"string\">''</span>,</span><br><span class=\"line\">        link = defaultLink,</span><br><span class=\"line\">        imgUrl = <span class=\"string\">''</span>,</span><br><span class=\"line\">      &#125; = options;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">window</span>.wx.config(&#123;</span><br><span class=\"line\">        debug: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        appId: appid,</span><br><span class=\"line\">        timestamp,</span><br><span class=\"line\">        nonceStr,</span><br><span class=\"line\">        signature,</span><br><span class=\"line\">        jsApiList: [</span><br><span class=\"line\">          <span class=\"string\">'checkJsApi'</span>,</span><br><span class=\"line\">          <span class=\"string\">'chooseImage'</span>,</span><br><span class=\"line\">          <span class=\"string\">'uploadImage'</span>,</span><br><span class=\"line\">          <span class=\"string\">'getLocalImgData'</span>,</span><br><span class=\"line\">          <span class=\"string\">'onMenuShareAppMessage'</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.wx.ready(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分享给朋友</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.wx.onMenuShareAppMessage(&#123;</span><br><span class=\"line\">          title,</span><br><span class=\"line\">          desc,</span><br><span class=\"line\">          link,</span><br><span class=\"line\">          imgUrl,</span><br><span class=\"line\">          type: <span class=\"string\">''</span>,</span><br><span class=\"line\">          dataUrl: <span class=\"string\">''</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  List,</span><br><span class=\"line\">  TextareaItem,</span><br><span class=\"line\">  Button,</span><br><span class=\"line\">  WingBlank,</span><br><span class=\"line\">  ImagePicker,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd-mobile'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rc-form'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">'styled-components'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; rem &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/utils'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; wxShare &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/api/http'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    url: <span class=\"string\">'https://zos.alipayobjects.com/rmsportal/PZUUCKTRIHWiZSY.jpeg'</span>,</span><br><span class=\"line\">    id: <span class=\"string\">'0'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Feedbackkk</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    files: data,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    wxShare(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">'反馈'</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//点击图片预览</span></span><br><span class=\"line\">  onImageClick = <span class=\"function\">(<span class=\"params\">index, fs</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(index, fs); 索引 图片数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> urls = [];</span><br><span class=\"line\">    fs.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      urls.push(item.url);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.wx.previewImage(&#123;</span><br><span class=\"line\">      current: fs[index].url, <span class=\"comment\">// 当前显示图片的http链接</span></span><br><span class=\"line\">      urls: urls, <span class=\"comment\">// 需要预览的图片http链接列表</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 控制删除</span></span><br><span class=\"line\">  onChange = <span class=\"function\">(<span class=\"params\">files, type, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(files, type, index); 图片数组 \"remove\" 删除的索引</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      files,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 增加图片</span></span><br><span class=\"line\">  onAddImageClick = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isWk = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.wxjs_is_wkwebview) &#123;</span><br><span class=\"line\">      isWk = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.wx.chooseImage(&#123;</span><br><span class=\"line\">      count: <span class=\"number\">4</span>, <span class=\"comment\">// 默认9，最多选择几张</span></span><br><span class=\"line\">      sizeType: [<span class=\"string\">'original'</span>, <span class=\"string\">'compressed'</span>], <span class=\"comment\">// 可以指定是原图还是压缩图，默认二者都有</span></span><br><span class=\"line\">      sourceType: [<span class=\"string\">'album'</span>, <span class=\"string\">'camera'</span>], <span class=\"comment\">// 可以指定来源是相册还是相机，默认二者都有</span></span><br><span class=\"line\">      success: <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">        <span class=\"comment\">// 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> localIds = res.localIds;</span><br><span class=\"line\">        localIds.forEach(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (isWk) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.wx.getLocalImgData(&#123;</span><br><span class=\"line\">              localId: item, <span class=\"comment\">// 图片的localID</span></span><br><span class=\"line\">              success: <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> localData = res.localData;</span><br><span class=\"line\">                <span class=\"comment\">// 展示选中图片</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">                  files: <span class=\"keyword\">this</span>.state.files.concat(&#123;</span><br><span class=\"line\">                    url: localData,</span><br><span class=\"line\">                    id: <span class=\"keyword\">this</span>.state.files.length + index,</span><br><span class=\"line\">                  &#125;),</span><br><span class=\"line\">                &#125;); <span class=\"comment\">// localData是图片的base64数据，可以用img标签显示</span></span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 展示选中图片</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">              files: <span class=\"keyword\">this</span>.state.files.concat(&#123;</span><br><span class=\"line\">                url: item,</span><br><span class=\"line\">                id: <span class=\"keyword\">this</span>.state.files.length + index,</span><br><span class=\"line\">              &#125;),</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 上传图片</span></span><br><span class=\"line\">          <span class=\"comment\">// window.wx.uploadImage(&#123;</span></span><br><span class=\"line\">          <span class=\"comment\">//   localId: res.localIds[0], // 需要上传的图片的本地ID，由chooseImage接口获得</span></span><br><span class=\"line\">          <span class=\"comment\">//   isShowProgressTips: 0, // 默认为1，显示进度提示</span></span><br><span class=\"line\">          <span class=\"comment\">//   success: pic =&gt; &#123;</span></span><br><span class=\"line\">          <span class=\"comment\">//     // this.uploadImage(pic.serverId).then(resp =&gt; &#123;</span></span><br><span class=\"line\">          <span class=\"comment\">//     //   if (resp.data) &#123;</span></span><br><span class=\"line\">          <span class=\"comment\">//     //     Toast('上传成功');</span></span><br><span class=\"line\">          <span class=\"comment\">//     //   &#125; else &#123;</span></span><br><span class=\"line\">          <span class=\"comment\">//     //     Toast('上传失败');</span></span><br><span class=\"line\">          <span class=\"comment\">//     //   &#125;</span></span><br><span class=\"line\">          <span class=\"comment\">//     // &#125;);</span></span><br><span class=\"line\">          <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">          <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; getFieldProps &#125; = <span class=\"keyword\">this</span>.props.form;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; files &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Li&gt;</span><br><span class=\"line\">          &lt;Texta</span><br><span class=\"line\">            &#123;...getFieldProps(<span class=\"string\">'count'</span>, &#123;</span><br><span class=\"line\">              <span class=\"comment\">// initialValue: '描述您遇到的问题或建议',</span></span><br><span class=\"line\">            &#125;)&#125;</span><br><span class=\"line\">            rows=&#123;<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">            count=&#123;<span class=\"number\">200</span>&#125;</span><br><span class=\"line\">            placeholder=<span class=\"string\">\"描述您遇到的问题或建议\"</span></span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Screenshots&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;SsText&gt;相关截图&lt;/</span>SsText&gt;</span><br><span class=\"line\">          &lt;SsCount&gt;<span class=\"number\">0</span>/<span class=\"number\">4</span>&lt;<span class=\"regexp\">/SsCount&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>Screenshots&gt;</span><br><span class=\"line\">        &lt;ImgSel&gt;</span><br><span class=\"line\">          &lt;ImagePicker</span><br><span class=\"line\">            length=<span class=\"string\">\"4\"</span></span><br><span class=\"line\">            files=&#123;files&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;</span><br><span class=\"line\">            onImageClick=&#123;<span class=\"keyword\">this</span>.onImageClick&#125;</span><br><span class=\"line\">            selectable=&#123;files.length &lt; <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">            onAddImageClick=&#123;<span class=\"keyword\">this</span>.onAddImageClick&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/ImgSel&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;WingBlank&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Btn type=\"warning\"&gt;提交&lt;/</span>Btn&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/WingBlank&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Feedback = createForm()(Feedbackkk);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Feedback;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Li = styled(List)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  padding: <span class=\"subst\">$&#123;rem(<span class=\"string\">'0 15px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">  .am-list-item.am-textarea-item &#123;</span></span><br><span class=\"line\"><span class=\"string\">    padding: 0 !important;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Texta = styled(TextareaItem)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  .am-textarea-control textarea &#123;</span></span><br><span class=\"line\"><span class=\"string\">    font-size: <span class=\"subst\">$&#123;rem(<span class=\"string\">'14px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  .am-textarea-count &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: #999;</span></span><br><span class=\"line\"><span class=\"string\">    transform: translateX(<span class=\"subst\">$&#123;rem(<span class=\"string\">'4px'</span>)&#125;</span>);</span></span><br><span class=\"line\"><span class=\"string\">    margin-bottom: <span class=\"subst\">$&#123;rem(<span class=\"string\">'10px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  .am-textarea-count span &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: #999999;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ImgSel = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">  .am-image-picker-list &#123;</span></span><br><span class=\"line\"><span class=\"string\">    padding: <span class=\"subst\">$&#123;rem(<span class=\"string\">'0 15px 23px 15px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Screenshots = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">  display: flex;</span></span><br><span class=\"line\"><span class=\"string\">  justify-content: space-between;</span></span><br><span class=\"line\"><span class=\"string\">  align-items: center;</span></span><br><span class=\"line\"><span class=\"string\">  padding: <span class=\"subst\">$&#123;rem(<span class=\"string\">'12px 15px 8px 15px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> SsText = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  font-size: <span class=\"subst\">$&#123;rem(<span class=\"string\">'16px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  color: #595959;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> SsCount = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  font-size: <span class=\"subst\">$&#123;rem(<span class=\"string\">'14px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  color: #999999;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Btn = styled(Button)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  span &#123;</span></span><br><span class=\"line\"><span class=\"string\">    font-size: <span class=\"subst\">$&#123;rem(<span class=\"string\">'18px'</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> III = styled.img<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  width: 80px;</span></span><br><span class=\"line\"><span class=\"string\">  height: 80px;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> CCC = styled.img<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  width: 80px;</span></span><br><span class=\"line\"><span class=\"string\">  height: 80px;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Add = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  width: 80px;</span></span><br><span class=\"line\"><span class=\"string\">  height: 80px;</span></span><br><span class=\"line\"><span class=\"string\">  border: 1px solid #000;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></figure>"},{"title":"面试题汇总","date":"2018-03-08T10:59:49.000Z","_content":"\n哈哈\n\n<!-- more -->\n\n## 1、一个优秀的前端开发人员需要具备哪些特质？\n做完，做好，分享。\n## 2、常见的布局方式有哪些？\n(1)固定布局：页面被一个固定的网页包裹，容器不能移动，页面的宽高也不随页面的变化而变化，灵活性不高。\n(2)流式布局：屏幕自适应，根据屏幕的情况变化，不容易控制，PC端用的不是非常多。\n(3)弹性布局：ie9以下浏览器都不支持。\n(4)浮动布局\n(5)定位布局\n(6)margin和padding\n## 3、页面导入样式时的常见方式有哪些？\nlink，import\n## 4、常见的解决浏览器兼容性问题的方式有哪些？\n## 5、html5有哪些新特性？\n## 6、网页验证码是干嘛的？是为了解决什么安全问题？\n## 7、介绍一下标准的css的盒子模型？\n## 8、如何居中div，如何居中一个浮动元素？如何让绝对定位的div居中？\n## 9、position的值relative和absolute的区别什么\n## 10、display设置为inline-block时，li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\n行框的排列会受到中间空白（回车空格等等）的影响，这些空白也会被应用样式，占据空间，所以会有间隔\n解决：设置ul的font-size为0，缺陷是必须重新在li中去设置字体大小\n## 11、请解释下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？\n\n## 12.创建对象的3种方式\n```\n1)工厂模式\n>考虑到在ECMAScript中无法创建类，开发人员就发明了一种函数，用函数来封装以特定接口创建对象的细节\nfunction createPerson(name,age,job){\n　　　　var o = new Object();\n　　　　o.name = name;\n　　　　o.age = age;\n　　　　o.job = job;\n　　　　o.sayName = function(){\n　　　　　　alert(this.name);\n　　　　}\n　　　　return o;\n　　}\n　　var person1 = createPerson('Grey',27,'Doctor');\n>工厂函数不必使用new关键字，可以消除对象间的耦合。解决了重复实例化的问题，但无法搞清楚他们是哪个对象的实例。\n\n2)构造函数模式：解决了重复实例化的问题，与对象识别的问题。没有return。\n>什么是构造函数：描述一类对象统一结构的函数。\nfunction Person(name,age,job){\n　　　　this.name = name;\n　　　　this.age = age;\n　　　　this.job = job;\n　　　　this.sayName = function(){\n　　　　　　alert(this.name);\n　　　　}\n　　}\n　　var person1 = new Person(\"Nicholas\", 29, \"Software Engineer\"); \n　　var person2 = new Person('Grey',27,'Doctor');\n>*new的时候干了4件事：\n>创建一个新对象；\n>this指向这个新对象（将构造函数的作用域赋给新对象）；\n>为这个新对象添加属性和方法（执行构造函数中的代码）\n>返回新对象\n\n3)原型模式\n>我们创建的每一个函数都有一个prototype(原型对象)，\n>原型对象的好处是可以让所有对象实例共享它所包含的属性和方法\n>换句话说，不必在构造函数中定义对象的所有信息，而是将这些信息直接添加到原型对象中\n>与构造函数模式不同的是，新对象的这些属性和方法是由所有实例共享的。\nfunction Person(){\n}\n　　Person.prototype.name = 'Nicholas';\n　　Person.prototype.age = 29;\n　　Person.prototype.job = 'Software Engineer';\n　　Person.prototype.sayName = function(){\n　　　　alert(this.name);\n　　}\n　　var person1 = new Person();\n　　person1.sayName();//\"Nicholas\"\n　　var person2 = new Person(); \n　　person2.sayName(); //\"Nicholas\" \n　　alert(person1.sayName == person2.sayName); //true\n```\n\n## 13.哪种方式更高效：document.getElementbyId(\"myId\") 还是 $(\"#myId\")？\n```\n第一种：直接调用了js引擎。第二种会判断该使用哪种方式获取\n```\n\n## 14.关于跨域\n```\n(1)造成跨域的两种策略：\nDOM同源策略：禁止对不同源页面DOM进行操作。主要场景是iframe跨域的情况，不同域名的iframe是限制相互访问的，在同一个页面中也不许访问。\nXMLHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起http请求。\n*只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。\n(2)如何实现跨域？\n>>>跨域资源共享（CORS）：客户端，使用正常的xhr对象发送ajax请求，设置xhr.withCredentials=true(将cookie带过去)；服务器端，response header中设置Access-Control-Allow-Origin:yourhost.com  Access-Control-Allow-Credentials:true\n>>>jsonp实现跨域\n*jsonp不能发post请求，只支持GET请求\n<script>标签没有跨域限制，json是一种数据格式；jsonp是一种数据调用方式，可以理解为jsonp是带有callback的json，服务器端echo callback+'('+json+')';\n```\n\n## 15.jQuery.get() 和 jQuery.ajax() 方法之间的区别是什么?\n```\n*jQuery.ajax() 方法更强大，更具可配置性, 让你可以指定等待多久，以及如何处理错误。\n*jQuery.get() 只获取数据的专门方法\n```\n\n## 16.ajax\n```\n(1)什么是ajax？为什么要使用ajax？\n*ajax被称为异步的JavaScript和XML，是实现异步交互的主要技术。\n*优点：ajax可以实现页面的局部数据更新（页面不刷新就可以更新数据），对带宽和服务器的压力减小；缺点：浏览器的后退按钮失效，搜索引擎无法抓取，破坏代码的整体执行流程，不容易查找错误。\n```\n\n\n\n","source":"_posts/面试题汇总.md","raw":"---\ntitle: 面试题汇总\ndate: 2018-03-08 18:59:49\ntags:\n- js\ncategories:\n- 前端\n---\n\n哈哈\n\n<!-- more -->\n\n## 1、一个优秀的前端开发人员需要具备哪些特质？\n做完，做好，分享。\n## 2、常见的布局方式有哪些？\n(1)固定布局：页面被一个固定的网页包裹，容器不能移动，页面的宽高也不随页面的变化而变化，灵活性不高。\n(2)流式布局：屏幕自适应，根据屏幕的情况变化，不容易控制，PC端用的不是非常多。\n(3)弹性布局：ie9以下浏览器都不支持。\n(4)浮动布局\n(5)定位布局\n(6)margin和padding\n## 3、页面导入样式时的常见方式有哪些？\nlink，import\n## 4、常见的解决浏览器兼容性问题的方式有哪些？\n## 5、html5有哪些新特性？\n## 6、网页验证码是干嘛的？是为了解决什么安全问题？\n## 7、介绍一下标准的css的盒子模型？\n## 8、如何居中div，如何居中一个浮动元素？如何让绝对定位的div居中？\n## 9、position的值relative和absolute的区别什么\n## 10、display设置为inline-block时，li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\n行框的排列会受到中间空白（回车空格等等）的影响，这些空白也会被应用样式，占据空间，所以会有间隔\n解决：设置ul的font-size为0，缺陷是必须重新在li中去设置字体大小\n## 11、请解释下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？\n\n## 12.创建对象的3种方式\n```\n1)工厂模式\n>考虑到在ECMAScript中无法创建类，开发人员就发明了一种函数，用函数来封装以特定接口创建对象的细节\nfunction createPerson(name,age,job){\n　　　　var o = new Object();\n　　　　o.name = name;\n　　　　o.age = age;\n　　　　o.job = job;\n　　　　o.sayName = function(){\n　　　　　　alert(this.name);\n　　　　}\n　　　　return o;\n　　}\n　　var person1 = createPerson('Grey',27,'Doctor');\n>工厂函数不必使用new关键字，可以消除对象间的耦合。解决了重复实例化的问题，但无法搞清楚他们是哪个对象的实例。\n\n2)构造函数模式：解决了重复实例化的问题，与对象识别的问题。没有return。\n>什么是构造函数：描述一类对象统一结构的函数。\nfunction Person(name,age,job){\n　　　　this.name = name;\n　　　　this.age = age;\n　　　　this.job = job;\n　　　　this.sayName = function(){\n　　　　　　alert(this.name);\n　　　　}\n　　}\n　　var person1 = new Person(\"Nicholas\", 29, \"Software Engineer\"); \n　　var person2 = new Person('Grey',27,'Doctor');\n>*new的时候干了4件事：\n>创建一个新对象；\n>this指向这个新对象（将构造函数的作用域赋给新对象）；\n>为这个新对象添加属性和方法（执行构造函数中的代码）\n>返回新对象\n\n3)原型模式\n>我们创建的每一个函数都有一个prototype(原型对象)，\n>原型对象的好处是可以让所有对象实例共享它所包含的属性和方法\n>换句话说，不必在构造函数中定义对象的所有信息，而是将这些信息直接添加到原型对象中\n>与构造函数模式不同的是，新对象的这些属性和方法是由所有实例共享的。\nfunction Person(){\n}\n　　Person.prototype.name = 'Nicholas';\n　　Person.prototype.age = 29;\n　　Person.prototype.job = 'Software Engineer';\n　　Person.prototype.sayName = function(){\n　　　　alert(this.name);\n　　}\n　　var person1 = new Person();\n　　person1.sayName();//\"Nicholas\"\n　　var person2 = new Person(); \n　　person2.sayName(); //\"Nicholas\" \n　　alert(person1.sayName == person2.sayName); //true\n```\n\n## 13.哪种方式更高效：document.getElementbyId(\"myId\") 还是 $(\"#myId\")？\n```\n第一种：直接调用了js引擎。第二种会判断该使用哪种方式获取\n```\n\n## 14.关于跨域\n```\n(1)造成跨域的两种策略：\nDOM同源策略：禁止对不同源页面DOM进行操作。主要场景是iframe跨域的情况，不同域名的iframe是限制相互访问的，在同一个页面中也不许访问。\nXMLHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起http请求。\n*只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。\n(2)如何实现跨域？\n>>>跨域资源共享（CORS）：客户端，使用正常的xhr对象发送ajax请求，设置xhr.withCredentials=true(将cookie带过去)；服务器端，response header中设置Access-Control-Allow-Origin:yourhost.com  Access-Control-Allow-Credentials:true\n>>>jsonp实现跨域\n*jsonp不能发post请求，只支持GET请求\n<script>标签没有跨域限制，json是一种数据格式；jsonp是一种数据调用方式，可以理解为jsonp是带有callback的json，服务器端echo callback+'('+json+')';\n```\n\n## 15.jQuery.get() 和 jQuery.ajax() 方法之间的区别是什么?\n```\n*jQuery.ajax() 方法更强大，更具可配置性, 让你可以指定等待多久，以及如何处理错误。\n*jQuery.get() 只获取数据的专门方法\n```\n\n## 16.ajax\n```\n(1)什么是ajax？为什么要使用ajax？\n*ajax被称为异步的JavaScript和XML，是实现异步交互的主要技术。\n*优点：ajax可以实现页面的局部数据更新（页面不刷新就可以更新数据），对带宽和服务器的压力减小；缺点：浏览器的后退按钮失效，搜索引擎无法抓取，破坏代码的整体执行流程，不容易查找错误。\n```\n\n\n\n","slug":"面试题汇总","published":1,"updated":"2019-03-12T04:22:48.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt5ccow30026g8rxax4zzbr6","content":"<p>哈哈</p>\n<a id=\"more\"></a>\n<h2 id=\"1、一个优秀的前端开发人员需要具备哪些特质？\"><a href=\"#1、一个优秀的前端开发人员需要具备哪些特质？\" class=\"headerlink\" title=\"1、一个优秀的前端开发人员需要具备哪些特质？\"></a>1、一个优秀的前端开发人员需要具备哪些特质？</h2><p>做完，做好，分享。</p>\n<h2 id=\"2、常见的布局方式有哪些？\"><a href=\"#2、常见的布局方式有哪些？\" class=\"headerlink\" title=\"2、常见的布局方式有哪些？\"></a>2、常见的布局方式有哪些？</h2><p>(1)固定布局：页面被一个固定的网页包裹，容器不能移动，页面的宽高也不随页面的变化而变化，灵活性不高。<br>(2)流式布局：屏幕自适应，根据屏幕的情况变化，不容易控制，PC端用的不是非常多。<br>(3)弹性布局：ie9以下浏览器都不支持。<br>(4)浮动布局<br>(5)定位布局<br>(6)margin和padding</p>\n<h2 id=\"3、页面导入样式时的常见方式有哪些？\"><a href=\"#3、页面导入样式时的常见方式有哪些？\" class=\"headerlink\" title=\"3、页面导入样式时的常见方式有哪些？\"></a>3、页面导入样式时的常见方式有哪些？</h2><p>link，import</p>\n<h2 id=\"4、常见的解决浏览器兼容性问题的方式有哪些？\"><a href=\"#4、常见的解决浏览器兼容性问题的方式有哪些？\" class=\"headerlink\" title=\"4、常见的解决浏览器兼容性问题的方式有哪些？\"></a>4、常见的解决浏览器兼容性问题的方式有哪些？</h2><h2 id=\"5、html5有哪些新特性？\"><a href=\"#5、html5有哪些新特性？\" class=\"headerlink\" title=\"5、html5有哪些新特性？\"></a>5、html5有哪些新特性？</h2><h2 id=\"6、网页验证码是干嘛的？是为了解决什么安全问题？\"><a href=\"#6、网页验证码是干嘛的？是为了解决什么安全问题？\" class=\"headerlink\" title=\"6、网页验证码是干嘛的？是为了解决什么安全问题？\"></a>6、网页验证码是干嘛的？是为了解决什么安全问题？</h2><h2 id=\"7、介绍一下标准的css的盒子模型？\"><a href=\"#7、介绍一下标准的css的盒子模型？\" class=\"headerlink\" title=\"7、介绍一下标准的css的盒子模型？\"></a>7、介绍一下标准的css的盒子模型？</h2><h2 id=\"8、如何居中div，如何居中一个浮动元素？如何让绝对定位的div居中？\"><a href=\"#8、如何居中div，如何居中一个浮动元素？如何让绝对定位的div居中？\" class=\"headerlink\" title=\"8、如何居中div，如何居中一个浮动元素？如何让绝对定位的div居中？\"></a>8、如何居中div，如何居中一个浮动元素？如何让绝对定位的div居中？</h2><h2 id=\"9、position的值relative和absolute的区别什么\"><a href=\"#9、position的值relative和absolute的区别什么\" class=\"headerlink\" title=\"9、position的值relative和absolute的区别什么\"></a>9、position的值relative和absolute的区别什么</h2><h2 id=\"10、display设置为inline-block时，li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"><a href=\"#10、display设置为inline-block时，li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\" class=\"headerlink\" title=\"10、display设置为inline-block时，li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"></a>10、display设置为inline-block时，li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h2><p>行框的排列会受到中间空白（回车空格等等）的影响，这些空白也会被应用样式，占据空间，所以会有间隔<br>解决：设置ul的font-size为0，缺陷是必须重新在li中去设置字体大小</p>\n<h2 id=\"11、请解释下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？\"><a href=\"#11、请解释下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？\" class=\"headerlink\" title=\"11、请解释下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？\"></a>11、请解释下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？</h2><h2 id=\"12-创建对象的3种方式\"><a href=\"#12-创建对象的3种方式\" class=\"headerlink\" title=\"12.创建对象的3种方式\"></a>12.创建对象的3种方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)工厂模式</span><br><span class=\"line\">&gt;考虑到在ECMAScript中无法创建类，开发人员就发明了一种函数，用函数来封装以特定接口创建对象的细节</span><br><span class=\"line\">function createPerson(name,age,job)&#123;</span><br><span class=\"line\">　　　　var o = new Object();</span><br><span class=\"line\">　　　　o.name = name;</span><br><span class=\"line\">　　　　o.age = age;</span><br><span class=\"line\">　　　　o.job = job;</span><br><span class=\"line\">　　　　o.sayName = function()&#123;</span><br><span class=\"line\">　　　　　　alert(this.name);</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　return o;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　var person1 = createPerson(&apos;Grey&apos;,27,&apos;Doctor&apos;);</span><br><span class=\"line\">&gt;工厂函数不必使用new关键字，可以消除对象间的耦合。解决了重复实例化的问题，但无法搞清楚他们是哪个对象的实例。</span><br><span class=\"line\"></span><br><span class=\"line\">2)构造函数模式：解决了重复实例化的问题，与对象识别的问题。没有return。</span><br><span class=\"line\">&gt;什么是构造函数：描述一类对象统一结构的函数。</span><br><span class=\"line\">function Person(name,age,job)&#123;</span><br><span class=\"line\">　　　　this.name = name;</span><br><span class=\"line\">　　　　this.age = age;</span><br><span class=\"line\">　　　　this.job = job;</span><br><span class=\"line\">　　　　this.sayName = function()&#123;</span><br><span class=\"line\">　　　　　　alert(this.name);</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;); </span><br><span class=\"line\">　　var person2 = new Person(&apos;Grey&apos;,27,&apos;Doctor&apos;);</span><br><span class=\"line\">&gt;*new的时候干了4件事：</span><br><span class=\"line\">&gt;创建一个新对象；</span><br><span class=\"line\">&gt;this指向这个新对象（将构造函数的作用域赋给新对象）；</span><br><span class=\"line\">&gt;为这个新对象添加属性和方法（执行构造函数中的代码）</span><br><span class=\"line\">&gt;返回新对象</span><br><span class=\"line\"></span><br><span class=\"line\">3)原型模式</span><br><span class=\"line\">&gt;我们创建的每一个函数都有一个prototype(原型对象)，</span><br><span class=\"line\">&gt;原型对象的好处是可以让所有对象实例共享它所包含的属性和方法</span><br><span class=\"line\">&gt;换句话说，不必在构造函数中定义对象的所有信息，而是将这些信息直接添加到原型对象中</span><br><span class=\"line\">&gt;与构造函数模式不同的是，新对象的这些属性和方法是由所有实例共享的。</span><br><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">　　Person.prototype.name = &apos;Nicholas&apos;;</span><br><span class=\"line\">　　Person.prototype.age = 29;</span><br><span class=\"line\">　　Person.prototype.job = &apos;Software Engineer&apos;;</span><br><span class=\"line\">　　Person.prototype.sayName = function()&#123;</span><br><span class=\"line\">　　　　alert(this.name);</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　var person1 = new Person();</span><br><span class=\"line\">　　person1.sayName();//&quot;Nicholas&quot;</span><br><span class=\"line\">　　var person2 = new Person(); </span><br><span class=\"line\">　　person2.sayName(); //&quot;Nicholas&quot; </span><br><span class=\"line\">　　alert(person1.sayName == person2.sayName); //true</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-哪种方式更高效：document-getElementbyId-“myId”-还是-“-myId”-？\"><a href=\"#13-哪种方式更高效：document-getElementbyId-“myId”-还是-“-myId”-？\" class=\"headerlink\" title=\"13.哪种方式更高效：document.getElementbyId(“myId”) 还是 $(“#myId”)？\"></a>13.哪种方式更高效：document.getElementbyId(“myId”) 还是 $(“#myId”)？</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种：直接调用了js引擎。第二种会判断该使用哪种方式获取</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-关于跨域\"><a href=\"#14-关于跨域\" class=\"headerlink\" title=\"14.关于跨域\"></a>14.关于跨域</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1)造成跨域的两种策略：</span><br><span class=\"line\">DOM同源策略：禁止对不同源页面DOM进行操作。主要场景是iframe跨域的情况，不同域名的iframe是限制相互访问的，在同一个页面中也不许访问。</span><br><span class=\"line\">XMLHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起http请求。</span><br><span class=\"line\">*只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</span><br><span class=\"line\">(2)如何实现跨域？</span><br><span class=\"line\">&gt;&gt;&gt;跨域资源共享（CORS）：客户端，使用正常的xhr对象发送ajax请求，设置xhr.withCredentials=true(将cookie带过去)；服务器端，response header中设置Access-Control-Allow-Origin:yourhost.com  Access-Control-Allow-Credentials:true</span><br><span class=\"line\">&gt;&gt;&gt;jsonp实现跨域</span><br><span class=\"line\">*jsonp不能发post请求，只支持GET请求</span><br><span class=\"line\">&lt;script&gt;标签没有跨域限制，json是一种数据格式；jsonp是一种数据调用方式，可以理解为jsonp是带有callback的json，服务器端echo callback+&apos;(&apos;+json+&apos;)&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-jQuery-get-和-jQuery-ajax-方法之间的区别是什么\"><a href=\"#15-jQuery-get-和-jQuery-ajax-方法之间的区别是什么\" class=\"headerlink\" title=\"15.jQuery.get() 和 jQuery.ajax() 方法之间的区别是什么?\"></a>15.jQuery.get() 和 jQuery.ajax() 方法之间的区别是什么?</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*jQuery.ajax() 方法更强大，更具可配置性, 让你可以指定等待多久，以及如何处理错误。</span><br><span class=\"line\">*jQuery.get() 只获取数据的专门方法</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-ajax\"><a href=\"#16-ajax\" class=\"headerlink\" title=\"16.ajax\"></a>16.ajax</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1)什么是ajax？为什么要使用ajax？</span><br><span class=\"line\">*ajax被称为异步的JavaScript和XML，是实现异步交互的主要技术。</span><br><span class=\"line\">*优点：ajax可以实现页面的局部数据更新（页面不刷新就可以更新数据），对带宽和服务器的压力减小；缺点：浏览器的后退按钮失效，搜索引擎无法抓取，破坏代码的整体执行流程，不容易查找错误。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>哈哈</p>","more":"<h2 id=\"1、一个优秀的前端开发人员需要具备哪些特质？\"><a href=\"#1、一个优秀的前端开发人员需要具备哪些特质？\" class=\"headerlink\" title=\"1、一个优秀的前端开发人员需要具备哪些特质？\"></a>1、一个优秀的前端开发人员需要具备哪些特质？</h2><p>做完，做好，分享。</p>\n<h2 id=\"2、常见的布局方式有哪些？\"><a href=\"#2、常见的布局方式有哪些？\" class=\"headerlink\" title=\"2、常见的布局方式有哪些？\"></a>2、常见的布局方式有哪些？</h2><p>(1)固定布局：页面被一个固定的网页包裹，容器不能移动，页面的宽高也不随页面的变化而变化，灵活性不高。<br>(2)流式布局：屏幕自适应，根据屏幕的情况变化，不容易控制，PC端用的不是非常多。<br>(3)弹性布局：ie9以下浏览器都不支持。<br>(4)浮动布局<br>(5)定位布局<br>(6)margin和padding</p>\n<h2 id=\"3、页面导入样式时的常见方式有哪些？\"><a href=\"#3、页面导入样式时的常见方式有哪些？\" class=\"headerlink\" title=\"3、页面导入样式时的常见方式有哪些？\"></a>3、页面导入样式时的常见方式有哪些？</h2><p>link，import</p>\n<h2 id=\"4、常见的解决浏览器兼容性问题的方式有哪些？\"><a href=\"#4、常见的解决浏览器兼容性问题的方式有哪些？\" class=\"headerlink\" title=\"4、常见的解决浏览器兼容性问题的方式有哪些？\"></a>4、常见的解决浏览器兼容性问题的方式有哪些？</h2><h2 id=\"5、html5有哪些新特性？\"><a href=\"#5、html5有哪些新特性？\" class=\"headerlink\" title=\"5、html5有哪些新特性？\"></a>5、html5有哪些新特性？</h2><h2 id=\"6、网页验证码是干嘛的？是为了解决什么安全问题？\"><a href=\"#6、网页验证码是干嘛的？是为了解决什么安全问题？\" class=\"headerlink\" title=\"6、网页验证码是干嘛的？是为了解决什么安全问题？\"></a>6、网页验证码是干嘛的？是为了解决什么安全问题？</h2><h2 id=\"7、介绍一下标准的css的盒子模型？\"><a href=\"#7、介绍一下标准的css的盒子模型？\" class=\"headerlink\" title=\"7、介绍一下标准的css的盒子模型？\"></a>7、介绍一下标准的css的盒子模型？</h2><h2 id=\"8、如何居中div，如何居中一个浮动元素？如何让绝对定位的div居中？\"><a href=\"#8、如何居中div，如何居中一个浮动元素？如何让绝对定位的div居中？\" class=\"headerlink\" title=\"8、如何居中div，如何居中一个浮动元素？如何让绝对定位的div居中？\"></a>8、如何居中div，如何居中一个浮动元素？如何让绝对定位的div居中？</h2><h2 id=\"9、position的值relative和absolute的区别什么\"><a href=\"#9、position的值relative和absolute的区别什么\" class=\"headerlink\" title=\"9、position的值relative和absolute的区别什么\"></a>9、position的值relative和absolute的区别什么</h2><h2 id=\"10、display设置为inline-block时，li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"><a href=\"#10、display设置为inline-block时，li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\" class=\"headerlink\" title=\"10、display设置为inline-block时，li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\"></a>10、display设置为inline-block时，li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h2><p>行框的排列会受到中间空白（回车空格等等）的影响，这些空白也会被应用样式，占据空间，所以会有间隔<br>解决：设置ul的font-size为0，缺陷是必须重新在li中去设置字体大小</p>\n<h2 id=\"11、请解释下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？\"><a href=\"#11、请解释下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？\" class=\"headerlink\" title=\"11、请解释下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？\"></a>11、请解释下为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？</h2><h2 id=\"12-创建对象的3种方式\"><a href=\"#12-创建对象的3种方式\" class=\"headerlink\" title=\"12.创建对象的3种方式\"></a>12.创建对象的3种方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)工厂模式</span><br><span class=\"line\">&gt;考虑到在ECMAScript中无法创建类，开发人员就发明了一种函数，用函数来封装以特定接口创建对象的细节</span><br><span class=\"line\">function createPerson(name,age,job)&#123;</span><br><span class=\"line\">　　　　var o = new Object();</span><br><span class=\"line\">　　　　o.name = name;</span><br><span class=\"line\">　　　　o.age = age;</span><br><span class=\"line\">　　　　o.job = job;</span><br><span class=\"line\">　　　　o.sayName = function()&#123;</span><br><span class=\"line\">　　　　　　alert(this.name);</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　return o;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　var person1 = createPerson(&apos;Grey&apos;,27,&apos;Doctor&apos;);</span><br><span class=\"line\">&gt;工厂函数不必使用new关键字，可以消除对象间的耦合。解决了重复实例化的问题，但无法搞清楚他们是哪个对象的实例。</span><br><span class=\"line\"></span><br><span class=\"line\">2)构造函数模式：解决了重复实例化的问题，与对象识别的问题。没有return。</span><br><span class=\"line\">&gt;什么是构造函数：描述一类对象统一结构的函数。</span><br><span class=\"line\">function Person(name,age,job)&#123;</span><br><span class=\"line\">　　　　this.name = name;</span><br><span class=\"line\">　　　　this.age = age;</span><br><span class=\"line\">　　　　this.job = job;</span><br><span class=\"line\">　　　　this.sayName = function()&#123;</span><br><span class=\"line\">　　　　　　alert(this.name);</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;); </span><br><span class=\"line\">　　var person2 = new Person(&apos;Grey&apos;,27,&apos;Doctor&apos;);</span><br><span class=\"line\">&gt;*new的时候干了4件事：</span><br><span class=\"line\">&gt;创建一个新对象；</span><br><span class=\"line\">&gt;this指向这个新对象（将构造函数的作用域赋给新对象）；</span><br><span class=\"line\">&gt;为这个新对象添加属性和方法（执行构造函数中的代码）</span><br><span class=\"line\">&gt;返回新对象</span><br><span class=\"line\"></span><br><span class=\"line\">3)原型模式</span><br><span class=\"line\">&gt;我们创建的每一个函数都有一个prototype(原型对象)，</span><br><span class=\"line\">&gt;原型对象的好处是可以让所有对象实例共享它所包含的属性和方法</span><br><span class=\"line\">&gt;换句话说，不必在构造函数中定义对象的所有信息，而是将这些信息直接添加到原型对象中</span><br><span class=\"line\">&gt;与构造函数模式不同的是，新对象的这些属性和方法是由所有实例共享的。</span><br><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">　　Person.prototype.name = &apos;Nicholas&apos;;</span><br><span class=\"line\">　　Person.prototype.age = 29;</span><br><span class=\"line\">　　Person.prototype.job = &apos;Software Engineer&apos;;</span><br><span class=\"line\">　　Person.prototype.sayName = function()&#123;</span><br><span class=\"line\">　　　　alert(this.name);</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　var person1 = new Person();</span><br><span class=\"line\">　　person1.sayName();//&quot;Nicholas&quot;</span><br><span class=\"line\">　　var person2 = new Person(); </span><br><span class=\"line\">　　person2.sayName(); //&quot;Nicholas&quot; </span><br><span class=\"line\">　　alert(person1.sayName == person2.sayName); //true</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-哪种方式更高效：document-getElementbyId-“myId”-还是-“-myId”-？\"><a href=\"#13-哪种方式更高效：document-getElementbyId-“myId”-还是-“-myId”-？\" class=\"headerlink\" title=\"13.哪种方式更高效：document.getElementbyId(“myId”) 还是 $(“#myId”)？\"></a>13.哪种方式更高效：document.getElementbyId(“myId”) 还是 $(“#myId”)？</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种：直接调用了js引擎。第二种会判断该使用哪种方式获取</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-关于跨域\"><a href=\"#14-关于跨域\" class=\"headerlink\" title=\"14.关于跨域\"></a>14.关于跨域</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1)造成跨域的两种策略：</span><br><span class=\"line\">DOM同源策略：禁止对不同源页面DOM进行操作。主要场景是iframe跨域的情况，不同域名的iframe是限制相互访问的，在同一个页面中也不许访问。</span><br><span class=\"line\">XMLHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起http请求。</span><br><span class=\"line\">*只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</span><br><span class=\"line\">(2)如何实现跨域？</span><br><span class=\"line\">&gt;&gt;&gt;跨域资源共享（CORS）：客户端，使用正常的xhr对象发送ajax请求，设置xhr.withCredentials=true(将cookie带过去)；服务器端，response header中设置Access-Control-Allow-Origin:yourhost.com  Access-Control-Allow-Credentials:true</span><br><span class=\"line\">&gt;&gt;&gt;jsonp实现跨域</span><br><span class=\"line\">*jsonp不能发post请求，只支持GET请求</span><br><span class=\"line\">&lt;script&gt;标签没有跨域限制，json是一种数据格式；jsonp是一种数据调用方式，可以理解为jsonp是带有callback的json，服务器端echo callback+&apos;(&apos;+json+&apos;)&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-jQuery-get-和-jQuery-ajax-方法之间的区别是什么\"><a href=\"#15-jQuery-get-和-jQuery-ajax-方法之间的区别是什么\" class=\"headerlink\" title=\"15.jQuery.get() 和 jQuery.ajax() 方法之间的区别是什么?\"></a>15.jQuery.get() 和 jQuery.ajax() 方法之间的区别是什么?</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*jQuery.ajax() 方法更强大，更具可配置性, 让你可以指定等待多久，以及如何处理错误。</span><br><span class=\"line\">*jQuery.get() 只获取数据的专门方法</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-ajax\"><a href=\"#16-ajax\" class=\"headerlink\" title=\"16.ajax\"></a>16.ajax</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1)什么是ajax？为什么要使用ajax？</span><br><span class=\"line\">*ajax被称为异步的JavaScript和XML，是实现异步交互的主要技术。</span><br><span class=\"line\">*优点：ajax可以实现页面的局部数据更新（页面不刷新就可以更新数据），对带宽和服务器的压力减小；缺点：浏览器的后退按钮失效，搜索引擎无法抓取，破坏代码的整体执行流程，不容易查找错误。</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/02hexo/error.jpg","slug":"error.jpg","post":"cjt5ccou70003g8rxzwuixkuf","modified":1,"renderable":0},{"_id":"source/_posts/02hexo/hexos.jpg","slug":"hexos.jpg","post":"cjt5ccou70003g8rxzwuixkuf","modified":1,"renderable":0},{"_id":"source/_posts/03介绍主题的修改/theme.jpg","post":"cjt5ccoub0006g8rxkixkscwr","slug":"theme.jpg","modified":1,"renderable":1},{"_id":"source/_posts/05主题内容的配置/themedes.jpg","post":"cjt5ccoue0008g8rxf5vbkfao","slug":"themedes.jpg","modified":1,"renderable":1},{"_id":"source/_posts/07lazyload/src.jpg","post":"cjt5ccoup000eg8rxrf9fa5zh","slug":"src.jpg","modified":1,"renderable":1},{"_id":"source/_posts/微信小程序登录及注册/微信小程序登录.png","post":"cjt5ccovy001yg8rxtyvgxkko","slug":"微信小程序登录.png","modified":1,"renderable":1},{"_id":"source/_posts/hexo博客保存源代码/branch.png","post":"cjt5ccovf000xg8rxmxunrgum","slug":"branch.png","modified":1,"renderable":1},{"_id":"source/_posts/hexo博客保存源代码/git.png","post":"cjt5ccovf000xg8rxmxunrgum","slug":"git.png","modified":1,"renderable":1},{"_id":"source/_posts/微信网页版图片上传预览的书写步骤/微信图片_20180905190333.png","post":"cjt5ccow10023g8rxljiy33nd","slug":"微信图片_20180905190333.png","modified":1,"renderable":1},{"_id":"source/_posts/微信网页版图片上传预览的书写步骤/微信图片_20180905190554.png","post":"cjt5ccow10023g8rxljiy33nd","slug":"微信图片_20180905190554.png","modified":1,"renderable":1},{"_id":"source/_posts/06php/1.jpg","post":"cjt5ccouj000cg8rxdgllvom9","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/06php/define.jpg","post":"cjt5ccouj000cg8rxdgllvom9","slug":"define.jpg","modified":1,"renderable":1},{"_id":"source/_posts/06php/host.jpg","post":"cjt5ccouj000cg8rxdgllvom9","slug":"host.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用less定制bootstrap的过程/1.jpg","post":"cjt5ccovo001eg8rxrbiw3bpg","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用less定制bootstrap的过程/2.jpg","post":"cjt5ccovo001eg8rxrbiw3bpg","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用less定制bootstrap的过程/3.jpg","post":"cjt5ccovo001eg8rxrbiw3bpg","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用less定制bootstrap的过程/4.jpg","post":"cjt5ccovo001eg8rxrbiw3bpg","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用less定制bootstrap的过程/5.jpg","post":"cjt5ccovo001eg8rxrbiw3bpg","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用less定制bootstrap的过程/6.jpg","post":"cjt5ccovo001eg8rxrbiw3bpg","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/index.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"index.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/util.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"util.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/vue-router-nav.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"vue-router-nav.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/子与子子1.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"子与子子1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/子与子子2.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"子与子子2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/子与父子.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"子与父子.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/子与父父.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"子与父父.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/搭建.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"搭建.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/父与子$parent.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"父与子$parent.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/父与子.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"父与子.jpg","modified":1,"renderable":1},{"_id":"source/_posts/08vue/父与子ref.jpg","post":"cjt5ccouv000jg8rx2zh3098y","slug":"父与子ref.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/1..jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"1..jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/10.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"10.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/11.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"11.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/12.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"12.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/5.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/6.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/9.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"9.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/add.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"add.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/addkey.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"addkey.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/blank.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"blank.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/createg.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"createg.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/deployment.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"deployment.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/dkeys.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"dkeys.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/eval.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"eval.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/git.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"git.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/github.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"github.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/hexo.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"hexo.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/hg.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"hg.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/hs.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"hs.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/in.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"in.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/key.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"key.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/login.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"login.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/ls.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"ls.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/newgithub.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"newgithub.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/node.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"node.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/none.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"none.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/re.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"re.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/resuccess.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"resuccess.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/ssh.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"ssh.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/success.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"success.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/theme.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"theme.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/themedes.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"themedes.jpg","modified":1,"renderable":1},{"_id":"source/_posts/02hexo/uname.jpg","post":"cjt5ccou70003g8rxzwuixkuf","slug":"uname.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjt5ccoud0007g8rx0h3ymyhe","category_id":"cjt5ccou90004g8rxdnrpl5a1","_id":"cjt5ccouq000fg8rxf4wdcw89"},{"post_id":"cjt5ccou20001g8rxect9yfip","category_id":"cjt5ccou90004g8rxdnrpl5a1","_id":"cjt5ccouw000kg8rx6a9n04w0"},{"post_id":"cjt5ccoue0008g8rxf5vbkfao","category_id":"cjt5ccou90004g8rxdnrpl5a1","_id":"cjt5ccova000ng8rxv7x3x0xj"},{"post_id":"cjt5ccou70003g8rxzwuixkuf","category_id":"cjt5ccou90004g8rxdnrpl5a1","_id":"cjt5ccovc000sg8rxnknil7qh"},{"post_id":"cjt5ccoub0006g8rxkixkscwr","category_id":"cjt5ccou90004g8rxdnrpl5a1","_id":"cjt5ccove000ug8rxfloglh2f"},{"post_id":"cjt5ccouj000cg8rxdgllvom9","category_id":"cjt5ccovb000og8rxh2dg1eon","_id":"cjt5ccovh0010g8rxwr8vy56i"},{"post_id":"cjt5ccovf000xg8rxmxunrgum","category_id":"cjt5ccou90004g8rxdnrpl5a1","_id":"cjt5ccovk0016g8rx6kxnd9ap"},{"post_id":"cjt5ccoup000eg8rxrf9fa5zh","category_id":"cjt5ccove000vg8rxdqv3gcwl","_id":"cjt5ccovl001ag8rxyt93en3i"},{"post_id":"cjt5ccovg000zg8rxvvozh79f","category_id":"cjt5ccou90004g8rxdnrpl5a1","_id":"cjt5ccovn001cg8rxaaxc315d"},{"post_id":"cjt5ccovi0013g8rx8wd2e8n5","category_id":"cjt5ccovb000og8rxh2dg1eon","_id":"cjt5ccovp001fg8rxhe7i650y"},{"post_id":"cjt5ccouv000jg8rx2zh3098y","category_id":"cjt5ccove000vg8rxdqv3gcwl","_id":"cjt5ccovr001jg8rxqexi9a6y"},{"post_id":"cjt5ccova000mg8rxgxr86nk1","category_id":"cjt5ccovk0017g8rx1lovzd49","_id":"cjt5ccovt001ng8rxc46cq8ls"},{"post_id":"cjt5ccovb000rg8rxutoruhdr","category_id":"cjt5ccovk0017g8rx1lovzd49","_id":"cjt5ccovv001rg8rxvi5rsj52"},{"post_id":"cjt5ccovu001qg8rxrjwql1ct","category_id":"cjt5ccove000vg8rxdqv3gcwl","_id":"cjt5ccovz001zg8rxddunsaxd"},{"post_id":"cjt5ccovd000tg8rx6bjs7job","category_id":"cjt5ccovr001kg8rxh21tw13p","_id":"cjt5ccow20024g8rxu5v98v8s"},{"post_id":"cjt5ccovx001wg8rx1jf5q7t8","category_id":"cjt5ccove000vg8rxdqv3gcwl","_id":"cjt5ccow30027g8rxo8i8tf73"},{"post_id":"cjt5ccovj0015g8rxe8idskla","category_id":"cjt5ccovw001ug8rx3x7awa4s","_id":"cjt5ccow5002bg8rxdeooawvm"},{"post_id":"cjt5ccovl0019g8rxs6u4ci5l","category_id":"cjt5ccow00020g8rxogmhk1hv","_id":"cjt5ccow5002eg8rx766r3wdk"},{"post_id":"cjt5ccow30026g8rxax4zzbr6","category_id":"cjt5ccove000vg8rxdqv3gcwl","_id":"cjt5ccow6002gg8rxpyhm3kmq"},{"post_id":"cjt5ccovm001bg8rxyffqy6k5","category_id":"cjt5ccovw001ug8rx3x7awa4s","_id":"cjt5ccow6002hg8rxpsb2u5oi"},{"post_id":"cjt5ccovo001eg8rxrbiw3bpg","category_id":"cjt5ccow5002dg8rxtskyg4es","_id":"cjt5ccow7002lg8rxkxaieoem"},{"post_id":"cjt5ccovq001ig8rx68dou1ho","category_id":"cjt5ccow6002ig8rxfr2gipir","_id":"cjt5ccow9002rg8rx3f6vn5yo"},{"post_id":"cjt5ccovr001mg8rx2wet7zm6","category_id":"cjt5ccovw001ug8rx3x7awa4s","_id":"cjt5ccow9002vg8rxw9o0djy8"},{"post_id":"cjt5ccovv001tg8rx6elvh6mw","category_id":"cjt5ccow8002qg8rxwgf4dexj","_id":"cjt5ccowa002zg8rx3erny3s6"},{"post_id":"cjt5ccovy001yg8rxtyvgxkko","category_id":"cjt5ccow9002wg8rxbnn2uoje","_id":"cjt5ccowb0033g8rx3slmgnr2"},{"post_id":"cjt5ccow10023g8rxljiy33nd","category_id":"cjt5ccowa0030g8rxie7q414j","_id":"cjt5ccowc0035g8rx2hpjwjxq"}],"PostTag":[{"post_id":"cjt5ccoud0007g8rx0h3ymyhe","tag_id":"cjt5ccoub0005g8rxniagfzmu","_id":"cjt5ccoui000bg8rxw0w5g1qj"},{"post_id":"cjt5ccou20001g8rxect9yfip","tag_id":"cjt5ccoub0005g8rxniagfzmu","_id":"cjt5ccouo000dg8rxzl9e55z1"},{"post_id":"cjt5ccoue0008g8rxf5vbkfao","tag_id":"cjt5ccoub0005g8rxniagfzmu","_id":"cjt5ccouu000ig8rx0jslsjk7"},{"post_id":"cjt5ccou70003g8rxzwuixkuf","tag_id":"cjt5ccoub0005g8rxniagfzmu","_id":"cjt5ccov9000lg8rx29ctya3y"},{"post_id":"cjt5ccoub0006g8rxkixkscwr","tag_id":"cjt5ccoub0005g8rxniagfzmu","_id":"cjt5ccovb000qg8rxjt3ek4gt"},{"post_id":"cjt5ccouj000cg8rxdgllvom9","tag_id":"cjt5ccovb000pg8rxgf4qkfoi","_id":"cjt5ccovg000yg8rxcimhx6fm"},{"post_id":"cjt5ccovg000zg8rxvvozh79f","tag_id":"cjt5ccoub0005g8rxniagfzmu","_id":"cjt5ccovj0014g8rxcisrf9qj"},{"post_id":"cjt5ccoup000eg8rxrf9fa5zh","tag_id":"cjt5ccovf000wg8rxm6017uey","_id":"cjt5ccovq001hg8rxlpetiant"},{"post_id":"cjt5ccoup000eg8rxrf9fa5zh","tag_id":"cjt5ccovi0012g8rx0ee1ec4m","_id":"cjt5ccovr001lg8rx8rb9r7qk"},{"post_id":"cjt5ccoup000eg8rxrf9fa5zh","tag_id":"cjt5ccovl0018g8rxrz8u04jz","_id":"cjt5ccovt001pg8rxrcknz2to"},{"post_id":"cjt5ccovq001ig8rx68dou1ho","tag_id":"cjt5ccovp001gg8rx1eqvm94d","_id":"cjt5ccovv001sg8rxd8oknrnd"},{"post_id":"cjt5ccouv000jg8rx2zh3098y","tag_id":"cjt5ccovp001gg8rx1eqvm94d","_id":"cjt5ccovy001xg8rx0txtcob5"},{"post_id":"cjt5ccouv000jg8rx2zh3098y","tag_id":"cjt5ccovt001og8rxej79voec","_id":"cjt5ccow00021g8rxktfat7iv"},{"post_id":"cjt5ccovx001wg8rx1jf5q7t8","tag_id":"cjt5ccovp001gg8rx1eqvm94d","_id":"cjt5ccow20025g8rxo0mgwk27"},{"post_id":"cjt5ccova000mg8rxgxr86nk1","tag_id":"cjt5ccovw001vg8rxn8p55kig","_id":"cjt5ccow40028g8rxrkgrfbtn"},{"post_id":"cjt5ccovb000rg8rxutoruhdr","tag_id":"cjt5ccovw001vg8rxn8p55kig","_id":"cjt5ccow5002cg8rxqi7qag68"},{"post_id":"cjt5ccovd000tg8rx6bjs7job","tag_id":"cjt5ccow4002ag8rxpvhvorqh","_id":"cjt5ccow7002kg8rxn8ct3pvy"},{"post_id":"cjt5ccovd000tg8rx6bjs7job","tag_id":"cjt5ccow5002fg8rxpuhcjorz","_id":"cjt5ccow7002ng8rxrl1jlefd"},{"post_id":"cjt5ccovf000xg8rxmxunrgum","tag_id":"cjt5ccoub0005g8rxniagfzmu","_id":"cjt5ccow8002pg8rxhvznly7k"},{"post_id":"cjt5ccovf000xg8rxmxunrgum","tag_id":"cjt5ccow4002ag8rxpvhvorqh","_id":"cjt5ccow9002sg8rxnsz1kc4p"},{"post_id":"cjt5ccovi0013g8rx8wd2e8n5","tag_id":"cjt5ccow8002og8rxupg1yz0i","_id":"cjt5ccow9002ug8rxvisjtfmt"},{"post_id":"cjt5ccovj0015g8rxe8idskla","tag_id":"cjt5ccow9002tg8rx03rmpx0y","_id":"cjt5ccowa002yg8rx2kn18duz"},{"post_id":"cjt5ccovl0019g8rxs6u4ci5l","tag_id":"cjt5ccowa002xg8rxarvw0iho","_id":"cjt5ccowb0032g8rx7fmn95u6"},{"post_id":"cjt5ccovm001bg8rxyffqy6k5","tag_id":"cjt5ccowb0031g8rxqdjja3wa","_id":"cjt5ccowd0037g8rxh4x1qwf7"},{"post_id":"cjt5ccovm001bg8rxyffqy6k5","tag_id":"cjt5ccowb0034g8rxayko2rlc","_id":"cjt5ccowd0038g8rxi9t46mxk"},{"post_id":"cjt5ccovo001eg8rxrbiw3bpg","tag_id":"cjt5ccowc0036g8rxibxnrljs","_id":"cjt5ccowe003cg8rxle1vz2np"},{"post_id":"cjt5ccovo001eg8rxrbiw3bpg","tag_id":"cjt5ccowd0039g8rxqxwpnmol","_id":"cjt5ccowe003dg8rxfuquj1k3"},{"post_id":"cjt5ccovo001eg8rxrbiw3bpg","tag_id":"cjt5ccowd003ag8rxvafxa3xx","_id":"cjt5ccowe003fg8rxczp47fyx"},{"post_id":"cjt5ccovr001mg8rx2wet7zm6","tag_id":"cjt5ccowe003bg8rxh8bd1qvb","_id":"cjt5ccowg003hg8rx5l3z9gjg"},{"post_id":"cjt5ccovr001mg8rx2wet7zm6","tag_id":"cjt5ccowe003eg8rxzr1z2p7e","_id":"cjt5ccowg003ig8rxthak2l1m"},{"post_id":"cjt5ccovu001qg8rxrjwql1ct","tag_id":"cjt5ccowf003gg8rxdt6xylqg","_id":"cjt5ccowg003kg8rx1p8x730u"},{"post_id":"cjt5ccovv001tg8rx6elvh6mw","tag_id":"cjt5ccowg003jg8rx0xxg7gtn","_id":"cjt5ccowh003ng8rx5drxqxqh"},{"post_id":"cjt5ccovv001tg8rx6elvh6mw","tag_id":"cjt5ccowg003lg8rxo0vxr28h","_id":"cjt5ccowh003og8rxxzegkrmn"},{"post_id":"cjt5ccovy001yg8rxtyvgxkko","tag_id":"cjt5ccowh003mg8rxrnhok61l","_id":"cjt5ccowi003qg8rxkozc153m"},{"post_id":"cjt5ccow10023g8rxljiy33nd","tag_id":"cjt5ccovw001vg8rxn8p55kig","_id":"cjt5ccowj003tg8rxw4qdobjz"},{"post_id":"cjt5ccow10023g8rxljiy33nd","tag_id":"cjt5ccowh003pg8rxm7of620g","_id":"cjt5ccowj003ug8rx82xocnrs"},{"post_id":"cjt5ccow10023g8rxljiy33nd","tag_id":"cjt5ccowi003rg8rxrcplv26k","_id":"cjt5ccowj003vg8rxduee0t5h"},{"post_id":"cjt5ccow30026g8rxax4zzbr6","tag_id":"cjt5ccowh003mg8rxrnhok61l","_id":"cjt5ccowj003wg8rxxcr1087w"}],"Tag":[{"name":"hexo","_id":"cjt5ccoub0005g8rxniagfzmu"},{"name":"php","_id":"cjt5ccovb000pg8rxgf4qkfoi"},{"name":"html","_id":"cjt5ccovf000wg8rxm6017uey"},{"name":"javascipt","_id":"cjt5ccovi0012g8rx0ee1ec4m"},{"name":"jquery","_id":"cjt5ccovl0018g8rxrz8u04jz"},{"name":"javascript","_id":"cjt5ccovp001gg8rx1eqvm94d"},{"name":"vue","_id":"cjt5ccovt001og8rxej79voec"},{"name":"react","_id":"cjt5ccovw001vg8rxn8p55kig"},{"name":"git","_id":"cjt5ccow4002ag8rxpvhvorqh"},{"name":"vscode","_id":"cjt5ccow5002fg8rxpuhcjorz"},{"name":"node","_id":"cjt5ccow8002og8rxupg1yz0i"},{"name":"高阶组件HOC","_id":"cjt5ccow9002tg8rx03rmpx0y"},{"name":"webpack","_id":"cjt5ccowa002xg8rxarvw0iho"},{"name":"fetch","_id":"cjt5ccowb0031g8rxqdjja3wa"},{"name":"下载","_id":"cjt5ccowb0034g8rxayko2rlc"},{"name":"css","_id":"cjt5ccowc0036g8rxibxnrljs"},{"name":"less","_id":"cjt5ccowd0039g8rxqxwpnmol"},{"name":"bootstrap","_id":"cjt5ccowd003ag8rxvafxa3xx"},{"name":"redux","_id":"cjt5ccowe003bg8rxh8bd1qvb"},{"name":"redux-thunk","_id":"cjt5ccowe003eg8rxzr1z2p7e"},{"name":"网址","_id":"cjt5ccowf003gg8rxdt6xylqg"},{"name":"mpvue","_id":"cjt5ccowg003jg8rx0xxg7gtn"},{"name":"weui","_id":"cjt5ccowg003lg8rxo0vxr28h"},{"name":"js","_id":"cjt5ccowh003mg8rxrnhok61l"},{"name":"antd-mobile","_id":"cjt5ccowh003pg8rxm7of620g"},{"name":"微信JS-SDK","_id":"cjt5ccowi003rg8rxrcplv26k"}]}}